webpackJsonp([0],{

/***/ "./src/app/+selection/basic-usage/basic-usage.component.html":
/***/ function(module, exports) {

module.exports = "<div class=\"row\" rtSelectionArea>\r\n  <div class=\"col-md-12\" *ngFor=\"let country of countries\" [rtSelectable]=\"country\" #rts=\"rtSelectable\">\r\n    <div class=\"item\" [class.selected]=\"rts.selected\">\r\n      {{country.name}}\r\n    </div>\r\n  </div>\r\n</div>"

/***/ },

/***/ "./src/app/+selection/basic-usage/basic-usage.component.ts":
/***/ function(module, exports, __webpack_require__) {

"use strict";
"use strict";
var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var countries_service_1 = __webpack_require__("./src/app/+selection/countries.service.ts");
var BasicUsageComponent = (function () {
    function BasicUsageComponent(countriesService) {
        var _this = this;
        this.countriesService = countriesService;
        this.countries = new Array();
        this.countriesService.getSomeCountries()
            .subscribe(function (countries) { return _this.countries = countries; });
    }
    BasicUsageComponent = __decorate([
        core_1.Component({
            selector: 'rt-demo-basic-usage',
            template: __webpack_require__("./src/app/+selection/basic-usage/basic-usage.component.html")
        }), 
        __metadata('design:paramtypes', [(typeof (_a = typeof countries_service_1.CountriesService !== 'undefined' && countries_service_1.CountriesService) === 'function' && _a) || Object])
    ], BasicUsageComponent);
    return BasicUsageComponent;
    var _a;
}());
exports.BasicUsageComponent = BasicUsageComponent;


/***/ },

/***/ "./src/app/+selection/countries.service.ts":
/***/ function(module, exports, __webpack_require__) {

"use strict";
"use strict";
var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var http_1 = __webpack_require__("./node_modules/@angular/http/index.js");
var _ = __webpack_require__("./node_modules/lodash/lodash.js");
var ReplaySubject_1 = __webpack_require__("./node_modules/rxjs/ReplaySubject.js");
var CountriesService = (function () {
    function CountriesService(http) {
        this.http = http;
        this.airportsUrl = './assets/airports.json';
        this.airportsCache = new ReplaySubject_1.ReplaySubject(1);
    }
    CountriesService.prototype.getAirports = function () {
        var _this = this;
        if (!this.airportsCache.observers.length) {
            this.airportsCache.complete();
            this.airportsCache = new ReplaySubject_1.ReplaySubject(1);
            this.http.get(this.airportsUrl)
                .map(function (response) { return (response.json().airports); })
                .subscribe(function (data) { return _this.airportsCache.next(data); }, function (error) { return _this.airportsCache.error(error); });
        }
        return this.airportsCache;
    };
    CountriesService.prototype.getSomeCountries = function (countriesCount, delay) {
        if (countriesCount === void 0) { countriesCount = 5; }
        if (delay === void 0) { delay = 0; }
        return this.getAirports()
            .delay(delay)
            .map(function (airports) {
            return _.chain(airports)
                .map(function (item) { return (item.countryName); })
                .filter(function (c) { return !!c; })
                .uniq()
                .take(countriesCount)
                .value();
        })
            .map(function (countryNames) { return countryNames.map(function (countryName) { return ({ name: countryName }); }); });
    };
    CountriesService.prototype.getRegionsWithCountriesAndAirports = function () {
        return this.getAirports()
            .map(function (airports) { return (_.chain(airports)
            .groupBy(function (item) { return item.region; })
            .map(function (groupedByRegion, regionName) { return ({
            countries: _.chain(groupedByRegion).groupBy(function (item) { return item.countryName; }).map(function (groupedByCountry, countryName) { return ({
                airports: groupedByCountry
                    .map(function (airport) { return ({
                    iataCode: airport.iataCode,
                    name: airport.name,
                    selected: false
                }); }),
                name: countryName,
                selected: false
            }); })
                .filter(function (country) { return country.airports.length > 1; })
                .orderBy(function (country) { return country.name; })
                .value(),
            name: regionName,
            selected: false
        }); })
            .filter(function (region) { return region.countries.length > 1; })
            .orderBy(function (region) { return region.name; })
            .value()); });
    };
    CountriesService.prototype.getCountryInfo = function (countryName, delay) {
        if (delay === void 0) { delay = 0; }
        return this.http.get("https://restcountries.eu/rest/v1/name/" + countryName).map(function (response) { return (response.json()[0]); }).delay(delay);
    };
    CountriesService = __decorate([
        core_1.Injectable(), 
        __metadata('design:paramtypes', [(typeof (_a = typeof http_1.Http !== 'undefined' && http_1.Http) === 'function' && _a) || Object])
    ], CountriesService);
    return CountriesService;
    var _a;
}());
exports.CountriesService = CountriesService;


/***/ },

/***/ "./src/app/+selection/custom-track-by/custom-track-by.component.html":
/***/ function(module, exports) {

module.exports = "<div class=\"toolbar\">\r\n\t<button type=\"button\" class=\"btn btn-primary\" title=\"Reload data\" (click)=\"reload()\">Reload data</button>\r\n</div>\r\n<div class=\"row\" rtSelectionArea [trackBy]=\"trackByName\">\r\n\t<div class=\"col-md-12\" *ngFor=\"let country of countries\" [rtSelectable]=\"country\" #rts=\"rtSelectable\">\r\n\t\t<div class=\"item\" [class.selected]=\"rts.selected\">\r\n\t\t\t{{country.name}}\r\n\t\t</div>\r\n\t</div>\r\n\t<div *ngIf=\"!countries.length\" class=\"line-progress\">\r\n\t</div>\r\n</div>"

/***/ },

/***/ "./src/app/+selection/custom-track-by/custom-track-by.component.ts":
/***/ function(module, exports, __webpack_require__) {

"use strict";
"use strict";
var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var countries_service_1 = __webpack_require__("./src/app/+selection/countries.service.ts");
var CustomTrackByComponent = (function () {
    function CustomTrackByComponent(countriesService) {
        this.countriesService = countriesService;
        this.countries = [];
        this.reload();
    }
    CustomTrackByComponent.prototype.reload = function () {
        var _this = this;
        this.countries = [];
        this.countriesService
            .getSomeCountries(5, 700)
            .subscribe(function (countries) { return _this.countries = countries; });
    };
    CustomTrackByComponent.prototype.trackByName = function (index, country) {
        return country.name;
    };
    CustomTrackByComponent = __decorate([
        core_1.Component({
            selector: 'rt-demo-custom-track-by',
            template: __webpack_require__("./src/app/+selection/custom-track-by/custom-track-by.component.html")
        }), 
        __metadata('design:paramtypes', [(typeof (_a = typeof countries_service_1.CountriesService !== 'undefined' && countries_service_1.CountriesService) === 'function' && _a) || Object])
    ], CustomTrackByComponent);
    return CustomTrackByComponent;
    var _a;
}());
exports.CustomTrackByComponent = CustomTrackByComponent;


/***/ },

/***/ "./src/app/+selection/options/options.component.css":
/***/ function(module, exports) {

module.exports = ":host /deep/ .options{padding:0 1px 15px}:host /deep/ .checkbox-inline+.checkbox-inline,.radio-inline+.radio-inline{margin-left:0}:host /deep/ .checkbox-inline,.radio-inline{margin-right:10px}\n"

/***/ },

/***/ "./src/app/+selection/options/options.component.html":
/***/ function(module, exports) {

module.exports = "<div class=\"row\" rtSelectionArea [horizontal]=\"horizontal\" [multiple]=\"multiple\" [toggleOnly]=\"toggleOnly\" [autoSelectFirst]=\"autoSelectFirst\">\r\n\t<div class=\"options\">\r\n\t\t<label class=\"checkbox-inline\">\r\n      <input type=\"checkbox\" [(ngModel)]=\"horizontal\">horizontal\r\n    </label>\r\n\t\t<label class=\"checkbox-inline\">\r\n      <input type=\"checkbox\" [(ngModel)]=\"toggleOnly\">toggleOnly\r\n    </label>\r\n\t\t<label class=\"checkbox-inline\">\r\n      <input type=\"checkbox\" [(ngModel)]=\"multiple\">multiple\r\n    </label>\r\n\t\t<label class=\"checkbox-inline\">\r\n      <input type=\"checkbox\" [(ngModel)]=\"autoSelectFirst\">autoSelectFirst\r\n    </label>\r\n\t\t<button type=\"button\" class=\"btn btn-primary\" title=\"Reload data\" (click)=\"reload()\">Reload data</button>\r\n\t</div>\r\n\t\r\n  <div class=\"col-md-3\" *ngFor=\"let country of countries\" [rtSelectable]=\"country\" #rts=\"rtSelectable\">\r\n\t\t<div class=\"item\" [class.selected]=\"rts.selected\">\r\n\t\t\t{{country.name}}\r\n\t\t</div>\r\n\t</div>\r\n\t\r\n  <div *ngIf=\"!countries.length\" class=\"line-progress\">\r\n\t</div>\r\n</div>"

/***/ },

/***/ "./src/app/+selection/options/options.component.ts":
/***/ function(module, exports, __webpack_require__) {

"use strict";
"use strict";
var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var countries_service_1 = __webpack_require__("./src/app/+selection/countries.service.ts");
var OptionsComponent = (function () {
    function OptionsComponent(countriesService) {
        this.countriesService = countriesService;
        this.horizontal = false;
        this.multiple = true;
        this.toggleOnly = false;
        this.autoSelectFirst = false;
        this.countries = [];
        this.reload();
    }
    OptionsComponent.prototype.reload = function () {
        var _this = this;
        this.countries = [];
        this.countriesService.getSomeCountries(8, 500)
            .subscribe(function (countries) { return _this.countries = countries; });
    };
    OptionsComponent = __decorate([
        core_1.Component({
            selector: 'rt-demo-options',
            styles: [__webpack_require__("./src/app/+selection/options/options.component.css")],
            template: __webpack_require__("./src/app/+selection/options/options.component.html")
        }), 
        __metadata('design:paramtypes', [(typeof (_a = typeof countries_service_1.CountriesService !== 'undefined' && countries_service_1.CountriesService) === 'function' && _a) || Object])
    ], OptionsComponent);
    return OptionsComponent;
    var _a;
}());
exports.OptionsComponent = OptionsComponent;


/***/ },

/***/ "./src/app/+selection/select-all/select-all.component.html":
/***/ function(module, exports) {

module.exports = "<div class=\"row\" rtSelectionArea #selectionArea=\"rtSelectionArea\">\r\n  <div class=\"col-md-12 toolbar\">\r\n    <ul>\r\n      <li>\r\n        <button class=\"btn btn-primary\" title=\"Select all items\" (click)=\"selectionArea.selectionService.selectAll(false)\">Select all</button>\r\n      </li>\r\n      <li>\r\n        <button class=\"btn btn-primary\" title=\"Deselect all items\" (click)=\"selectionArea.selectionService.deselectAll(false)\">Deselect all</button>\r\n      </li>\r\n      <li>\r\n        <button class=\"btn btn-primary\" title=\"Select all items recursivelly\" (click)=\"selectionArea.selectionService.selectAll()\">Select recursivelly</button>\r\n      </li>\r\n      <li>\r\n        <button class=\"btn btn-primary\" title=\"Deselect all items recursivelly\" (click)=\"selectionArea.selectionService.deselectAll()\">Deselect recursivelly</button>\r\n      </li>\r\n    </ul>\r\n  </div>\r\n  <div class=\"col-md-12\" *ngFor=\"let region of regions | async\">\r\n    <div class=\"col-md-12 item\" [class.selected]=\"rts.selected\" [rtSelectable]=\"region\" #rts=\"rtSelectable\">\r\n      {{region.name}} ({{region.countries.length}} countries)\r\n    </div>\r\n\r\n    <div class=\"col-md-12\" *ngIf=\"rts.selected\" rtSelectionArea>\r\n      <div *ngFor=\"let country of region.countries\">\r\n        <div class=\"col-md-12 item\" [class.selected]=\"rts.selected\" [rtSelectable]=\"country\" #rts=\"rtSelectable\">\r\n          {{country.name}} ({{country.airports.length}} airports)\r\n        </div>\r\n        <div class=\"col-md-12\" *ngIf=\"rts.selected\" rtSelectionArea>\r\n          <div *ngFor=\"let airport of country.airports\">\r\n            <div class=\"col-md-12 item\" [class.selected]=\"rts.selected\" [rtSelectable]=\"airport\" #rts=\"rtSelectable\">\r\n              {{airport.name}} ({{airport.iataCode}})\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>"

/***/ },

/***/ "./src/app/+selection/select-all/select-all.component.ts":
/***/ function(module, exports, __webpack_require__) {

"use strict";
"use strict";
var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var countries_service_1 = __webpack_require__("./src/app/+selection/countries.service.ts");
var SelectAllComponent = (function () {
    function SelectAllComponent(countriesService) {
        this.countriesService = countriesService;
        this.regions = this.countriesService.getRegionsWithCountriesAndAirports();
    }
    SelectAllComponent = __decorate([
        core_1.Component({
            selector: 'rt-demo-select-all',
            template: __webpack_require__("./src/app/+selection/select-all/select-all.component.html")
        }), 
        __metadata('design:paramtypes', [(typeof (_a = typeof countries_service_1.CountriesService !== 'undefined' && countries_service_1.CountriesService) === 'function' && _a) || Object])
    ], SelectAllComponent);
    return SelectAllComponent;
    var _a;
}());
exports.SelectAllComponent = SelectAllComponent;


/***/ },

/***/ "./src/app/+selection/selected-flag-data/selected-flag-data.component.html":
/***/ function(module, exports) {

module.exports = "<div class=\"row\" rtSelectionArea>\r\n  <div class=\"col-md-12\" *ngFor=\"let country of countries\" [rtSelectable]=\"country\">\r\n    <div *ngIf=\"!country.selected\" class=\"item\" [class.selected]=\"country.selected\">\r\n      {{country.name}}\r\n    </div>\r\n    <div *ngIf=\"country.selected\" class=\"item\" [class.selected]=\"country.selected\">\r\n      <input class=\"form-control\" type=\"text\" rtStopEvents=\"mouseup\" rtFocusOnRender [(ngModel)]=\"country.name\" name=\"name\" />\r\n    </div>\r\n  </div>\r\n</div>"

/***/ },

/***/ "./src/app/+selection/selected-flag-data/selected-flag-data.component.ts":
/***/ function(module, exports, __webpack_require__) {

"use strict";
"use strict";
var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var countries_service_1 = __webpack_require__("./src/app/+selection/countries.service.ts");
var SelectedFlagDataComponent = (function () {
    function SelectedFlagDataComponent(countriesService) {
        var _this = this;
        this.countriesService = countriesService;
        this.countries = new Array();
        this.countriesService.getSomeCountries()
            .subscribe(function (countries) { return _this.countries = countries.map(function (country) { return ({ name: country.name, selected: false }); }); });
    }
    SelectedFlagDataComponent = __decorate([
        core_1.Component({
            selector: 'rt-demo-selected-flag-data',
            template: __webpack_require__("./src/app/+selection/selected-flag-data/selected-flag-data.component.html")
        }), 
        __metadata('design:paramtypes', [(typeof (_a = typeof countries_service_1.CountriesService !== 'undefined' && countries_service_1.CountriesService) === 'function' && _a) || Object])
    ], SelectedFlagDataComponent);
    return SelectedFlagDataComponent;
    var _a;
}());
exports.SelectedFlagDataComponent = SelectedFlagDataComponent;


/***/ },

/***/ "./src/app/+selection/selected-flag/selected-flag.component.html":
/***/ function(module, exports) {

module.exports = "<div class=\"row\" rtSelectionArea>\r\n  <div class=\"col-md-12\" *ngFor=\"let country of countries\" [rtSelectable]=\"country\" #rts=\"rtSelectable\">\r\n    <div *ngIf=\"!rts.selected\" class=\"item\" [class.selected]=\"rts.selected\">\r\n      {{country.name}}\r\n    </div>\r\n    <div *ngIf=\"rts.selected\" class=\"item\" [class.selected]=\"rts.selected\">\r\n      <input class=\"form-control\" type=\"text\" rtStopEvents=\"mouseup\" rtFocusOnRender [(ngModel)]=\"country.name\" name=\"name\" />\r\n    </div>\r\n  </div>\r\n</div>"

/***/ },

/***/ "./src/app/+selection/selected-flag/selected-flag.component.ts":
/***/ function(module, exports, __webpack_require__) {

"use strict";
"use strict";
var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var countries_service_1 = __webpack_require__("./src/app/+selection/countries.service.ts");
var SelectedFlagComponent = (function () {
    function SelectedFlagComponent(countriesService) {
        var _this = this;
        this.countriesService = countriesService;
        this.countries = new Array();
        this.countriesService.getSomeCountries()
            .subscribe(function (countries) { return _this.countries = countries; });
    }
    SelectedFlagComponent = __decorate([
        core_1.Component({
            selector: 'rt-demo-selected-flag',
            template: __webpack_require__("./src/app/+selection/selected-flag/selected-flag.component.html")
        }), 
        __metadata('design:paramtypes', [(typeof (_a = typeof countries_service_1.CountriesService !== 'undefined' && countries_service_1.CountriesService) === 'function' && _a) || Object])
    ], SelectedFlagComponent);
    return SelectedFlagComponent;
    var _a;
}());
exports.SelectedFlagComponent = SelectedFlagComponent;


/***/ },

/***/ "./src/app/+selection/selection-checkbox/selection-checkbox.component.css":
/***/ function(module, exports) {

module.exports = ":host div.toolbar ul{padding-left:17px;list-style:none;margin-bottom:0}:host div.toolbar ul li{display:inline-block;padding-right:5px;padding-left:5px}\n"

/***/ },

/***/ "./src/app/+selection/selection-checkbox/selection-checkbox.component.html":
/***/ function(module, exports) {

module.exports = "<div class=\"row\" rtSelectionArea>\r\n  <div class=\"col-md-12\" *ngFor=\"let region of regions | async\">\r\n    <div class=\"col-md-12 item\" [class.selected]=\"region.selected\">\r\n      <label class=\"checkbox-inline\">\r\n      <input type=\"checkbox\" [rtSelectionCheckboxFor]=\"region\" /> {{region.name}} ({{region.countries.length}} countries)\r\n      </label>\r\n    </div>\r\n    <div class=\"col-md-12\" *ngIf=\"region.selected\" rtSelectionArea>\r\n      <div *ngFor=\"let country of region.countries\">\r\n        <div class=\"col-md-12 item\" [class.selected]=\"country.selected\">\r\n          <label class=\"checkbox-inline\">\r\n          <input type=\"checkbox\" [rtSelectionCheckboxFor]=\"country\" /> {{country.name}} ({{country.airports.length}}\r\n          airports)</label>\r\n        </div>\r\n        <div class=\"col-md-12\" *ngIf=\"country.selected\" rtSelectionArea>\r\n          <div *ngFor=\"let airport of country.airports\">\r\n            <div class=\"col-md-12 item\" [class.selected]=\"airport.selected\">\r\n              <label class=\"checkbox-inline\">\r\n              <input type=\"checkbox\" [rtSelectionCheckboxFor]=\"airport\" /> {{airport.name}} ({{airport.iataCode}})\r\n              </label>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>"

/***/ },

/***/ "./src/app/+selection/selection-checkbox/selection-checkbox.component.ts":
/***/ function(module, exports, __webpack_require__) {

"use strict";
"use strict";
var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var countries_service_1 = __webpack_require__("./src/app/+selection/countries.service.ts");
var SelectionCheckboxComponent = (function () {
    function SelectionCheckboxComponent(countriesService) {
        this.countriesService = countriesService;
        this.regions = this.countriesService.getRegionsWithCountriesAndAirports();
    }
    SelectionCheckboxComponent = __decorate([
        core_1.Component({
            selector: 'rt-demo-selection-checkbox',
            styles: [__webpack_require__("./src/app/+selection/selection-checkbox/selection-checkbox.component.css")],
            template: __webpack_require__("./src/app/+selection/selection-checkbox/selection-checkbox.component.html")
        }), 
        __metadata('design:paramtypes', [(typeof (_a = typeof countries_service_1.CountriesService !== 'undefined' && countries_service_1.CountriesService) === 'function' && _a) || Object])
    ], SelectionCheckboxComponent);
    return SelectionCheckboxComponent;
    var _a;
}());
exports.SelectionCheckboxComponent = SelectionCheckboxComponent;


/***/ },

/***/ "./src/app/+selection/selection-events/country-details/country-details.component.html":
/***/ function(module, exports) {

module.exports = "<div class=\"item\" [class.selected]=\"selected\">\r\n\t{{country.name}}\r\n</div>\r\n<div *ngIf=\"selected\" rtStopEvents=\"mouseup\">\r\n\t<div *ngIf=\"loading\" class=\"line-progress\">\r\n\t</div>\r\n\t<div *ngIf=\"!loading\">\r\n\t\t<form>\r\n\t\t\t<div class=\"form-group\">\r\n\t\t\t\t<label for=\"name\">Country name</label>\r\n\t\t\t\t<input class=\"form-control\" name=\"name\" placeholder=\"Country name\" type=\"text\" [(ngModel)]=\"countryInfo.name\">\r\n\t\t\t</div>\r\n\t\t\t<div class=\"form-group\">\r\n\t\t\t\t<label for=\"nativeName\">Native name</label>\r\n\t\t\t\t<input class=\"form-control\" name=\"nativeName\" placeholder=\"Native name\" type=\"text\" [(ngModel)]=\"countryInfo.nativeName\">\r\n\t\t\t</div>\r\n\t\t\t<div class=\"form-group\">\r\n\t\t\t\t<label for=\"population\">Population</label>\r\n\t\t\t\t<input class=\"form-control\" name=\"population\" placeholder=\"Population\" type=\"text\" [(ngModel)]=\"countryInfo.population\">\r\n\t\t\t</div>\r\n\t\t\t<div class=\"form-group\">\r\n\t\t\t\t<label for=\"alpha2Code\">Alpha2 code</label>\r\n\t\t\t\t<input class=\"form-control\" name=\"alpha2Code\" placeholder=\"Alpha2 code\" type=\"text\" [(ngModel)]=\"countryInfo.alpha2Code\">\r\n\t\t\t</div>\r\n\t\t\t<div class=\"form-group\">\r\n\t\t\t\t<label for=\"alpha3Code\">Alpha3 code</label>\r\n\t\t\t\t<input class=\"form-control\" name=\"alpha3Code\" placeholder=\"Alpha3 code\" type=\"text\" [(ngModel)]=\"countryInfo.alpha3Code\">\r\n\t\t\t</div>\r\n\t\t</form>\r\n\t</div>\r\n</div>"

/***/ },

/***/ "./src/app/+selection/selection-events/country-details/country-details.component.ts":
/***/ function(module, exports, __webpack_require__) {

"use strict";
"use strict";
var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var countries_service_1 = __webpack_require__("./src/app/+selection/countries.service.ts");
var CountryDetailsComponent = (function () {
    function CountryDetailsComponent(countriesService) {
        this.countriesService = countriesService;
        this.selected = false;
        this.loading = false;
        this.countryInfo = null;
    }
    CountryDetailsComponent.prototype.onSelected = function () {
        var _this = this;
        this.selected = true;
        this.loading = true;
        this.countriesService.getCountryInfo(this.country.name).subscribe(function (countryInfo) {
            _this.countryInfo = countryInfo;
            _this.loading = false;
        });
    };
    CountryDetailsComponent.prototype.onDeselected = function () {
        this.selected = false;
        this.countryInfo = null;
    };
    __decorate([
        core_1.Input(), 
        __metadata('design:type', Object)
    ], CountryDetailsComponent.prototype, "country", void 0);
    CountryDetailsComponent = __decorate([
        core_1.Component({
            selector: 'rt-demo-country-details',
            template: __webpack_require__("./src/app/+selection/selection-events/country-details/country-details.component.html")
        }), 
        __metadata('design:paramtypes', [(typeof (_a = typeof countries_service_1.CountriesService !== 'undefined' && countries_service_1.CountriesService) === 'function' && _a) || Object])
    ], CountryDetailsComponent);
    return CountryDetailsComponent;
    var _a;
}());
exports.CountryDetailsComponent = CountryDetailsComponent;


/***/ },

/***/ "./src/app/+selection/selection-events/selection-events.component.html":
/***/ function(module, exports) {

module.exports = "<div class=\"row\" rtSelectionArea=\"countries\" (itemSelected)=\"onItemSelected($event)\" (itemDeselected)=\"onItemDeselected($event)\">\r\n  <div class=\"col-md-12\" *ngFor=\"let country of countries\">\r\n    <rt-demo-country-details #detailsComp [country]=\"country\" [rtSelectable]=\"country\" (itemSelected)=\"detailsComp.onSelected()\"\r\n      (itemDeselected)=\"detailsComp.onDeselected()\">\r\n    </rt-demo-country-details>\r\n  </div>\r\n</div>"

/***/ },

/***/ "./src/app/+selection/selection-events/selection-events.component.ts":
/***/ function(module, exports, __webpack_require__) {

"use strict";
"use strict";
var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var countries_service_1 = __webpack_require__("./src/app/+selection/countries.service.ts");
var SelectionEventsComponent = (function () {
    function SelectionEventsComponent(countriesService) {
        var _this = this;
        this.countriesService = countriesService;
        this.countries = new Array();
        this.countriesService.getSomeCountries()
            .subscribe(function (countries) { return _this.countries = countries; });
    }
    SelectionEventsComponent.prototype.onItemSelected = function (evt) {
        alertify.log(evt.item.name + " - selection handled by area");
    };
    SelectionEventsComponent.prototype.onItemDeselected = function (evt) {
        alertify.log(evt.item.name + " - deselection handled by area");
    };
    SelectionEventsComponent = __decorate([
        core_1.Component({
            selector: 'rt-demo-selection-events',
            template: __webpack_require__("./src/app/+selection/selection-events/selection-events.component.html")
        }), 
        __metadata('design:paramtypes', [(typeof (_a = typeof countries_service_1.CountriesService !== 'undefined' && countries_service_1.CountriesService) === 'function' && _a) || Object])
    ], SelectionEventsComponent);
    return SelectionEventsComponent;
    var _a;
}());
exports.SelectionEventsComponent = SelectionEventsComponent;


/***/ },

/***/ "./src/app/+selection/selection.component.css":
/***/ function(module, exports) {

module.exports = ":host /deep/ div[rtSelectionArea] div[rtSelectionArea]{padding:0 15px}:host /deep/ form{margin:15px}:host /deep/ .row{margin-right:-5px;margin-left:-5px}:host /deep/ [class*=col-]{padding-right:1px;padding-left:1px}:host /deep/ .item{background-color:rebeccapurple;padding:25px;color:#fff;text-align:center;cursor:pointer;margin:1px 0}:host /deep/ .item.selected{background-color:#039be5 !important}\n"

/***/ },

/***/ "./src/app/+selection/selection.component.html":
/***/ function(module, exports) {

module.exports = "<h2>Selection</h2>\r\n<section>\r\n\t<h3>Table of contents</h3>\r\n\t<ul class=\"agenda\">\r\n\t\t<li><a href=\"selection#common-idea\">Общая идея</a></li>\r\n\t\t<li><a href=\"selection#bootstrap\">Как подключить</a></li>\r\n\t\t<li><a href=\"selection#basic-use\">Простейший пример</a></li>\r\n\t\t<li><a href=\"selection#additional-options\">Дополнительные опции</a></li>\r\n\t\t<li><a href=\"selection#handle-selection\">Взаимодействие с selection</a>\r\n\t\t\t<ul>\r\n\t\t\t\t<li><a href=\"selection#handle-selection-selected\">Флаг \"selected\"</a></li>\r\n\t\t\t\t<li><a href=\"selection#handle-selection-events\">События</a></li>\r\n\t\t\t\t<li><a href=\"selection#selection-service\">Работа с <code>RtSelectionService</code></a></li>\r\n\t\t\t\t<li><a href=\"selection#additional-methods\">Работа с <code>rtSelectionArea</code> в шаблоне</a></li>\r\n\t\t\t</ul>\r\n\t\t</li>\r\n\t\t<li><a href=\"selection#additional-directives-checkboxes\">Директива <code>rtSelectionCheckboxFor</code></a></li>\r\n\t\t<li><a href=\"selection#additional-settings-trackBy\"><code>trackBy</code> function</a></li>\r\n\t\t<li><a href=\"selection#prevent-stop-events\">Параметры <code>preventEventsDefaults</code> и <code>stopEventsPropagation</code></a></li>\r\n\t</ul>\r\n</section>\r\n<section id=\"common-idea\">\r\n\t<h3>Общая идея</h3>\r\n\t<p>\r\n\t\tФункционал selection позволяет реализовать на UI выбор элементов из произвольного набора данных. Также, при помощи selection\r\n\t\tможно легко реализовать такие сценарии как accordion, группированные списки, отображение master-details, inline edit и\r\n\t\tт.д.\r\n\t</p>\r\n</section>\r\n<section id=\"bootstrap\">\r\n\t<h3>Как подключить</h3>\r\n\t<p>Чтобы подключить функционал selection, импортируйте модуль <code>RtSelectionModule</code> из библиотеки <code>right-angled</code>.\r\n\t\tТакже можно импортировать модуль <code>RtModule</code>, включающий в себя функционал всей библиотеки <code>right-angled</code>\t\tцеликом.\r\n\t</p>\r\n\t<rt-demo-tab-section>\r\n\t\t<rt-demo-code-tab url=\"%2Bselection/bootstrap/app.module.tsfake\">\r\n\t\t</rt-demo-code-tab>\r\n\t</rt-demo-tab-section>\r\n</section>\r\n<section id=\"basic-use\">\r\n\r\n\t<h3>Простейший пример</h3>\r\n\t<p>\r\n\t\tОбщая идея заключается в пометке HTML элемента, представляющего собой область выбора, директивой <code>rtSelectionArea</code>.\r\n\t\tЭлементы внутри данной области, помеченные директивой <code>rtSelectable</code>, становятся элементами выбора. В коде компонента,\r\n\t\tкак правило, никаких специфичных действий не требуется, все делается в шаблоне. Для работы с selection доступны следующие\r\n\t\tкоманды:\r\n\t</p>\r\n\t<ul class=\"bulleted\">\r\n\t\t<li>Клик мышью выбирает кликнутый элемент сбрасывая предыдущий выбор.</li>\r\n\t\t<li>Клик мышью с зажатой клавишей <code>Ctrl</code> выбирает кликнутый элемент, сохраняя предыдущий выбор.</li>\r\n\t\t<li>Клик мышью с зажатой клавишей <code>Shift</code> выбирает последовательность элементов от последнего выбранного до кликнутого.\r\n\t\t</li>\r\n\t\t<li>Нажатие клавиши <code>&uarr;</code> выбирает предыдущий элемент.</li>\r\n\t\t<li>Нажатие клавиши <code>&darr;</code> выбирает следующий элемент.</li>\r\n\t\t<li>Нажатие клавиш <code>Ctrl + &uarr;</code> выбирает первый элемент в списке.</li>\r\n\t\t<li>Нажатие клавиш <code>Ctrl + &darr;</code> выбирает последний элемент в списке.</li>\r\n\t\t<li>Нажатие клавиш <code>Ctrl + A</code> выбирает все элементы списка.</li>\r\n\t\t<li>Нажатие клавиши <code>Tab</code> и <code>Shift + Tab</code> перемещает вас по списку на элемент вверх или вниз.\r\n\t\t</li>\r\n\t</ul>\r\n\t<rt-demo-tab-section>\r\n\t\t<rt-demo-sample-tab>\r\n\t\t\t<rt-demo-basic-usage></rt-demo-basic-usage>\r\n\t\t</rt-demo-sample-tab>\r\n\t\t<rt-demo-code-tab url=\"%2Bselection/basic-usage/basic-usage.component.html\">\r\n\t\t</rt-demo-code-tab>\r\n\t\t<rt-demo-code-tab url=\"%2Bselection/basic-usage/basic-usage.component.ts\">\r\n\t\t</rt-demo-code-tab>\r\n\t</rt-demo-tab-section>\r\n</section>\r\n<section id=\"additional-options\">\r\n\t<h3>Дополнительные опции</h3>\r\n\t<p>\r\n\t\tДиректива <code>rtSelectionArea</code> содержит множество рубильников, включая и выключая которые мы можем тонко настраивать\r\n\t\tработу selection. Ниже приведен их список и пример, демонстрирующий их работу. Значения по умолчанию в примере аналогичны\r\n\t\tзначениям по умолчанию в директиве <code>rtSelectionArea</code>.\r\n\t</p>\r\n\t<ul class=\"bulleted\">\r\n\t\t<li><code>horizontal</code> - если <code>true</code>, обработчики selection начинают реагировать на стрелки на стрелки \"влево-вправо\",\r\n\t\t\tвместо стрелок \"вверх-вниз\".</li>\r\n\t\t<li><code>toggleOnly</code> - если включить данную опцию, то снять selection с элемента можно только повторно кликнув по нему.\r\n\t\t\tИмеет смысл только при включенной настройке <code>multiple</code>.</li>\r\n\t\t<li><code>multiple</code> - если <code>true</code>, то можно выбрать несколько элементов одновременно.</li>\r\n\t\t<li><code>autoSelectFirst</code> - если <code>true</code>, то при каждой перезагрузке данных, если ничего не выбрано, первый\r\n\t\t\tэлемент будет выбираться автоматически.\r\n\t\t</li>\r\n\t</ul>\r\n\r\n\t<rt-demo-tab-section>\r\n\t\t<rt-demo-sample-tab>\r\n\t\t\t<rt-demo-options></rt-demo-options>\r\n\t\t</rt-demo-sample-tab>\r\n\t\t<rt-demo-code-tab url=\"%2Bselection/options/options.component.html\">\r\n\t\t</rt-demo-code-tab>\r\n\t\t<rt-demo-code-tab url=\"%2Bselection/options/options.component.ts\">\r\n\t\t</rt-demo-code-tab>\r\n\t</rt-demo-tab-section>\r\n</section>\r\n<section id=\"handle-selection\">\r\n\t<h3>Взаимодействие с selection</h3>\r\n\t<p>\r\n\t\tДля того, чтобы selection имел смысл, нужен способ выполнять определенные действия в зависимости от того, выбран или нет\r\n\t\tопределенный элемент. Для выполнения таких действий есть следующие опции:\r\n\t</p>\r\n\t<section id=\"handle-selection-selected\">\r\n\t\t<h4>Флаг \"selected\"</h4>\r\n\t\t<p>\r\n\t\t\tДиректива <code>rtSelectable</code> содержит флаг <code>selected</code>, ссылаясь на который можно реагировать на изменения\r\n\t\t\tсостояния элемента. Пример такого подхода вы уже увидели в демо выше, где на основе значения этого флага выставляется\r\n\t\t\tкласс\r\n\t\t\t<code>selected</code>, подсвечивающий выбранные элементы. Ниже показан чуть более интересный пример - реализация inline-редактирования\r\n\t\t\tна основе флага selected.\r\n\t\t</p>\r\n\t\t<rt-demo-tab-section>\r\n\t\t\t<rt-demo-sample-tab>\r\n\t\t\t\t<rt-demo-selected-flag></rt-demo-selected-flag>\r\n\t\t\t</rt-demo-sample-tab>\r\n\t\t\t<rt-demo-code-tab url=\"%2Bselection/selected-flag/selected-flag.component.html\">\r\n\t\t\t</rt-demo-code-tab>\r\n\t\t\t<rt-demo-code-tab url=\"%2Bselection/selected-flag/selected-flag.component.ts\">\r\n\t\t\t</rt-demo-code-tab>\r\n\t\t</rt-demo-tab-section>\r\n\r\n\t\t<aside>\r\n\t\t\t<p>\r\n\t\t\t\tВ данном примере мы используем <a href=\"#\" [routerLink]=\"['/misc-directives']\">вспомогательные директивы</a>\r\n\t\t\t\t<code>rtFocusOnRender</code> и\r\n\t\t\t\t<code>rtStopEvents</code> для автоматической установки фокуса в элементе <code>input</code> и чтобы предотвратить bubbling\r\n\t\t\t\tсобытия\r\n\t\t\t\t<code>mouseup</code>, который будет приводить к deselect-у строки.\r\n\t\t\t</p>\r\n\t\t</aside>\r\n\r\n\t\t<p>\r\n\t\t\tВы так же можете объявить свойство <code>selected</code> непосредственно в вашем элементе данных. В таком случае, selection\r\n\t\t\tбудет обновлять значение в зависимости от текущего состояния selection.\r\n\t\t</p>\r\n\t\t<rt-demo-tab-section>\r\n\t\t\t<rt-demo-sample-tab>\r\n\t\t\t\t<rt-demo-selected-flag-data></rt-demo-selected-flag-data>\r\n\t\t\t</rt-demo-sample-tab>\r\n\t\t\t<rt-demo-code-tab url=\"%2Bselection/selected-flag-data/selected-flag-data.component.html\">\r\n\t\t\t</rt-demo-code-tab>\r\n\t\t\t<rt-demo-code-tab url=\"%2Bselection/selected-flag-data/selected-flag-data.component.ts\">\r\n\t\t\t</rt-demo-code-tab>\r\n\t\t</rt-demo-tab-section>\r\n\r\n\t</section>\r\n\t<section id=\"handle-selection-events\">\r\n\t\t<h4>События</h4>\r\n\t\t<p>\r\n\t\t\tВторым способом обработки selection являются события. По сути это и есть основной способ, первый же используется преимущественно\r\n\t\t\tкак shorthand для отображения состояния selection на UI.\r\n\t\t</p>\r\n\t\t<p>\r\n\t\t\tУ нас есть три события, на которые мы можем подписаться: <code>itemSelected</code>, <code>itemDeselected</code> и <code>selectionChanged</code>.\r\n\t\t\tОбработчики которых получают параметр, реализующий контракт <code>RtSelectionEvent</code> из библиотеки <code>right-angled</code>.\r\n\t\t</p>\r\n\t\t<p>\r\n\t\t\tСобытия генерируются как директивами элементов выбора (<code>rtSelectable</code>, <code>rtSelectionCheckboxFor</code>),\r\n\t\t\tтак и всей <code>rtSelectionArea</code>.\r\n\t\t</p>\r\n\t\t<p>\r\n\t\t\tНиже вы можете увидеть пример, в котором обработчики <code>itemSelected</code> и <code>itemDeselected</code> уровня\r\n\t\t\t<code>rtSelectionArea</code> выводят на UI уведомления о том, что элемент был выбран. Обработчик уровня элемента, в свою\r\n\t\t\tочередь обращается к сервису <a target=\"_blank\" href=\"https://restcountries.eu\">restcountries.eu</a> и отображает полученную\r\n\t\t\tиз него информацию о стране.\r\n\t\t</p>\r\n\t\t<rt-demo-tab-section>\r\n\t\t\t<rt-demo-sample-tab>\r\n\t\t\t\t<rt-demo-selection-events></rt-demo-selection-events>\r\n\t\t\t</rt-demo-sample-tab>\r\n\t\t\t<rt-demo-code-tab url=\"%2Bselection/selection-events/selection-events.component.html\">\r\n\t\t\t</rt-demo-code-tab>\r\n\t\t\t<rt-demo-code-tab url=\"%2Bselection/selection-events/selection-events.component.ts\">\r\n\t\t\t</rt-demo-code-tab>\r\n\t\t\t<rt-demo-code-tab [fromLib]=\"true\" url=\"core/selection/selection-event.ts\">\r\n\t\t\t</rt-demo-code-tab>\r\n\t\t</rt-demo-tab-section>\r\n\t</section>\r\n\r\n\t<section id=\"selection-service\">\r\n\t\t<h4>Работа с <code>RtSelectionService</code></h4>\r\n\t\t<p>\r\n\t\t\tДанный подход наиболее гибок, поскольку дает доступ ко множеству методов работы с selection. Полный контракт работы с selection\r\n\t\t\tвы можете посмотреть <a target=\"_blank\" href=\"http://fshchudlo.github.io/e2e4/interfaces/selectionservice.html\">здесь</a>.\r\n\t\t</p>\r\n\t\t<p>\r\n\t\t\tСервис <code>RtSelectionService</code> указан в коллекции <a target=\"_blank\" href=\"https://angular.io/docs/ts/latest/api/core/index/Component-decorator.html\">providers</a>\t\t\tдля <code>rtSelectionArea</code>. Поэтому, способ доступа к <code>SelectionService</code> в вашем компоненте зависит от\r\n\t\t\tтого, где в иерархии компонентов ваш компонент располагается. Если он расположен внутри компонента\r\n\t\t\t<code>rtSelectionArea</code>, то вам достаточно указать данный сервис в качестве параметра конструктора вашего компонента.\r\n\t\t</p>\r\n\t\t<p>\r\n\t\t\tВ примере ниже мы реализуем кастомную кнопку, в которую инжектим сервис <code>RtSelectionService</code> и при клике на\r\n\t\t\tкнопку вызываем метод <code>getSelectedElements</code>, чтобы получить набор выбранных элементов и показать во всплывающем\r\n\t\t\tокне.\r\n\t\t</p>\r\n\t\t<rt-demo-tab-section>\r\n\t\t\t<rt-demo-sample-tab>\r\n\t\t\t\t<rt-demo-service-injection></rt-demo-service-injection>\r\n\t\t\t</rt-demo-sample-tab>\r\n\t\t\t<rt-demo-code-tab url=\"%2Bselection/service-injection/service-injection.component.html\">\r\n\t\t\t</rt-demo-code-tab>\r\n\t\t\t<rt-demo-code-tab url=\"%2Bselection/service-injection/service-injection.component.ts\">\r\n\t\t\t</rt-demo-code-tab>\r\n\t\t\t<rt-demo-code-tab url=\"%2Bselection/service-injection/nested-button.component.ts\">\r\n\t\t\t</rt-demo-code-tab>\r\n\t\t</rt-demo-tab-section>\r\n\r\n\t\t<p>\r\n\t\t\tЕсли компонент, которому необходимо получить доступ к <code>RtSelectionService</code>, является родителем для <code>rtSelectionArea</code>,\r\n\t\t\tто вы можете получить ссылку на <code>rtSelectionArea</code> используя декоратор <a target=\"_blank\" href=\"https://angular.io/docs/ts/latest/api/core/index/ViewChild-decorator.html\">ViewChild</a>\t\t\tи использовать его public свойство selectionService для работы с selection.\r\n\t\t</p>\r\n\t\t<p>\r\n\t\t\tПример ниже аналогичен предыдущему, но вместо кастомной нопки мы реализуем обработчик события прямо в компоненте и используем\r\n\t\t\t<code>rtSelectionArea</code> запрошенный при помощи декоратора <a target=\"_blank\" href=\"https://angular.io/docs/ts/latest/api/core/index/ViewChild-decorator.html\">ViewChild</a>.\r\n\t\t</p>\r\n\t\t<rt-demo-tab-section>\r\n\t\t\t<rt-demo-sample-tab>\r\n\t\t\t\t<rt-demo-service-view-child></rt-demo-service-view-child>\r\n\t\t\t</rt-demo-sample-tab>\r\n\t\t\t<rt-demo-code-tab url=\"%2Bselection/service-view-child/service-view-child.component.html\">\r\n\t\t\t</rt-demo-code-tab>\r\n\t\t\t<rt-demo-code-tab url=\"%2Bselection/service-view-child/service-view-child.component.ts\">\r\n\t\t\t</rt-demo-code-tab>\r\n\t\t</rt-demo-tab-section>\r\n\r\n\t</section>\r\n\t<section id=\"additional-methods\">\r\n\t\t<h4>\r\n\t\t\tРабота с <code>rtSelectionArea</code> прямо в шаблоне\r\n\t\t</h4>\r\n\t\t<p>\r\n\t\t\tВы можете создать в шаблоне переменную, ссылающуюся на <code>rtSelectionArea</code> и обращаться к нему из обработчиков\r\n\t\t\tсобытия.\r\n\t\t</p>\r\n\t\t<p>\r\n\t\t\tНиже вы можете увидеть пример кнопок, использующих методы <code>selectionService.selectAll</code> и <code>selectionService.deselectAll</code>.\r\n\t\t</p>\r\n\t\t<aside>\r\n\t\t\t<p>\r\n\t\t\t\tМетоды <code>selectionService.selectAll</code> и <code>selectionService.deselectAll</code> перегружены в библиотеке <code>right-angled</code>\t\t\t\tи позволяют выполнять рекурсивный selection. В остальном контракт совпадает с <a target=\"_blank\" href=\"https://fshchudlo.github.io/e2e4/interfaces/selectionservice.html\">SelectionService</a>\t\t\t\tбиблиотеки <a target=\"_blank\" href=\"https://fshchudlo.github.io/e2e4\">e2e4</a>.\r\n\t\t\t</p>\r\n\t\t</aside>\r\n\t\t<rt-demo-tab-section>\r\n\t\t\t<rt-demo-sample-tab>\r\n\t\t\t\t<rt-demo-select-all></rt-demo-select-all>\r\n\t\t\t</rt-demo-sample-tab>\r\n\t\t\t<rt-demo-code-tab url=\"%2Bselection/select-all/select-all.component.html\">\r\n\t\t\t</rt-demo-code-tab>\r\n\t\t\t<rt-demo-code-tab url=\"%2Bselection/select-all/select-all.component.ts\">\r\n\t\t\t</rt-demo-code-tab>\r\n\r\n\t\t</rt-demo-tab-section>\r\n\r\n\t</section>\r\n</section>\r\n\r\n<section id=\"additional-directives-checkboxes\">\r\n\t<h3>Директива <code>rtSelectionCheckboxFor</code></h3>\r\n\t<p>\r\n\t\tДанная директива будет полезна в том случае, если вам нужно реализовать модель выбора при помощи checkbox-ов вместо клика\r\n\t\tпо элементам.\r\n\t</p>\r\n\t<rt-demo-tab-section>\r\n\t\t<rt-demo-sample-tab>\r\n\t\t\t<rt-demo-selection-checkbox></rt-demo-selection-checkbox>\r\n\t\t</rt-demo-sample-tab>\r\n\t\t<rt-demo-code-tab url=\"%2Bselection/selection-checkbox/selection-checkbox.component.html\">\r\n\t\t</rt-demo-code-tab>\r\n\t\t<rt-demo-code-tab url=\"%2Bselection/selection-checkbox/selection-checkbox.component.ts\">\r\n\t\t</rt-demo-code-tab>\r\n\t</rt-demo-tab-section>\r\n</section>\r\n<section id=\"additional-settings-trackBy\">\r\n\t<h3><code>trackBy</code> function</h3>\r\n\t<p>\r\n\t\tВдохновением для данной опции послужила одноименная опция у <code>angular</code> директивы <a targe=\"_blank\" href=\"https://angular.io/docs/ts/latest/guide/template-syntax.html#!#ngFor\">ngFor</a>.\r\n\t</p>\r\n\t<p>\r\n\t\tСуть заключается в том, что при обновлении данных выполняется повторная проверка selection. Например, при обновлении списка,\r\n\t\tв большинстве случаев с сервера будут возвращены те же самые данные.\r\n\r\n\t</p>\r\n\t<p>\r\n\t\tНо, поскольку объекты будут сконструированы новые, то проверка при помощи reference equals, которая выполняется по умолчанию,\r\n\t\tне сможет восстановить selection.\r\n\t</p>\r\n\t<p>\r\n\t\tЕсли у вас имеется способ идентифицировать ваши объекты (например, уникальное свойство id), то вы можете указать свою реализацию\r\n\t\tфункции <code>trackBy</code>, которая будет использоваться для восстановления selection.\r\n\t</p>\r\n\t<p>\r\n\t\tВ примере ниже мы используем реализацию <code>trackBy</code>, которая возвращает название региона. Таким образом, пре перезагрузке\r\n\t\tданных selection сохраняется.\r\n\t</p>\r\n\t<rt-demo-tab-section>\r\n\t\t<rt-demo-sample-tab>\r\n\t\t\t<rt-demo-custom-track-by></rt-demo-custom-track-by>\r\n\t\t</rt-demo-sample-tab>\r\n\t\t<rt-demo-code-tab url=\"%2Bselection/custom-track-by/custom-track-by.component.html\">\r\n\t\t</rt-demo-code-tab>\r\n\t\t<rt-demo-code-tab url=\"%2Bselection/custom-track-by/custom-track-by.component.ts\">\r\n\t\t</rt-demo-code-tab>\r\n\t</rt-demo-tab-section>\r\n</section>\r\n<section id=\"prevent-stop-events\">\r\n\t<h3>preventEventsDefaults и stopEventsPropagation</h3>\r\n\t<p>\r\n\t\tЕще два рубильника, которые вам вряд ли понадобятся, но, если уж понадобятся, то очень.\r\n\t</p>\r\n\t<p>\r\n\t\tСмысл заключается в том, что selection при успешной обработке события мыши или клавиатуры, вызывает методы <a target=\"_blank\"\r\n\t\t\thref=\"https://developer.mozilla.org/ru/docs/Web/API/Event/stopPropagation\">stopPropagation</a> и <a target=\"_blank\" href=\"https://developer.mozilla.org/ru/docs/Web/API/Event/preventDefault\">preventDefault</a>.\r\n\t\tЭто нужно, к примеру, чтобы при нажатии <code>Ctrl + A</code> не выбирался весь текст на странице. При нажатии на <code>&uarr;</code>\t\tи <code>&rarr;</code> не прокручивалась вся страница и т.д.\r\n\t</p>\r\n\t<p>\r\n\t\tНо если такое поведение стало для вас проблемой, вы можете отключить его.\r\n\t</p>\r\n</section>"

/***/ },

/***/ "./src/app/+selection/selection.component.ts":
/***/ function(module, exports, __webpack_require__) {

"use strict";
"use strict";
var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var SelectionComponent = (function () {
    function SelectionComponent() {
    }
    SelectionComponent = __decorate([
        core_1.Component({
            styles: [__webpack_require__("./src/app/+selection/selection.component.css")],
            template: __webpack_require__("./src/app/+selection/selection.component.html")
        }), 
        __metadata('design:paramtypes', [])
    ], SelectionComponent);
    return SelectionComponent;
}());
exports.SelectionComponent = SelectionComponent;


/***/ },

/***/ "./src/app/+selection/selection.module.ts":
/***/ function(module, exports, __webpack_require__) {

"use strict";
"use strict";
var common_1 = __webpack_require__("./node_modules/@angular/common/index.js");
var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var router_1 = __webpack_require__("./node_modules/@angular/router/index.js");
var shared_module_1 = __webpack_require__("./src/app/shared/shared.module.ts");
var basic_usage_component_1 = __webpack_require__("./src/app/+selection/basic-usage/basic-usage.component.ts");
var custom_track_by_component_1 = __webpack_require__("./src/app/+selection/custom-track-by/custom-track-by.component.ts");
var options_component_1 = __webpack_require__("./src/app/+selection/options/options.component.ts");
var select_all_component_1 = __webpack_require__("./src/app/+selection/select-all/select-all.component.ts");
var selected_flag_data_component_1 = __webpack_require__("./src/app/+selection/selected-flag-data/selected-flag-data.component.ts");
var selected_flag_component_1 = __webpack_require__("./src/app/+selection/selected-flag/selected-flag.component.ts");
var selection_checkbox_component_1 = __webpack_require__("./src/app/+selection/selection-checkbox/selection-checkbox.component.ts");
var country_details_component_1 = __webpack_require__("./src/app/+selection/selection-events/country-details/country-details.component.ts");
var selection_events_component_1 = __webpack_require__("./src/app/+selection/selection-events/selection-events.component.ts");
var selection_component_1 = __webpack_require__("./src/app/+selection/selection.component.ts");
var selection_routes_1 = __webpack_require__("./src/app/+selection/selection.routes.ts");
var nested_button_component_1 = __webpack_require__("./src/app/+selection/service-injection/nested-button.component.ts");
var service_injection_component_1 = __webpack_require__("./src/app/+selection/service-injection/service-injection.component.ts");
var service_view_child_component_1 = __webpack_require__("./src/app/+selection/service-view-child/service-view-child.component.ts");
var countries_service_1 = __webpack_require__("./src/app/+selection/countries.service.ts");
var SelectionModule = (function () {
    function SelectionModule() {
    }
    SelectionModule = __decorate([
        core_1.NgModule({
            declarations: [
                basic_usage_component_1.BasicUsageComponent,
                custom_track_by_component_1.CustomTrackByComponent,
                country_details_component_1.CountryDetailsComponent,
                options_component_1.OptionsComponent,
                select_all_component_1.SelectAllComponent,
                selected_flag_component_1.SelectedFlagComponent,
                selected_flag_data_component_1.SelectedFlagDataComponent,
                selection_checkbox_component_1.SelectionCheckboxComponent,
                selection_events_component_1.SelectionEventsComponent,
                selection_component_1.SelectionComponent,
                service_view_child_component_1.ServiceViewChildComponent,
                service_injection_component_1.ServiceInjectionComponent,
                nested_button_component_1.NestedButtonComponent],
            exports: [basic_usage_component_1.BasicUsageComponent,
                custom_track_by_component_1.CustomTrackByComponent,
                country_details_component_1.CountryDetailsComponent,
                options_component_1.OptionsComponent,
                select_all_component_1.SelectAllComponent,
                selected_flag_component_1.SelectedFlagComponent,
                selected_flag_data_component_1.SelectedFlagDataComponent,
                selection_checkbox_component_1.SelectionCheckboxComponent,
                selection_events_component_1.SelectionEventsComponent,
                selection_component_1.SelectionComponent,
                service_view_child_component_1.ServiceViewChildComponent,
                service_injection_component_1.ServiceInjectionComponent,
                nested_button_component_1.NestedButtonComponent],
            imports: [common_1.CommonModule, router_1.RouterModule.forChild(selection_routes_1.SelectionRoutes), shared_module_1.SharedModule],
            providers: [countries_service_1.CountriesService]
        }), 
        __metadata('design:paramtypes', [])
    ], SelectionModule);
    return SelectionModule;
}());
exports.SelectionModule = SelectionModule;


/***/ },

/***/ "./src/app/+selection/selection.routes.ts":
/***/ function(module, exports, __webpack_require__) {

"use strict";
"use strict";
var selection_component_1 = __webpack_require__("./src/app/+selection/selection.component.ts");
exports.SelectionRoutes = [
    {
        component: selection_component_1.SelectionComponent,
        path: ''
    }
];


/***/ },

/***/ "./src/app/+selection/service-injection/nested-button.component.ts":
/***/ function(module, exports, __webpack_require__) {

"use strict";
"use strict";
var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var right_angled_1 = __webpack_require__("./node_modules/right-angled/index.js");
var NestedButtonComponent = (function () {
    function NestedButtonComponent(selectionService) {
        this.selectionService = selectionService;
    }
    NestedButtonComponent.prototype.displaySelectedItems = function () {
        alertify.alert(this.selectionService.getSelectedElements().map(function (c) { return c.name; }).join(';'));
    };
    NestedButtonComponent = __decorate([
        core_1.Component({
            selector: 'rt-demo-nested-button',
            template: "<button class=\"btn btn-primary\" title=\"Get selected items\" (click)=\"displaySelectedItems()\">Get selected items</button>"
        }), 
        __metadata('design:paramtypes', [(typeof (_a = typeof right_angled_1.RtSelectionService !== 'undefined' && right_angled_1.RtSelectionService) === 'function' && _a) || Object])
    ], NestedButtonComponent);
    return NestedButtonComponent;
    var _a;
}());
exports.NestedButtonComponent = NestedButtonComponent;


/***/ },

/***/ "./src/app/+selection/service-injection/service-injection.component.html":
/***/ function(module, exports) {

module.exports = "<div class=\"row\" rtSelectionArea>\r\n  <div class=\"col-md-12 toolbar\">\r\n    <rt-demo-nested-button></rt-demo-nested-button>\r\n  </div>\r\n  <div class=\"col-md-12\" *ngFor=\"let country of countries\" [rtSelectable]=\"country\" #rts=\"rtSelectable\">\r\n    <div class=\"item\" [class.selected]=\"rts.selected\">\r\n      {{country.name}}\r\n    </div>\r\n  </div>\r\n</div>"

/***/ },

/***/ "./src/app/+selection/service-injection/service-injection.component.ts":
/***/ function(module, exports, __webpack_require__) {

"use strict";
"use strict";
var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var countries_service_1 = __webpack_require__("./src/app/+selection/countries.service.ts");
var ServiceInjectionComponent = (function () {
    function ServiceInjectionComponent(countriesService) {
        var _this = this;
        this.countriesService = countriesService;
        this.countries = new Array();
        this.countriesService.getSomeCountries()
            .subscribe(function (countries) { return _this.countries = countries; });
    }
    ServiceInjectionComponent = __decorate([
        core_1.Component({
            selector: 'rt-demo-service-injection',
            template: __webpack_require__("./src/app/+selection/service-injection/service-injection.component.html")
        }), 
        __metadata('design:paramtypes', [(typeof (_a = typeof countries_service_1.CountriesService !== 'undefined' && countries_service_1.CountriesService) === 'function' && _a) || Object])
    ], ServiceInjectionComponent);
    return ServiceInjectionComponent;
    var _a;
}());
exports.ServiceInjectionComponent = ServiceInjectionComponent;


/***/ },

/***/ "./src/app/+selection/service-view-child/service-view-child.component.html":
/***/ function(module, exports) {

module.exports = "<div class=\"row\" rtSelectionArea>\r\n  <div class=\"col-md-12 toolbar\">\r\n    <button class=\"btn btn-primary\" title=\"Get selected items\" (click)=\"displaySelectedItems()\">Get selected items</button>\r\n  </div>\r\n  <div class=\"col-md-12\" *ngFor=\"let country of countries\" [rtSelectable]=\"country\" #rts=\"rtSelectable\">\r\n    <div class=\"item\" [class.selected]=\"rts.selected\" >\r\n      {{country.name}}\r\n    </div>\r\n  </div>\r\n</div>"

/***/ },

/***/ "./src/app/+selection/service-view-child/service-view-child.component.ts":
/***/ function(module, exports, __webpack_require__) {

"use strict";
"use strict";
var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var right_angled_1 = __webpack_require__("./node_modules/right-angled/index.js");
var countries_service_1 = __webpack_require__("./src/app/+selection/countries.service.ts");
var ServiceViewChildComponent = (function () {
    function ServiceViewChildComponent(countriesService) {
        var _this = this;
        this.countriesService = countriesService;
        this.countries = new Array();
        this.countriesService.getSomeCountries()
            .subscribe(function (countries) { return _this.countries = countries; });
    }
    ServiceViewChildComponent.prototype.displaySelectedItems = function () {
        alertify.alert(this.selectionArea.selectionService.getSelectedElements().map(function (c) { return c.name; }).join(';'));
    };
    __decorate([
        core_1.ViewChild(right_angled_1.SelectionAreaDirective), 
        __metadata('design:type', (typeof (_a = typeof right_angled_1.SelectionAreaDirective !== 'undefined' && right_angled_1.SelectionAreaDirective) === 'function' && _a) || Object)
    ], ServiceViewChildComponent.prototype, "selectionArea", void 0);
    ServiceViewChildComponent = __decorate([
        core_1.Component({
            selector: 'rt-demo-service-view-child',
            template: __webpack_require__("./src/app/+selection/service-view-child/service-view-child.component.html")
        }), 
        __metadata('design:paramtypes', [(typeof (_b = typeof countries_service_1.CountriesService !== 'undefined' && countries_service_1.CountriesService) === 'function' && _b) || Object])
    ], ServiceViewChildComponent);
    return ServiceViewChildComponent;
    var _a, _b;
}());
exports.ServiceViewChildComponent = ServiceViewChildComponent;


/***/ },

/***/ "./src/compiled/node_modules/@angular/forms/src/directives/checkbox_value_accessor.ngfactory.ts":
/***/ function(module, exports, __webpack_require__) {

"use strict";
/**
 * This file is generated by the Angular 2 template compiler.
 * Do not edit.
 */
/* tslint:disable */
"use strict";
var import0 = __webpack_require__("./node_modules/@angular/forms/src/directives/checkbox_value_accessor.js");
var Wrapper_CheckboxControlValueAccessor = (function () {
    function Wrapper_CheckboxControlValueAccessor(p0, p1) {
        this._changed = false;
        this.context = new import0.CheckboxControlValueAccessor(p0, p1);
    }
    Wrapper_CheckboxControlValueAccessor.prototype.ngOnDetach = function (view, componentView, el) {
    };
    Wrapper_CheckboxControlValueAccessor.prototype.ngOnDestroy = function () {
    };
    Wrapper_CheckboxControlValueAccessor.prototype.ngDoCheck = function (view, el, throwOnChange) {
        var changed = this._changed;
        this._changed = false;
        return changed;
    };
    Wrapper_CheckboxControlValueAccessor.prototype.checkHost = function (view, componentView, el, throwOnChange) {
    };
    Wrapper_CheckboxControlValueAccessor.prototype.handleEvent = function (eventName, $event) {
        var result = true;
        if ((eventName == 'change')) {
            var pd_sub_0 = (this.context.onChange($event.target.checked) !== false);
            result = (pd_sub_0 && result);
        }
        if ((eventName == 'blur')) {
            var pd_sub_1 = (this.context.onTouched() !== false);
            result = (pd_sub_1 && result);
        }
        return result;
    };
    Wrapper_CheckboxControlValueAccessor.prototype.subscribe = function (view, _eventHandler) {
        this._eventHandler = _eventHandler;
    };
    return Wrapper_CheckboxControlValueAccessor;
}());
exports.Wrapper_CheckboxControlValueAccessor = Wrapper_CheckboxControlValueAccessor;


/***/ },

/***/ "./src/compiled/node_modules/right-angled/src/misc-directives/focus-on-render.directive.ngfactory.ts":
/***/ function(module, exports, __webpack_require__) {

"use strict";
/**
 * This file is generated by the Angular 2 template compiler.
 * Do not edit.
 */
/* tslint:disable */
"use strict";
var import0 = __webpack_require__("./node_modules/right-angled/src/misc-directives/focus-on-render.directive.js");
var Wrapper_FocusOnRenderDirective = (function () {
    function Wrapper_FocusOnRenderDirective(p0, p1) {
        this._changed = false;
        this.context = new import0.FocusOnRenderDirective(p0, p1);
    }
    Wrapper_FocusOnRenderDirective.prototype.ngOnDetach = function (view, componentView, el) {
    };
    Wrapper_FocusOnRenderDirective.prototype.ngOnDestroy = function () {
    };
    Wrapper_FocusOnRenderDirective.prototype.ngDoCheck = function (view, el, throwOnChange) {
        var changed = this._changed;
        this._changed = false;
        return changed;
    };
    Wrapper_FocusOnRenderDirective.prototype.checkHost = function (view, componentView, el, throwOnChange) {
    };
    Wrapper_FocusOnRenderDirective.prototype.handleEvent = function (eventName, $event) {
        var result = true;
        return result;
    };
    Wrapper_FocusOnRenderDirective.prototype.subscribe = function (view, _eventHandler) {
        this._eventHandler = _eventHandler;
    };
    return Wrapper_FocusOnRenderDirective;
}());
exports.Wrapper_FocusOnRenderDirective = Wrapper_FocusOnRenderDirective;


/***/ },

/***/ "./src/compiled/node_modules/right-angled/src/misc-directives/stop-events.directive.ngfactory.ts":
/***/ function(module, exports, __webpack_require__) {

"use strict";
/**
 * This file is generated by the Angular 2 template compiler.
 * Do not edit.
 */
/* tslint:disable */
"use strict";
var import0 = __webpack_require__("./node_modules/right-angled/src/misc-directives/stop-events.directive.js");
var import1 = __webpack_require__("./node_modules/@angular/core/src/change_detection/change_detection.js");
var import3 = __webpack_require__("./node_modules/@angular/core/src/linker/view_utils.js");
var Wrapper_StopEventsDirective = (function () {
    function Wrapper_StopEventsDirective(p0) {
        this._changed = false;
        this._changes = {};
        this.context = new import0.StopEventsDirective(p0);
        this._expr_0 = import1.UNINITIALIZED;
    }
    Wrapper_StopEventsDirective.prototype.ngOnDetach = function (view, componentView, el) {
    };
    Wrapper_StopEventsDirective.prototype.ngOnDestroy = function () {
        this.context.ngOnDestroy();
    };
    Wrapper_StopEventsDirective.prototype.check_eventNames = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import3.checkBinding(throwOnChange, this._expr_0, currValue))) {
            this._changed = true;
            this.context.eventNames = currValue;
            this._changes['eventNames'] = new import1.SimpleChange(this._expr_0, currValue);
            this._expr_0 = currValue;
        }
    };
    Wrapper_StopEventsDirective.prototype.ngDoCheck = function (view, el, throwOnChange) {
        var changed = this._changed;
        this._changed = false;
        if (!throwOnChange) {
            if (changed) {
                this.context.ngOnChanges(this._changes);
                this._changes = {};
            }
        }
        return changed;
    };
    Wrapper_StopEventsDirective.prototype.checkHost = function (view, componentView, el, throwOnChange) {
    };
    Wrapper_StopEventsDirective.prototype.handleEvent = function (eventName, $event) {
        var result = true;
        return result;
    };
    Wrapper_StopEventsDirective.prototype.subscribe = function (view, _eventHandler) {
        this._eventHandler = _eventHandler;
    };
    return Wrapper_StopEventsDirective;
}());
exports.Wrapper_StopEventsDirective = Wrapper_StopEventsDirective;


/***/ },

/***/ "./src/compiled/node_modules/right-angled/src/selection-directives/selection-checkbox-for.directive.ngfactory.ts":
/***/ function(module, exports, __webpack_require__) {

"use strict";
/**
 * This file is generated by the Angular 2 template compiler.
 * Do not edit.
 */
/* tslint:disable */
"use strict";
var import0 = __webpack_require__("./node_modules/right-angled/src/selection-directives/selection-checkbox-for.directive.js");
var import1 = __webpack_require__("./node_modules/@angular/core/src/change_detection/change_detection.js");
var import3 = __webpack_require__("./node_modules/@angular/core/src/linker/view_utils.js");
var Wrapper_SelectionCheckboxForDirective = (function () {
    function Wrapper_SelectionCheckboxForDirective(p0) {
        this._changed = false;
        this.context = new import0.SelectionCheckboxForDirective(p0);
        this._expr_0 = import1.UNINITIALIZED;
        this._expr_1 = import1.UNINITIALIZED;
    }
    Wrapper_SelectionCheckboxForDirective.prototype.ngOnDetach = function (view, componentView, el) {
    };
    Wrapper_SelectionCheckboxForDirective.prototype.ngOnDestroy = function () {
        (this.subscription0 && this.subscription0.unsubscribe());
        (this.subscription1 && this.subscription1.unsubscribe());
        (this.subscription2 && this.subscription2.unsubscribe());
    };
    Wrapper_SelectionCheckboxForDirective.prototype.check_item = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import3.checkBinding(throwOnChange, this._expr_0, currValue))) {
            this._changed = true;
            this.context.item = currValue;
            this._expr_0 = currValue;
        }
    };
    Wrapper_SelectionCheckboxForDirective.prototype.ngDoCheck = function (view, el, throwOnChange) {
        var changed = this._changed;
        this._changed = false;
        return changed;
    };
    Wrapper_SelectionCheckboxForDirective.prototype.checkHost = function (view, componentView, el, throwOnChange) {
        var currVal_1 = this.context.isChecked;
        if (import3.checkBinding(throwOnChange, this._expr_1, currVal_1)) {
            view.renderer.setElementProperty(el, 'checked', currVal_1);
            this._expr_1 = currVal_1;
        }
    };
    Wrapper_SelectionCheckboxForDirective.prototype.handleEvent = function (eventName, $event) {
        var result = true;
        if ((eventName == 'change')) {
            var pd_sub_0 = (this.context.changeHandler($event) !== false);
            result = (pd_sub_0 && result);
        }
        return result;
    };
    Wrapper_SelectionCheckboxForDirective.prototype.subscribe = function (view, _eventHandler, emit0, emit1, emit2) {
        this._eventHandler = _eventHandler;
        if (emit0) {
            (this.subscription0 = this.context.itemSelected.subscribe(_eventHandler.bind(view, 'itemSelected')));
        }
        if (emit1) {
            (this.subscription1 = this.context.itemDeselected.subscribe(_eventHandler.bind(view, 'itemDeselected')));
        }
        if (emit2) {
            (this.subscription2 = this.context.selectionChanged.subscribe(_eventHandler.bind(view, 'selectionChanged')));
        }
    };
    return Wrapper_SelectionCheckboxForDirective;
}());
exports.Wrapper_SelectionCheckboxForDirective = Wrapper_SelectionCheckboxForDirective;


/***/ },

/***/ "./src/compiled/src/app/+selection/basic-usage/basic-usage.component.ngfactory.ts":
/***/ function(module, exports, __webpack_require__) {

"use strict";
/**
 * This file is generated by the Angular 2 template compiler.
 * Do not edit.
 */
/* tslint:disable */
"use strict";
var import0 = __webpack_require__("./src/app/+selection/basic-usage/basic-usage.component.ts");
var import1 = __webpack_require__("./node_modules/@angular/core/src/linker/view.js");
var import3 = __webpack_require__("./node_modules/@angular/core/src/linker/element.js");
var import4 = __webpack_require__("./node_modules/@angular/core/src/linker/view_utils.js");
var import6 = __webpack_require__("./node_modules/@angular/core/src/linker/view_type.js");
var import7 = __webpack_require__("./node_modules/@angular/core/src/change_detection/change_detection.js");
var import8 = __webpack_require__("./src/app/+selection/countries.service.ts");
var import9 = __webpack_require__("./node_modules/@angular/core/src/metadata/view.js");
var import10 = __webpack_require__("./node_modules/@angular/core/src/linker/component_factory.js");
var import11 = __webpack_require__("./node_modules/right-angled/src/core/selection/selection-service.js");
var import12 = __webpack_require__("./node_modules/right-angled/src/core/providers.js");
var import13 = __webpack_require__("./src/compiled/node_modules/right-angled/src/selection-directives/selection-area.directive.ngfactory.ts");
var import14 = __webpack_require__("./node_modules/@angular/core/src/linker/query_list.js");
var import15 = __webpack_require__("./src/compiled/node_modules/@angular/common/src/directives/ng_for.ngfactory.ts");
var import16 = __webpack_require__("./node_modules/@angular/core/src/linker/template_ref.js");
var import17 = __webpack_require__("./node_modules/@angular/core/src/change_detection/differs/iterable_differs.js");
var import18 = __webpack_require__("./node_modules/@angular/common/src/directives/ng_for.js");
var import19 = __webpack_require__("./node_modules/right-angled/src/selection-directives/selection-area.directive.js");
var import20 = __webpack_require__("./src/compiled/node_modules/right-angled/src/selection-directives/selectable.directive.ngfactory.ts");
var import21 = __webpack_require__("./node_modules/right-angled/src/selection-directives/selectable.directive.js");
var Wrapper_BasicUsageComponent = (function () {
    function Wrapper_BasicUsageComponent(p0) {
        this._changed = false;
        this.context = new import0.BasicUsageComponent(p0);
    }
    Wrapper_BasicUsageComponent.prototype.ngOnDetach = function (view, componentView, el) {
    };
    Wrapper_BasicUsageComponent.prototype.ngOnDestroy = function () {
    };
    Wrapper_BasicUsageComponent.prototype.ngDoCheck = function (view, el, throwOnChange) {
        var changed = this._changed;
        this._changed = false;
        return changed;
    };
    Wrapper_BasicUsageComponent.prototype.checkHost = function (view, componentView, el, throwOnChange) {
    };
    Wrapper_BasicUsageComponent.prototype.handleEvent = function (eventName, $event) {
        var result = true;
        return result;
    };
    Wrapper_BasicUsageComponent.prototype.subscribe = function (view, _eventHandler) {
        this._eventHandler = _eventHandler;
    };
    return Wrapper_BasicUsageComponent;
}());
exports.Wrapper_BasicUsageComponent = Wrapper_BasicUsageComponent;
var renderType_BasicUsageComponent_Host = null;
var _View_BasicUsageComponent_Host0 = (function (_super) {
    __extends(_View_BasicUsageComponent_Host0, _super);
    function _View_BasicUsageComponent_Host0(viewUtils, parentInjector, declarationEl) {
        _super.call(this, _View_BasicUsageComponent_Host0, renderType_BasicUsageComponent_Host, import6.ViewType.HOST, viewUtils, parentInjector, declarationEl, import7.ChangeDetectorStatus.CheckAlways);
    }
    _View_BasicUsageComponent_Host0.prototype.createInternal = function (rootSelector) {
        this._el_0 = import4.selectOrCreateRenderHostElement(this.renderer, 'rt-demo-basic-usage', import4.EMPTY_INLINE_ARRAY, rootSelector, null);
        this._appEl_0 = new import3.AppElement(0, null, this, this._el_0);
        this.compView_0 = viewFactory_BasicUsageComponent0(this.viewUtils, this.injector(0), this._appEl_0);
        this._BasicUsageComponent_0_4 = new Wrapper_BasicUsageComponent(this.parentInjector.get(import8.CountriesService));
        this._appEl_0.initComponent(this._BasicUsageComponent_0_4.context, this.compView_0);
        this.compView_0.create(this._BasicUsageComponent_0_4.context, null);
        this.init(this._el_0, [this._el_0], null);
        return this._appEl_0;
    };
    _View_BasicUsageComponent_Host0.prototype.injectorGetInternal = function (token, requestNodeIndex, notFoundResult) {
        if (((token === import0.BasicUsageComponent) && (0 === requestNodeIndex))) {
            return this._BasicUsageComponent_0_4.context;
        }
        return notFoundResult;
    };
    _View_BasicUsageComponent_Host0.prototype.detectChangesInternal = function (throwOnChange) {
        this._BasicUsageComponent_0_4.ngDoCheck(this, this._el_0, throwOnChange);
        this.compView_0.detectChanges(throwOnChange);
    };
    _View_BasicUsageComponent_Host0.prototype.destroyInternal = function () {
        this.compView_0.destroy();
    };
    _View_BasicUsageComponent_Host0.prototype.visitRootNodesInternal = function (cb, ctx) {
        cb(this._el_0, ctx);
    };
    return _View_BasicUsageComponent_Host0;
}(import1.AppView));
function viewFactory_BasicUsageComponent_Host0(viewUtils, parentInjector, declarationEl) {
    if ((renderType_BasicUsageComponent_Host === null)) {
        (renderType_BasicUsageComponent_Host = viewUtils.createRenderComponentType('', 0, import9.ViewEncapsulation.None, [], {}));
    }
    return new _View_BasicUsageComponent_Host0(viewUtils, parentInjector, declarationEl);
}
exports.BasicUsageComponentNgFactory = new import10.ComponentFactory('rt-demo-basic-usage', viewFactory_BasicUsageComponent_Host0, import0.BasicUsageComponent);
var styles_BasicUsageComponent = [];
var renderType_BasicUsageComponent = null;
var _View_BasicUsageComponent0 = (function (_super) {
    __extends(_View_BasicUsageComponent0, _super);
    function _View_BasicUsageComponent0(viewUtils, parentInjector, declarationEl) {
        _super.call(this, _View_BasicUsageComponent0, renderType_BasicUsageComponent, import6.ViewType.COMPONENT, viewUtils, parentInjector, declarationEl, import7.ChangeDetectorStatus.CheckAlways);
    }
    _View_BasicUsageComponent0.prototype.createInternal = function (rootSelector) {
        var parentRenderNode = this.renderer.createViewRoot(this.declarationAppElement.nativeElement);
        this._el_0 = import4.createRenderElement(this.renderer, parentRenderNode, 'div', new import4.InlineArray4(4, 'class', 'row', 'rtSelectionArea', ''), null);
        this._RtSelectionService_0_3 = new import11.RtSelectionService();
        this._RtSelectionEventsHelper_0_4 = new import12.RtSelectionEventsHelper(this._RtSelectionService_0_3);
        this._SelectionAreaDirective_0_5 = new import13.Wrapper_SelectionAreaDirective(this._RtSelectionService_0_3, this._RtSelectionEventsHelper_0_4);
        this._query_SelectableDirective_0_0 = new import14.QueryList();
        this._query_SelectionCheckboxForDirective_0_1 = new import14.QueryList();
        this._query_SelectionAreaDirective_0_2 = new import14.QueryList();
        this._text_1 = this.renderer.createText(this._el_0, '\n  ', null);
        this._anchor_2 = this.renderer.createTemplateAnchor(this._el_0, null);
        this._appEl_2 = new import3.AppElement(2, 0, this, this._anchor_2);
        this._TemplateRef_2_5 = new import16.TemplateRef_(this._appEl_2, viewFactory_BasicUsageComponent1);
        this._NgFor_2_6 = new import15.Wrapper_NgFor(this._appEl_2.vcRef, this._TemplateRef_2_5, this.parentInjector.get(import17.IterableDiffers), this.ref);
        this._text_3 = this.renderer.createText(this._el_0, '\n', null);
        var disposable_0 = import4.subscribeToRenderElement(this, this._el_0, new import4.InlineArray2(2, 'keydown', null), this.eventHandler(this.handleEvent_0));
        this.init(null, [
            this._el_0,
            this._text_1,
            this._anchor_2,
            this._text_3
        ], [disposable_0]);
        return null;
    };
    _View_BasicUsageComponent0.prototype.injectorGetInternal = function (token, requestNodeIndex, notFoundResult) {
        if (((token === import16.TemplateRef) && (2 === requestNodeIndex))) {
            return this._TemplateRef_2_5;
        }
        if (((token === import18.NgFor) && (2 === requestNodeIndex))) {
            return this._NgFor_2_6.context;
        }
        if (((token === import11.RtSelectionService) && ((0 <= requestNodeIndex) && (requestNodeIndex <= 3)))) {
            return this._RtSelectionService_0_3;
        }
        if (((token === import12.RtSelectionEventsHelper) && ((0 <= requestNodeIndex) && (requestNodeIndex <= 3)))) {
            return this._RtSelectionEventsHelper_0_4;
        }
        if (((token === import19.SelectionAreaDirective) && ((0 <= requestNodeIndex) && (requestNodeIndex <= 3)))) {
            return this._SelectionAreaDirective_0_5.context;
        }
        return notFoundResult;
    };
    _View_BasicUsageComponent0.prototype.detectChangesInternal = function (throwOnChange) {
        this._SelectionAreaDirective_0_5.ngDoCheck(this, this._el_0, throwOnChange);
        var currVal_2_0_0 = this.context.countries;
        this._NgFor_2_6.check_ngForOf(currVal_2_0_0, throwOnChange, false);
        this._NgFor_2_6.ngDoCheck(this, this._anchor_2, throwOnChange);
        this._appEl_2.detectChangesInNestedViews(throwOnChange);
        if (!throwOnChange) {
            if (this._query_SelectableDirective_0_0.dirty) {
                this._query_SelectableDirective_0_0.reset([this._appEl_2.mapNestedViews(_View_BasicUsageComponent1, function (nestedView) {
                        return [nestedView._SelectableDirective_0_3.context];
                    })]);
                this._SelectionAreaDirective_0_5.context.selectableItems = this._query_SelectableDirective_0_0;
                this._query_SelectableDirective_0_0.notifyOnChanges();
            }
            if (this._query_SelectionCheckboxForDirective_0_1.dirty) {
                this._query_SelectionCheckboxForDirective_0_1.reset([]);
                this._SelectionAreaDirective_0_5.context.childSelectionCheckboxes = this._query_SelectionCheckboxForDirective_0_1;
                this._query_SelectionCheckboxForDirective_0_1.notifyOnChanges();
            }
            if (this._query_SelectionAreaDirective_0_2.dirty) {
                this._query_SelectionAreaDirective_0_2.reset([this._SelectionAreaDirective_0_5.context]);
                this._SelectionAreaDirective_0_5.context.childSelectionAreas = this._query_SelectionAreaDirective_0_2;
                this._query_SelectionAreaDirective_0_2.notifyOnChanges();
            }
            if ((this.numberOfChecks === 0)) {
                this._SelectionAreaDirective_0_5.context.ngAfterContentInit();
            }
        }
        this._SelectionAreaDirective_0_5.checkHost(this, this, this._el_0, throwOnChange);
    };
    _View_BasicUsageComponent0.prototype.destroyInternal = function () {
        this._appEl_2.destroyNestedViews();
        this._SelectionAreaDirective_0_5.ngOnDestroy();
    };
    _View_BasicUsageComponent0.prototype.handleEvent_0 = function (eventName, $event) {
        this.markPathToRootAsCheckOnce();
        var result = true;
        result = (this._SelectionAreaDirective_0_5.handleEvent(eventName, $event) && result);
        return result;
    };
    return _View_BasicUsageComponent0;
}(import1.AppView));
function viewFactory_BasicUsageComponent0(viewUtils, parentInjector, declarationEl) {
    if ((renderType_BasicUsageComponent === null)) {
        (renderType_BasicUsageComponent = viewUtils.createRenderComponentType('', 0, import9.ViewEncapsulation.None, styles_BasicUsageComponent, {}));
    }
    return new _View_BasicUsageComponent0(viewUtils, parentInjector, declarationEl);
}
exports.viewFactory_BasicUsageComponent0 = viewFactory_BasicUsageComponent0;
var _View_BasicUsageComponent1 = (function (_super) {
    __extends(_View_BasicUsageComponent1, _super);
    function _View_BasicUsageComponent1(viewUtils, parentInjector, declarationEl) {
        _super.call(this, _View_BasicUsageComponent1, renderType_BasicUsageComponent, import6.ViewType.EMBEDDED, viewUtils, parentInjector, declarationEl, import7.ChangeDetectorStatus.CheckAlways);
        this._expr_6 = import7.UNINITIALIZED;
        this._expr_7 = import7.UNINITIALIZED;
    }
    _View_BasicUsageComponent1.prototype.createInternal = function (rootSelector) {
        this._el_0 = import4.createRenderElement(this.renderer, null, 'div', new import4.InlineArray2(2, 'class', 'col-md-12'), null);
        this._SelectableDirective_0_3 = new import20.Wrapper_SelectableDirective(this.parent._RtSelectionEventsHelper_0_4);
        this._text_1 = this.renderer.createText(this._el_0, '\n    ', null);
        this._el_2 = import4.createRenderElement(this.renderer, this._el_0, 'div', new import4.InlineArray2(2, 'class', 'item'), null);
        this._text_3 = this.renderer.createText(this._el_2, '', null);
        this._text_4 = this.renderer.createText(this._el_0, '\n  ', null);
        var disposable_0 = import4.subscribeToRenderElement(this, this._el_0, new import4.InlineArray2(2, 'mouseup', null), this.eventHandler(this.handleEvent_0));
        this.init(this._el_0, [
            this._el_0,
            this._text_1,
            this._el_2,
            this._text_3,
            this._text_4
        ], [disposable_0]);
        return null;
    };
    _View_BasicUsageComponent1.prototype.injectorGetInternal = function (token, requestNodeIndex, notFoundResult) {
        if (((token === import21.SelectableDirective) && ((0 <= requestNodeIndex) && (requestNodeIndex <= 4)))) {
            return this._SelectableDirective_0_3.context;
        }
        return notFoundResult;
    };
    _View_BasicUsageComponent1.prototype.detectChangesInternal = function (throwOnChange) {
        var currVal_0_0_0 = this.context.$implicit;
        this._SelectableDirective_0_3.check_item(currVal_0_0_0, throwOnChange, false);
        this._SelectableDirective_0_3.ngDoCheck(this, this._el_0, throwOnChange);
        var currVal_6 = this._SelectableDirective_0_3.context.selected;
        if (import4.checkBinding(throwOnChange, this._expr_6, currVal_6)) {
            this.renderer.setElementClass(this._el_2, 'selected', currVal_6);
            this._expr_6 = currVal_6;
        }
        var currVal_7 = import4.interpolate(1, '\n      ', this.context.$implicit.name, '\n    ');
        if (import4.checkBinding(throwOnChange, this._expr_7, currVal_7)) {
            this.renderer.setText(this._text_3, currVal_7);
            this._expr_7 = currVal_7;
        }
    };
    _View_BasicUsageComponent1.prototype.dirtyParentQueriesInternal = function () {
        this.parent._query_SelectableDirective_0_0.setDirty();
    };
    _View_BasicUsageComponent1.prototype.destroyInternal = function () {
        this._SelectableDirective_0_3.ngOnDestroy();
    };
    _View_BasicUsageComponent1.prototype.visitRootNodesInternal = function (cb, ctx) {
        cb(this._el_0, ctx);
    };
    _View_BasicUsageComponent1.prototype.handleEvent_0 = function (eventName, $event) {
        this.markPathToRootAsCheckOnce();
        var result = true;
        result = (this._SelectableDirective_0_3.handleEvent(eventName, $event) && result);
        return result;
    };
    return _View_BasicUsageComponent1;
}(import1.AppView));
function viewFactory_BasicUsageComponent1(viewUtils, parentInjector, declarationEl) {
    return new _View_BasicUsageComponent1(viewUtils, parentInjector, declarationEl);
}


/***/ },

/***/ "./src/compiled/src/app/+selection/custom-track-by/custom-track-by.component.ngfactory.ts":
/***/ function(module, exports, __webpack_require__) {

"use strict";
/**
 * This file is generated by the Angular 2 template compiler.
 * Do not edit.
 */
/* tslint:disable */
"use strict";
var import0 = __webpack_require__("./src/app/+selection/custom-track-by/custom-track-by.component.ts");
var import1 = __webpack_require__("./node_modules/@angular/core/src/linker/view.js");
var import3 = __webpack_require__("./node_modules/@angular/core/src/linker/element.js");
var import4 = __webpack_require__("./node_modules/@angular/core/src/linker/view_utils.js");
var import6 = __webpack_require__("./node_modules/@angular/core/src/linker/view_type.js");
var import7 = __webpack_require__("./node_modules/@angular/core/src/change_detection/change_detection.js");
var import8 = __webpack_require__("./src/app/+selection/countries.service.ts");
var import9 = __webpack_require__("./node_modules/@angular/core/src/metadata/view.js");
var import10 = __webpack_require__("./node_modules/@angular/core/src/linker/component_factory.js");
var import11 = __webpack_require__("./node_modules/right-angled/src/core/selection/selection-service.js");
var import12 = __webpack_require__("./node_modules/right-angled/src/core/providers.js");
var import13 = __webpack_require__("./src/compiled/node_modules/right-angled/src/selection-directives/selection-area.directive.ngfactory.ts");
var import14 = __webpack_require__("./node_modules/@angular/core/src/linker/query_list.js");
var import15 = __webpack_require__("./src/compiled/node_modules/@angular/common/src/directives/ng_for.ngfactory.ts");
var import16 = __webpack_require__("./src/compiled/node_modules/@angular/common/src/directives/ng_if.ngfactory.ts");
var import17 = __webpack_require__("./node_modules/@angular/core/src/linker/template_ref.js");
var import18 = __webpack_require__("./node_modules/@angular/core/src/change_detection/differs/iterable_differs.js");
var import19 = __webpack_require__("./node_modules/@angular/common/src/directives/ng_for.js");
var import20 = __webpack_require__("./node_modules/@angular/common/src/directives/ng_if.js");
var import21 = __webpack_require__("./node_modules/right-angled/src/selection-directives/selection-area.directive.js");
var import22 = __webpack_require__("./src/compiled/node_modules/right-angled/src/selection-directives/selectable.directive.ngfactory.ts");
var import23 = __webpack_require__("./node_modules/right-angled/src/selection-directives/selectable.directive.js");
var Wrapper_CustomTrackByComponent = (function () {
    function Wrapper_CustomTrackByComponent(p0) {
        this._changed = false;
        this.context = new import0.CustomTrackByComponent(p0);
    }
    Wrapper_CustomTrackByComponent.prototype.ngOnDetach = function (view, componentView, el) {
    };
    Wrapper_CustomTrackByComponent.prototype.ngOnDestroy = function () {
    };
    Wrapper_CustomTrackByComponent.prototype.ngDoCheck = function (view, el, throwOnChange) {
        var changed = this._changed;
        this._changed = false;
        return changed;
    };
    Wrapper_CustomTrackByComponent.prototype.checkHost = function (view, componentView, el, throwOnChange) {
    };
    Wrapper_CustomTrackByComponent.prototype.handleEvent = function (eventName, $event) {
        var result = true;
        return result;
    };
    Wrapper_CustomTrackByComponent.prototype.subscribe = function (view, _eventHandler) {
        this._eventHandler = _eventHandler;
    };
    return Wrapper_CustomTrackByComponent;
}());
exports.Wrapper_CustomTrackByComponent = Wrapper_CustomTrackByComponent;
var renderType_CustomTrackByComponent_Host = null;
var _View_CustomTrackByComponent_Host0 = (function (_super) {
    __extends(_View_CustomTrackByComponent_Host0, _super);
    function _View_CustomTrackByComponent_Host0(viewUtils, parentInjector, declarationEl) {
        _super.call(this, _View_CustomTrackByComponent_Host0, renderType_CustomTrackByComponent_Host, import6.ViewType.HOST, viewUtils, parentInjector, declarationEl, import7.ChangeDetectorStatus.CheckAlways);
    }
    _View_CustomTrackByComponent_Host0.prototype.createInternal = function (rootSelector) {
        this._el_0 = import4.selectOrCreateRenderHostElement(this.renderer, 'rt-demo-custom-track-by', import4.EMPTY_INLINE_ARRAY, rootSelector, null);
        this._appEl_0 = new import3.AppElement(0, null, this, this._el_0);
        this.compView_0 = viewFactory_CustomTrackByComponent0(this.viewUtils, this.injector(0), this._appEl_0);
        this._CustomTrackByComponent_0_4 = new Wrapper_CustomTrackByComponent(this.parentInjector.get(import8.CountriesService));
        this._appEl_0.initComponent(this._CustomTrackByComponent_0_4.context, this.compView_0);
        this.compView_0.create(this._CustomTrackByComponent_0_4.context, null);
        this.init(this._el_0, [this._el_0], null);
        return this._appEl_0;
    };
    _View_CustomTrackByComponent_Host0.prototype.injectorGetInternal = function (token, requestNodeIndex, notFoundResult) {
        if (((token === import0.CustomTrackByComponent) && (0 === requestNodeIndex))) {
            return this._CustomTrackByComponent_0_4.context;
        }
        return notFoundResult;
    };
    _View_CustomTrackByComponent_Host0.prototype.detectChangesInternal = function (throwOnChange) {
        this._CustomTrackByComponent_0_4.ngDoCheck(this, this._el_0, throwOnChange);
        this.compView_0.detectChanges(throwOnChange);
    };
    _View_CustomTrackByComponent_Host0.prototype.destroyInternal = function () {
        this.compView_0.destroy();
    };
    _View_CustomTrackByComponent_Host0.prototype.visitRootNodesInternal = function (cb, ctx) {
        cb(this._el_0, ctx);
    };
    return _View_CustomTrackByComponent_Host0;
}(import1.AppView));
function viewFactory_CustomTrackByComponent_Host0(viewUtils, parentInjector, declarationEl) {
    if ((renderType_CustomTrackByComponent_Host === null)) {
        (renderType_CustomTrackByComponent_Host = viewUtils.createRenderComponentType('', 0, import9.ViewEncapsulation.None, [], {}));
    }
    return new _View_CustomTrackByComponent_Host0(viewUtils, parentInjector, declarationEl);
}
exports.CustomTrackByComponentNgFactory = new import10.ComponentFactory('rt-demo-custom-track-by', viewFactory_CustomTrackByComponent_Host0, import0.CustomTrackByComponent);
var styles_CustomTrackByComponent = [];
var renderType_CustomTrackByComponent = null;
var _View_CustomTrackByComponent0 = (function (_super) {
    __extends(_View_CustomTrackByComponent0, _super);
    function _View_CustomTrackByComponent0(viewUtils, parentInjector, declarationEl) {
        _super.call(this, _View_CustomTrackByComponent0, renderType_CustomTrackByComponent, import6.ViewType.COMPONENT, viewUtils, parentInjector, declarationEl, import7.ChangeDetectorStatus.CheckAlways);
    }
    _View_CustomTrackByComponent0.prototype.createInternal = function (rootSelector) {
        var parentRenderNode = this.renderer.createViewRoot(this.declarationAppElement.nativeElement);
        this._el_0 = import4.createRenderElement(this.renderer, parentRenderNode, 'div', new import4.InlineArray2(2, 'class', 'toolbar'), null);
        this._text_1 = this.renderer.createText(this._el_0, '\n	', null);
        this._el_2 = import4.createRenderElement(this.renderer, this._el_0, 'button', new import4.InlineArray8(6, 'class', 'btn btn-primary', 'title', 'Reload data', 'type', 'button'), null);
        this._text_3 = this.renderer.createText(this._el_2, 'Reload data', null);
        this._text_4 = this.renderer.createText(this._el_0, '\n', null);
        this._text_5 = this.renderer.createText(parentRenderNode, '\n', null);
        this._el_6 = import4.createRenderElement(this.renderer, parentRenderNode, 'div', new import4.InlineArray4(4, 'class', 'row', 'rtSelectionArea', ''), null);
        this._RtSelectionService_6_3 = new import11.RtSelectionService();
        this._RtSelectionEventsHelper_6_4 = new import12.RtSelectionEventsHelper(this._RtSelectionService_6_3);
        this._SelectionAreaDirective_6_5 = new import13.Wrapper_SelectionAreaDirective(this._RtSelectionService_6_3, this._RtSelectionEventsHelper_6_4);
        this._query_SelectableDirective_6_0 = new import14.QueryList();
        this._query_SelectionCheckboxForDirective_6_1 = new import14.QueryList();
        this._query_SelectionAreaDirective_6_2 = new import14.QueryList();
        this._text_7 = this.renderer.createText(this._el_6, '\n	', null);
        this._anchor_8 = this.renderer.createTemplateAnchor(this._el_6, null);
        this._appEl_8 = new import3.AppElement(8, 6, this, this._anchor_8);
        this._TemplateRef_8_5 = new import17.TemplateRef_(this._appEl_8, viewFactory_CustomTrackByComponent1);
        this._NgFor_8_6 = new import15.Wrapper_NgFor(this._appEl_8.vcRef, this._TemplateRef_8_5, this.parentInjector.get(import18.IterableDiffers), this.ref);
        this._text_9 = this.renderer.createText(this._el_6, '\n	', null);
        this._anchor_10 = this.renderer.createTemplateAnchor(this._el_6, null);
        this._appEl_10 = new import3.AppElement(10, 6, this, this._anchor_10);
        this._TemplateRef_10_5 = new import17.TemplateRef_(this._appEl_10, viewFactory_CustomTrackByComponent2);
        this._NgIf_10_6 = new import16.Wrapper_NgIf(this._appEl_10.vcRef, this._TemplateRef_10_5);
        this._text_11 = this.renderer.createText(this._el_6, '\n', null);
        var disposable_0 = import4.subscribeToRenderElement(this, this._el_2, new import4.InlineArray2(2, 'click', null), this.eventHandler(this.handleEvent_2));
        var disposable_1 = import4.subscribeToRenderElement(this, this._el_6, new import4.InlineArray2(2, 'keydown', null), this.eventHandler(this.handleEvent_6));
        this.init(null, [
            this._el_0,
            this._text_1,
            this._el_2,
            this._text_3,
            this._text_4,
            this._text_5,
            this._el_6,
            this._text_7,
            this._anchor_8,
            this._text_9,
            this._anchor_10,
            this._text_11
        ], [
            disposable_0,
            disposable_1
        ]);
        return null;
    };
    _View_CustomTrackByComponent0.prototype.injectorGetInternal = function (token, requestNodeIndex, notFoundResult) {
        if (((token === import17.TemplateRef) && (8 === requestNodeIndex))) {
            return this._TemplateRef_8_5;
        }
        if (((token === import19.NgFor) && (8 === requestNodeIndex))) {
            return this._NgFor_8_6.context;
        }
        if (((token === import17.TemplateRef) && (10 === requestNodeIndex))) {
            return this._TemplateRef_10_5;
        }
        if (((token === import20.NgIf) && (10 === requestNodeIndex))) {
            return this._NgIf_10_6.context;
        }
        if (((token === import11.RtSelectionService) && ((6 <= requestNodeIndex) && (requestNodeIndex <= 11)))) {
            return this._RtSelectionService_6_3;
        }
        if (((token === import12.RtSelectionEventsHelper) && ((6 <= requestNodeIndex) && (requestNodeIndex <= 11)))) {
            return this._RtSelectionEventsHelper_6_4;
        }
        if (((token === import21.SelectionAreaDirective) && ((6 <= requestNodeIndex) && (requestNodeIndex <= 11)))) {
            return this._SelectionAreaDirective_6_5.context;
        }
        return notFoundResult;
    };
    _View_CustomTrackByComponent0.prototype.detectChangesInternal = function (throwOnChange) {
        var currVal_6_0_0 = this.context.trackByName;
        this._SelectionAreaDirective_6_5.check_trackBy(currVal_6_0_0, throwOnChange, false);
        this._SelectionAreaDirective_6_5.ngDoCheck(this, this._el_6, throwOnChange);
        var currVal_8_0_0 = this.context.countries;
        this._NgFor_8_6.check_ngForOf(currVal_8_0_0, throwOnChange, false);
        this._NgFor_8_6.ngDoCheck(this, this._anchor_8, throwOnChange);
        var currVal_10_0_0 = !this.context.countries.length;
        this._NgIf_10_6.check_ngIf(currVal_10_0_0, throwOnChange, false);
        this._NgIf_10_6.ngDoCheck(this, this._anchor_10, throwOnChange);
        this._appEl_8.detectChangesInNestedViews(throwOnChange);
        this._appEl_10.detectChangesInNestedViews(throwOnChange);
        if (!throwOnChange) {
            if (this._query_SelectableDirective_6_0.dirty) {
                this._query_SelectableDirective_6_0.reset([this._appEl_8.mapNestedViews(_View_CustomTrackByComponent1, function (nestedView) {
                        return [nestedView._SelectableDirective_0_3.context];
                    })]);
                this._SelectionAreaDirective_6_5.context.selectableItems = this._query_SelectableDirective_6_0;
                this._query_SelectableDirective_6_0.notifyOnChanges();
            }
            if (this._query_SelectionCheckboxForDirective_6_1.dirty) {
                this._query_SelectionCheckboxForDirective_6_1.reset([]);
                this._SelectionAreaDirective_6_5.context.childSelectionCheckboxes = this._query_SelectionCheckboxForDirective_6_1;
                this._query_SelectionCheckboxForDirective_6_1.notifyOnChanges();
            }
            if (this._query_SelectionAreaDirective_6_2.dirty) {
                this._query_SelectionAreaDirective_6_2.reset([this._SelectionAreaDirective_6_5.context]);
                this._SelectionAreaDirective_6_5.context.childSelectionAreas = this._query_SelectionAreaDirective_6_2;
                this._query_SelectionAreaDirective_6_2.notifyOnChanges();
            }
            if ((this.numberOfChecks === 0)) {
                this._SelectionAreaDirective_6_5.context.ngAfterContentInit();
            }
        }
        this._SelectionAreaDirective_6_5.checkHost(this, this, this._el_6, throwOnChange);
    };
    _View_CustomTrackByComponent0.prototype.destroyInternal = function () {
        this._appEl_8.destroyNestedViews();
        this._appEl_10.destroyNestedViews();
        this._SelectionAreaDirective_6_5.ngOnDestroy();
    };
    _View_CustomTrackByComponent0.prototype.handleEvent_2 = function (eventName, $event) {
        this.markPathToRootAsCheckOnce();
        var result = true;
        if ((eventName == 'click')) {
            var pd_sub_0 = (this.context.reload() !== false);
            result = (pd_sub_0 && result);
        }
        return result;
    };
    _View_CustomTrackByComponent0.prototype.handleEvent_6 = function (eventName, $event) {
        this.markPathToRootAsCheckOnce();
        var result = true;
        result = (this._SelectionAreaDirective_6_5.handleEvent(eventName, $event) && result);
        return result;
    };
    return _View_CustomTrackByComponent0;
}(import1.AppView));
function viewFactory_CustomTrackByComponent0(viewUtils, parentInjector, declarationEl) {
    if ((renderType_CustomTrackByComponent === null)) {
        (renderType_CustomTrackByComponent = viewUtils.createRenderComponentType('', 0, import9.ViewEncapsulation.None, styles_CustomTrackByComponent, {}));
    }
    return new _View_CustomTrackByComponent0(viewUtils, parentInjector, declarationEl);
}
exports.viewFactory_CustomTrackByComponent0 = viewFactory_CustomTrackByComponent0;
var _View_CustomTrackByComponent1 = (function (_super) {
    __extends(_View_CustomTrackByComponent1, _super);
    function _View_CustomTrackByComponent1(viewUtils, parentInjector, declarationEl) {
        _super.call(this, _View_CustomTrackByComponent1, renderType_CustomTrackByComponent, import6.ViewType.EMBEDDED, viewUtils, parentInjector, declarationEl, import7.ChangeDetectorStatus.CheckAlways);
        this._expr_6 = import7.UNINITIALIZED;
        this._expr_7 = import7.UNINITIALIZED;
    }
    _View_CustomTrackByComponent1.prototype.createInternal = function (rootSelector) {
        this._el_0 = import4.createRenderElement(this.renderer, null, 'div', new import4.InlineArray2(2, 'class', 'col-md-12'), null);
        this._SelectableDirective_0_3 = new import22.Wrapper_SelectableDirective(this.parent._RtSelectionEventsHelper_6_4);
        this._text_1 = this.renderer.createText(this._el_0, '\n		', null);
        this._el_2 = import4.createRenderElement(this.renderer, this._el_0, 'div', new import4.InlineArray2(2, 'class', 'item'), null);
        this._text_3 = this.renderer.createText(this._el_2, '', null);
        this._text_4 = this.renderer.createText(this._el_0, '\n	', null);
        var disposable_0 = import4.subscribeToRenderElement(this, this._el_0, new import4.InlineArray2(2, 'mouseup', null), this.eventHandler(this.handleEvent_0));
        this.init(this._el_0, [
            this._el_0,
            this._text_1,
            this._el_2,
            this._text_3,
            this._text_4
        ], [disposable_0]);
        return null;
    };
    _View_CustomTrackByComponent1.prototype.injectorGetInternal = function (token, requestNodeIndex, notFoundResult) {
        if (((token === import23.SelectableDirective) && ((0 <= requestNodeIndex) && (requestNodeIndex <= 4)))) {
            return this._SelectableDirective_0_3.context;
        }
        return notFoundResult;
    };
    _View_CustomTrackByComponent1.prototype.detectChangesInternal = function (throwOnChange) {
        var currVal_0_0_0 = this.context.$implicit;
        this._SelectableDirective_0_3.check_item(currVal_0_0_0, throwOnChange, false);
        this._SelectableDirective_0_3.ngDoCheck(this, this._el_0, throwOnChange);
        var currVal_6 = this._SelectableDirective_0_3.context.selected;
        if (import4.checkBinding(throwOnChange, this._expr_6, currVal_6)) {
            this.renderer.setElementClass(this._el_2, 'selected', currVal_6);
            this._expr_6 = currVal_6;
        }
        var currVal_7 = import4.interpolate(1, '\n			', this.context.$implicit.name, '\n		');
        if (import4.checkBinding(throwOnChange, this._expr_7, currVal_7)) {
            this.renderer.setText(this._text_3, currVal_7);
            this._expr_7 = currVal_7;
        }
    };
    _View_CustomTrackByComponent1.prototype.dirtyParentQueriesInternal = function () {
        this.parent._query_SelectableDirective_6_0.setDirty();
    };
    _View_CustomTrackByComponent1.prototype.destroyInternal = function () {
        this._SelectableDirective_0_3.ngOnDestroy();
    };
    _View_CustomTrackByComponent1.prototype.visitRootNodesInternal = function (cb, ctx) {
        cb(this._el_0, ctx);
    };
    _View_CustomTrackByComponent1.prototype.handleEvent_0 = function (eventName, $event) {
        this.markPathToRootAsCheckOnce();
        var result = true;
        result = (this._SelectableDirective_0_3.handleEvent(eventName, $event) && result);
        return result;
    };
    return _View_CustomTrackByComponent1;
}(import1.AppView));
function viewFactory_CustomTrackByComponent1(viewUtils, parentInjector, declarationEl) {
    return new _View_CustomTrackByComponent1(viewUtils, parentInjector, declarationEl);
}
var _View_CustomTrackByComponent2 = (function (_super) {
    __extends(_View_CustomTrackByComponent2, _super);
    function _View_CustomTrackByComponent2(viewUtils, parentInjector, declarationEl) {
        _super.call(this, _View_CustomTrackByComponent2, renderType_CustomTrackByComponent, import6.ViewType.EMBEDDED, viewUtils, parentInjector, declarationEl, import7.ChangeDetectorStatus.CheckAlways);
    }
    _View_CustomTrackByComponent2.prototype.createInternal = function (rootSelector) {
        this._el_0 = import4.createRenderElement(this.renderer, null, 'div', new import4.InlineArray2(2, 'class', 'line-progress'), null);
        this._text_1 = this.renderer.createText(this._el_0, '\n	', null);
        this.init(this._el_0, [
            this._el_0,
            this._text_1
        ], null);
        return null;
    };
    _View_CustomTrackByComponent2.prototype.visitRootNodesInternal = function (cb, ctx) {
        cb(this._el_0, ctx);
    };
    return _View_CustomTrackByComponent2;
}(import1.AppView));
function viewFactory_CustomTrackByComponent2(viewUtils, parentInjector, declarationEl) {
    return new _View_CustomTrackByComponent2(viewUtils, parentInjector, declarationEl);
}


/***/ },

/***/ "./src/compiled/src/app/+selection/options/options.component.css.shim.ts":
/***/ function(module, exports) {

"use strict";
/**
 * This file is generated by the Angular 2 template compiler.
 * Do not edit.
 */
/* tslint:disable */
"use strict";
exports.styles = ['[_nghost-%COMP%]     .options{padding:0 1px 15px}[_nghost-%COMP%]     .checkbox-inline+.checkbox-inline, .radio-inline[_ngcontent-%COMP%] + .radio-inline[_ngcontent-%COMP%]{margin-left:0}[_nghost-%COMP%]     .checkbox-inline, .radio-inline[_ngcontent-%COMP%]{margin-right:10px}'];


/***/ },

/***/ "./src/compiled/src/app/+selection/options/options.component.ngfactory.ts":
/***/ function(module, exports, __webpack_require__) {

"use strict";
/**
 * This file is generated by the Angular 2 template compiler.
 * Do not edit.
 */
/* tslint:disable */
"use strict";
var import0 = __webpack_require__("./src/app/+selection/options/options.component.ts");
var import1 = __webpack_require__("./node_modules/@angular/core/src/linker/view.js");
var import3 = __webpack_require__("./node_modules/@angular/core/src/linker/element.js");
var import4 = __webpack_require__("./node_modules/@angular/core/src/linker/view_utils.js");
var import6 = __webpack_require__("./node_modules/@angular/core/src/linker/view_type.js");
var import7 = __webpack_require__("./node_modules/@angular/core/src/change_detection/change_detection.js");
var import8 = __webpack_require__("./src/app/+selection/countries.service.ts");
var import9 = __webpack_require__("./node_modules/@angular/core/src/metadata/view.js");
var import10 = __webpack_require__("./node_modules/@angular/core/src/linker/component_factory.js");
var import11 = __webpack_require__("./src/compiled/src/app/+selection/options/options.component.css.shim.ts");
var import12 = __webpack_require__("./node_modules/right-angled/src/core/selection/selection-service.js");
var import13 = __webpack_require__("./node_modules/right-angled/src/core/providers.js");
var import14 = __webpack_require__("./src/compiled/node_modules/right-angled/src/selection-directives/selection-area.directive.ngfactory.ts");
var import15 = __webpack_require__("./node_modules/@angular/core/src/linker/query_list.js");
var import16 = __webpack_require__("./src/compiled/node_modules/@angular/forms/src/directives/checkbox_value_accessor.ngfactory.ts");
var import17 = __webpack_require__("./src/compiled/node_modules/@angular/forms/src/directives/ng_model.ngfactory.ts");
var import18 = __webpack_require__("./src/compiled/node_modules/@angular/forms/src/directives/ng_control_status.ngfactory.ts");
var import19 = __webpack_require__("./src/compiled/node_modules/@angular/common/src/directives/ng_for.ngfactory.ts");
var import20 = __webpack_require__("./src/compiled/node_modules/@angular/common/src/directives/ng_if.ngfactory.ts");
var import21 = __webpack_require__("./node_modules/@angular/core/src/linker/element_ref.js");
var import22 = __webpack_require__("./node_modules/@angular/core/src/linker/template_ref.js");
var import23 = __webpack_require__("./node_modules/@angular/core/src/change_detection/differs/iterable_differs.js");
var import24 = __webpack_require__("./node_modules/@angular/forms/src/directives/checkbox_value_accessor.js");
var import25 = __webpack_require__("./node_modules/@angular/forms/src/directives/control_value_accessor.js");
var import26 = __webpack_require__("./node_modules/@angular/forms/src/directives/ng_model.js");
var import27 = __webpack_require__("./node_modules/@angular/forms/src/directives/ng_control.js");
var import28 = __webpack_require__("./node_modules/@angular/forms/src/directives/ng_control_status.js");
var import29 = __webpack_require__("./node_modules/@angular/common/src/directives/ng_for.js");
var import30 = __webpack_require__("./node_modules/@angular/common/src/directives/ng_if.js");
var import31 = __webpack_require__("./node_modules/right-angled/src/selection-directives/selection-area.directive.js");
var import32 = __webpack_require__("./src/compiled/node_modules/right-angled/src/selection-directives/selectable.directive.ngfactory.ts");
var import33 = __webpack_require__("./node_modules/right-angled/src/selection-directives/selectable.directive.js");
var Wrapper_OptionsComponent = (function () {
    function Wrapper_OptionsComponent(p0) {
        this._changed = false;
        this.context = new import0.OptionsComponent(p0);
    }
    Wrapper_OptionsComponent.prototype.ngOnDetach = function (view, componentView, el) {
    };
    Wrapper_OptionsComponent.prototype.ngOnDestroy = function () {
    };
    Wrapper_OptionsComponent.prototype.ngDoCheck = function (view, el, throwOnChange) {
        var changed = this._changed;
        this._changed = false;
        return changed;
    };
    Wrapper_OptionsComponent.prototype.checkHost = function (view, componentView, el, throwOnChange) {
    };
    Wrapper_OptionsComponent.prototype.handleEvent = function (eventName, $event) {
        var result = true;
        return result;
    };
    Wrapper_OptionsComponent.prototype.subscribe = function (view, _eventHandler) {
        this._eventHandler = _eventHandler;
    };
    return Wrapper_OptionsComponent;
}());
exports.Wrapper_OptionsComponent = Wrapper_OptionsComponent;
var renderType_OptionsComponent_Host = null;
var _View_OptionsComponent_Host0 = (function (_super) {
    __extends(_View_OptionsComponent_Host0, _super);
    function _View_OptionsComponent_Host0(viewUtils, parentInjector, declarationEl) {
        _super.call(this, _View_OptionsComponent_Host0, renderType_OptionsComponent_Host, import6.ViewType.HOST, viewUtils, parentInjector, declarationEl, import7.ChangeDetectorStatus.CheckAlways);
    }
    _View_OptionsComponent_Host0.prototype.createInternal = function (rootSelector) {
        this._el_0 = import4.selectOrCreateRenderHostElement(this.renderer, 'rt-demo-options', import4.EMPTY_INLINE_ARRAY, rootSelector, null);
        this._appEl_0 = new import3.AppElement(0, null, this, this._el_0);
        this.compView_0 = viewFactory_OptionsComponent0(this.viewUtils, this.injector(0), this._appEl_0);
        this._OptionsComponent_0_4 = new Wrapper_OptionsComponent(this.parentInjector.get(import8.CountriesService));
        this._appEl_0.initComponent(this._OptionsComponent_0_4.context, this.compView_0);
        this.compView_0.create(this._OptionsComponent_0_4.context, null);
        this.init(this._el_0, [this._el_0], null);
        return this._appEl_0;
    };
    _View_OptionsComponent_Host0.prototype.injectorGetInternal = function (token, requestNodeIndex, notFoundResult) {
        if (((token === import0.OptionsComponent) && (0 === requestNodeIndex))) {
            return this._OptionsComponent_0_4.context;
        }
        return notFoundResult;
    };
    _View_OptionsComponent_Host0.prototype.detectChangesInternal = function (throwOnChange) {
        this._OptionsComponent_0_4.ngDoCheck(this, this._el_0, throwOnChange);
        this.compView_0.detectChanges(throwOnChange);
    };
    _View_OptionsComponent_Host0.prototype.destroyInternal = function () {
        this.compView_0.destroy();
    };
    _View_OptionsComponent_Host0.prototype.visitRootNodesInternal = function (cb, ctx) {
        cb(this._el_0, ctx);
    };
    return _View_OptionsComponent_Host0;
}(import1.AppView));
function viewFactory_OptionsComponent_Host0(viewUtils, parentInjector, declarationEl) {
    if ((renderType_OptionsComponent_Host === null)) {
        (renderType_OptionsComponent_Host = viewUtils.createRenderComponentType('', 0, import9.ViewEncapsulation.None, [], {}));
    }
    return new _View_OptionsComponent_Host0(viewUtils, parentInjector, declarationEl);
}
exports.OptionsComponentNgFactory = new import10.ComponentFactory('rt-demo-options', viewFactory_OptionsComponent_Host0, import0.OptionsComponent);
var styles_OptionsComponent = [import11.styles];
var renderType_OptionsComponent = null;
var _View_OptionsComponent0 = (function (_super) {
    __extends(_View_OptionsComponent0, _super);
    function _View_OptionsComponent0(viewUtils, parentInjector, declarationEl) {
        _super.call(this, _View_OptionsComponent0, renderType_OptionsComponent, import6.ViewType.COMPONENT, viewUtils, parentInjector, declarationEl, import7.ChangeDetectorStatus.CheckAlways);
    }
    _View_OptionsComponent0.prototype.createInternal = function (rootSelector) {
        var parentRenderNode = this.renderer.createViewRoot(this.declarationAppElement.nativeElement);
        this._el_0 = import4.createRenderElement(this.renderer, parentRenderNode, 'div', new import4.InlineArray4(4, 'class', 'row', 'rtSelectionArea', ''), null);
        this._RtSelectionService_0_3 = new import12.RtSelectionService();
        this._RtSelectionEventsHelper_0_4 = new import13.RtSelectionEventsHelper(this._RtSelectionService_0_3);
        this._SelectionAreaDirective_0_5 = new import14.Wrapper_SelectionAreaDirective(this._RtSelectionService_0_3, this._RtSelectionEventsHelper_0_4);
        this._query_SelectableDirective_0_0 = new import15.QueryList();
        this._query_SelectionCheckboxForDirective_0_1 = new import15.QueryList();
        this._query_SelectionAreaDirective_0_2 = new import15.QueryList();
        this._text_1 = this.renderer.createText(this._el_0, '\n	', null);
        this._el_2 = import4.createRenderElement(this.renderer, this._el_0, 'div', new import4.InlineArray2(2, 'class', 'options'), null);
        this._text_3 = this.renderer.createText(this._el_2, '\n		', null);
        this._el_4 = import4.createRenderElement(this.renderer, this._el_2, 'label', new import4.InlineArray2(2, 'class', 'checkbox-inline'), null);
        this._text_5 = this.renderer.createText(this._el_4, '\n      ', null);
        this._el_6 = import4.createRenderElement(this.renderer, this._el_4, 'input', new import4.InlineArray2(2, 'type', 'checkbox'), null);
        this._CheckboxControlValueAccessor_6_3 = new import16.Wrapper_CheckboxControlValueAccessor(this.renderer, new import21.ElementRef(this._el_6));
        this._NG_VALUE_ACCESSOR_6_4 = [this._CheckboxControlValueAccessor_6_3.context];
        this._NgModel_6_5 = new import17.Wrapper_NgModel(null, null, null, this._NG_VALUE_ACCESSOR_6_4);
        this._NgControl_6_6 = this._NgModel_6_5.context;
        this._NgControlStatus_6_7 = new import18.Wrapper_NgControlStatus(this._NgControl_6_6);
        this._text_7 = this.renderer.createText(this._el_4, 'horizontal\n    ', null);
        this._text_8 = this.renderer.createText(this._el_2, '\n		', null);
        this._el_9 = import4.createRenderElement(this.renderer, this._el_2, 'label', new import4.InlineArray2(2, 'class', 'checkbox-inline'), null);
        this._text_10 = this.renderer.createText(this._el_9, '\n      ', null);
        this._el_11 = import4.createRenderElement(this.renderer, this._el_9, 'input', new import4.InlineArray2(2, 'type', 'checkbox'), null);
        this._CheckboxControlValueAccessor_11_3 = new import16.Wrapper_CheckboxControlValueAccessor(this.renderer, new import21.ElementRef(this._el_11));
        this._NG_VALUE_ACCESSOR_11_4 = [this._CheckboxControlValueAccessor_11_3.context];
        this._NgModel_11_5 = new import17.Wrapper_NgModel(null, null, null, this._NG_VALUE_ACCESSOR_11_4);
        this._NgControl_11_6 = this._NgModel_11_5.context;
        this._NgControlStatus_11_7 = new import18.Wrapper_NgControlStatus(this._NgControl_11_6);
        this._text_12 = this.renderer.createText(this._el_9, 'toggleOnly\n    ', null);
        this._text_13 = this.renderer.createText(this._el_2, '\n		', null);
        this._el_14 = import4.createRenderElement(this.renderer, this._el_2, 'label', new import4.InlineArray2(2, 'class', 'checkbox-inline'), null);
        this._text_15 = this.renderer.createText(this._el_14, '\n      ', null);
        this._el_16 = import4.createRenderElement(this.renderer, this._el_14, 'input', new import4.InlineArray2(2, 'type', 'checkbox'), null);
        this._CheckboxControlValueAccessor_16_3 = new import16.Wrapper_CheckboxControlValueAccessor(this.renderer, new import21.ElementRef(this._el_16));
        this._NG_VALUE_ACCESSOR_16_4 = [this._CheckboxControlValueAccessor_16_3.context];
        this._NgModel_16_5 = new import17.Wrapper_NgModel(null, null, null, this._NG_VALUE_ACCESSOR_16_4);
        this._NgControl_16_6 = this._NgModel_16_5.context;
        this._NgControlStatus_16_7 = new import18.Wrapper_NgControlStatus(this._NgControl_16_6);
        this._text_17 = this.renderer.createText(this._el_14, 'multiple\n    ', null);
        this._text_18 = this.renderer.createText(this._el_2, '\n		', null);
        this._el_19 = import4.createRenderElement(this.renderer, this._el_2, 'label', new import4.InlineArray2(2, 'class', 'checkbox-inline'), null);
        this._text_20 = this.renderer.createText(this._el_19, '\n      ', null);
        this._el_21 = import4.createRenderElement(this.renderer, this._el_19, 'input', new import4.InlineArray2(2, 'type', 'checkbox'), null);
        this._CheckboxControlValueAccessor_21_3 = new import16.Wrapper_CheckboxControlValueAccessor(this.renderer, new import21.ElementRef(this._el_21));
        this._NG_VALUE_ACCESSOR_21_4 = [this._CheckboxControlValueAccessor_21_3.context];
        this._NgModel_21_5 = new import17.Wrapper_NgModel(null, null, null, this._NG_VALUE_ACCESSOR_21_4);
        this._NgControl_21_6 = this._NgModel_21_5.context;
        this._NgControlStatus_21_7 = new import18.Wrapper_NgControlStatus(this._NgControl_21_6);
        this._text_22 = this.renderer.createText(this._el_19, 'autoSelectFirst\n    ', null);
        this._text_23 = this.renderer.createText(this._el_2, '\n		', null);
        this._el_24 = import4.createRenderElement(this.renderer, this._el_2, 'button', new import4.InlineArray8(6, 'class', 'btn btn-primary', 'title', 'Reload data', 'type', 'button'), null);
        this._text_25 = this.renderer.createText(this._el_24, 'Reload data', null);
        this._text_26 = this.renderer.createText(this._el_2, '\n	', null);
        this._text_27 = this.renderer.createText(this._el_0, '\n	\n  ', null);
        this._anchor_28 = this.renderer.createTemplateAnchor(this._el_0, null);
        this._appEl_28 = new import3.AppElement(28, 0, this, this._anchor_28);
        this._TemplateRef_28_5 = new import22.TemplateRef_(this._appEl_28, viewFactory_OptionsComponent1);
        this._NgFor_28_6 = new import19.Wrapper_NgFor(this._appEl_28.vcRef, this._TemplateRef_28_5, this.parentInjector.get(import23.IterableDiffers), this.ref);
        this._text_29 = this.renderer.createText(this._el_0, '\n	\n  ', null);
        this._anchor_30 = this.renderer.createTemplateAnchor(this._el_0, null);
        this._appEl_30 = new import3.AppElement(30, 0, this, this._anchor_30);
        this._TemplateRef_30_5 = new import22.TemplateRef_(this._appEl_30, viewFactory_OptionsComponent2);
        this._NgIf_30_6 = new import20.Wrapper_NgIf(this._appEl_30.vcRef, this._TemplateRef_30_5);
        this._text_31 = this.renderer.createText(this._el_0, '\n', null);
        var disposable_0 = import4.subscribeToRenderElement(this, this._el_0, new import4.InlineArray2(2, 'keydown', null), this.eventHandler(this.handleEvent_0));
        var disposable_1 = import4.subscribeToRenderElement(this, this._el_6, new import4.InlineArray8(6, 'ngModelChange', null, 'change', null, 'blur', null), this.eventHandler(this.handleEvent_6));
        this._NgModel_6_5.subscribe(this, this.eventHandler(this.handleEvent_6), true);
        var disposable_2 = import4.subscribeToRenderElement(this, this._el_11, new import4.InlineArray8(6, 'ngModelChange', null, 'change', null, 'blur', null), this.eventHandler(this.handleEvent_11));
        this._NgModel_11_5.subscribe(this, this.eventHandler(this.handleEvent_11), true);
        var disposable_3 = import4.subscribeToRenderElement(this, this._el_16, new import4.InlineArray8(6, 'ngModelChange', null, 'change', null, 'blur', null), this.eventHandler(this.handleEvent_16));
        this._NgModel_16_5.subscribe(this, this.eventHandler(this.handleEvent_16), true);
        var disposable_4 = import4.subscribeToRenderElement(this, this._el_21, new import4.InlineArray8(6, 'ngModelChange', null, 'change', null, 'blur', null), this.eventHandler(this.handleEvent_21));
        this._NgModel_21_5.subscribe(this, this.eventHandler(this.handleEvent_21), true);
        var disposable_5 = import4.subscribeToRenderElement(this, this._el_24, new import4.InlineArray2(2, 'click', null), this.eventHandler(this.handleEvent_24));
        this.init(null, [
            this._el_0,
            this._text_1,
            this._el_2,
            this._text_3,
            this._el_4,
            this._text_5,
            this._el_6,
            this._text_7,
            this._text_8,
            this._el_9,
            this._text_10,
            this._el_11,
            this._text_12,
            this._text_13,
            this._el_14,
            this._text_15,
            this._el_16,
            this._text_17,
            this._text_18,
            this._el_19,
            this._text_20,
            this._el_21,
            this._text_22,
            this._text_23,
            this._el_24,
            this._text_25,
            this._text_26,
            this._text_27,
            this._anchor_28,
            this._text_29,
            this._anchor_30,
            this._text_31
        ], [
            disposable_0,
            disposable_1,
            disposable_2,
            disposable_3,
            disposable_4,
            disposable_5
        ]);
        return null;
    };
    _View_OptionsComponent0.prototype.injectorGetInternal = function (token, requestNodeIndex, notFoundResult) {
        if (((token === import24.CheckboxControlValueAccessor) && (6 === requestNodeIndex))) {
            return this._CheckboxControlValueAccessor_6_3.context;
        }
        if (((token === import25.NG_VALUE_ACCESSOR) && (6 === requestNodeIndex))) {
            return this._NG_VALUE_ACCESSOR_6_4;
        }
        if (((token === import26.NgModel) && (6 === requestNodeIndex))) {
            return this._NgModel_6_5.context;
        }
        if (((token === import27.NgControl) && (6 === requestNodeIndex))) {
            return this._NgControl_6_6;
        }
        if (((token === import28.NgControlStatus) && (6 === requestNodeIndex))) {
            return this._NgControlStatus_6_7.context;
        }
        if (((token === import24.CheckboxControlValueAccessor) && (11 === requestNodeIndex))) {
            return this._CheckboxControlValueAccessor_11_3.context;
        }
        if (((token === import25.NG_VALUE_ACCESSOR) && (11 === requestNodeIndex))) {
            return this._NG_VALUE_ACCESSOR_11_4;
        }
        if (((token === import26.NgModel) && (11 === requestNodeIndex))) {
            return this._NgModel_11_5.context;
        }
        if (((token === import27.NgControl) && (11 === requestNodeIndex))) {
            return this._NgControl_11_6;
        }
        if (((token === import28.NgControlStatus) && (11 === requestNodeIndex))) {
            return this._NgControlStatus_11_7.context;
        }
        if (((token === import24.CheckboxControlValueAccessor) && (16 === requestNodeIndex))) {
            return this._CheckboxControlValueAccessor_16_3.context;
        }
        if (((token === import25.NG_VALUE_ACCESSOR) && (16 === requestNodeIndex))) {
            return this._NG_VALUE_ACCESSOR_16_4;
        }
        if (((token === import26.NgModel) && (16 === requestNodeIndex))) {
            return this._NgModel_16_5.context;
        }
        if (((token === import27.NgControl) && (16 === requestNodeIndex))) {
            return this._NgControl_16_6;
        }
        if (((token === import28.NgControlStatus) && (16 === requestNodeIndex))) {
            return this._NgControlStatus_16_7.context;
        }
        if (((token === import24.CheckboxControlValueAccessor) && (21 === requestNodeIndex))) {
            return this._CheckboxControlValueAccessor_21_3.context;
        }
        if (((token === import25.NG_VALUE_ACCESSOR) && (21 === requestNodeIndex))) {
            return this._NG_VALUE_ACCESSOR_21_4;
        }
        if (((token === import26.NgModel) && (21 === requestNodeIndex))) {
            return this._NgModel_21_5.context;
        }
        if (((token === import27.NgControl) && (21 === requestNodeIndex))) {
            return this._NgControl_21_6;
        }
        if (((token === import28.NgControlStatus) && (21 === requestNodeIndex))) {
            return this._NgControlStatus_21_7.context;
        }
        if (((token === import22.TemplateRef) && (28 === requestNodeIndex))) {
            return this._TemplateRef_28_5;
        }
        if (((token === import29.NgFor) && (28 === requestNodeIndex))) {
            return this._NgFor_28_6.context;
        }
        if (((token === import22.TemplateRef) && (30 === requestNodeIndex))) {
            return this._TemplateRef_30_5;
        }
        if (((token === import30.NgIf) && (30 === requestNodeIndex))) {
            return this._NgIf_30_6.context;
        }
        if (((token === import12.RtSelectionService) && ((0 <= requestNodeIndex) && (requestNodeIndex <= 31)))) {
            return this._RtSelectionService_0_3;
        }
        if (((token === import13.RtSelectionEventsHelper) && ((0 <= requestNodeIndex) && (requestNodeIndex <= 31)))) {
            return this._RtSelectionEventsHelper_0_4;
        }
        if (((token === import31.SelectionAreaDirective) && ((0 <= requestNodeIndex) && (requestNodeIndex <= 31)))) {
            return this._SelectionAreaDirective_0_5.context;
        }
        return notFoundResult;
    };
    _View_OptionsComponent0.prototype.detectChangesInternal = function (throwOnChange) {
        var currVal_0_0_0 = this.context.horizontal;
        this._SelectionAreaDirective_0_5.check_horizontal(currVal_0_0_0, throwOnChange, false);
        var currVal_0_0_1 = this.context.multiple;
        this._SelectionAreaDirective_0_5.check_multiple(currVal_0_0_1, throwOnChange, false);
        var currVal_0_0_2 = this.context.toggleOnly;
        this._SelectionAreaDirective_0_5.check_toggleOnly(currVal_0_0_2, throwOnChange, false);
        var currVal_0_0_3 = this.context.autoSelectFirst;
        this._SelectionAreaDirective_0_5.check_autoSelectFirst(currVal_0_0_3, throwOnChange, false);
        this._SelectionAreaDirective_0_5.ngDoCheck(this, this._el_0, throwOnChange);
        this._CheckboxControlValueAccessor_6_3.ngDoCheck(this, this._el_6, throwOnChange);
        var currVal_6_1_0 = this.context.horizontal;
        this._NgModel_6_5.check_model(currVal_6_1_0, throwOnChange, false);
        this._NgModel_6_5.ngDoCheck(this, this._el_6, throwOnChange);
        this._NgControlStatus_6_7.ngDoCheck(this, this._el_6, throwOnChange);
        this._CheckboxControlValueAccessor_11_3.ngDoCheck(this, this._el_11, throwOnChange);
        var currVal_11_1_0 = this.context.toggleOnly;
        this._NgModel_11_5.check_model(currVal_11_1_0, throwOnChange, false);
        this._NgModel_11_5.ngDoCheck(this, this._el_11, throwOnChange);
        this._NgControlStatus_11_7.ngDoCheck(this, this._el_11, throwOnChange);
        this._CheckboxControlValueAccessor_16_3.ngDoCheck(this, this._el_16, throwOnChange);
        var currVal_16_1_0 = this.context.multiple;
        this._NgModel_16_5.check_model(currVal_16_1_0, throwOnChange, false);
        this._NgModel_16_5.ngDoCheck(this, this._el_16, throwOnChange);
        this._NgControlStatus_16_7.ngDoCheck(this, this._el_16, throwOnChange);
        this._CheckboxControlValueAccessor_21_3.ngDoCheck(this, this._el_21, throwOnChange);
        var currVal_21_1_0 = this.context.autoSelectFirst;
        this._NgModel_21_5.check_model(currVal_21_1_0, throwOnChange, false);
        this._NgModel_21_5.ngDoCheck(this, this._el_21, throwOnChange);
        this._NgControlStatus_21_7.ngDoCheck(this, this._el_21, throwOnChange);
        var currVal_28_0_0 = this.context.countries;
        this._NgFor_28_6.check_ngForOf(currVal_28_0_0, throwOnChange, false);
        this._NgFor_28_6.ngDoCheck(this, this._anchor_28, throwOnChange);
        var currVal_30_0_0 = !this.context.countries.length;
        this._NgIf_30_6.check_ngIf(currVal_30_0_0, throwOnChange, false);
        this._NgIf_30_6.ngDoCheck(this, this._anchor_30, throwOnChange);
        this._appEl_28.detectChangesInNestedViews(throwOnChange);
        this._appEl_30.detectChangesInNestedViews(throwOnChange);
        if (!throwOnChange) {
            if (this._query_SelectableDirective_0_0.dirty) {
                this._query_SelectableDirective_0_0.reset([this._appEl_28.mapNestedViews(_View_OptionsComponent1, function (nestedView) {
                        return [nestedView._SelectableDirective_0_3.context];
                    })]);
                this._SelectionAreaDirective_0_5.context.selectableItems = this._query_SelectableDirective_0_0;
                this._query_SelectableDirective_0_0.notifyOnChanges();
            }
            if (this._query_SelectionCheckboxForDirective_0_1.dirty) {
                this._query_SelectionCheckboxForDirective_0_1.reset([]);
                this._SelectionAreaDirective_0_5.context.childSelectionCheckboxes = this._query_SelectionCheckboxForDirective_0_1;
                this._query_SelectionCheckboxForDirective_0_1.notifyOnChanges();
            }
            if (this._query_SelectionAreaDirective_0_2.dirty) {
                this._query_SelectionAreaDirective_0_2.reset([this._SelectionAreaDirective_0_5.context]);
                this._SelectionAreaDirective_0_5.context.childSelectionAreas = this._query_SelectionAreaDirective_0_2;
                this._query_SelectionAreaDirective_0_2.notifyOnChanges();
            }
            if ((this.numberOfChecks === 0)) {
                this._SelectionAreaDirective_0_5.context.ngAfterContentInit();
            }
        }
        this._SelectionAreaDirective_0_5.checkHost(this, this, this._el_0, throwOnChange);
        this._NgControlStatus_6_7.checkHost(this, this, this._el_6, throwOnChange);
        this._NgControlStatus_11_7.checkHost(this, this, this._el_11, throwOnChange);
        this._NgControlStatus_16_7.checkHost(this, this, this._el_16, throwOnChange);
        this._NgControlStatus_21_7.checkHost(this, this, this._el_21, throwOnChange);
    };
    _View_OptionsComponent0.prototype.destroyInternal = function () {
        this._appEl_28.destroyNestedViews();
        this._appEl_30.destroyNestedViews();
        this._NgModel_6_5.ngOnDestroy();
        this._NgModel_11_5.ngOnDestroy();
        this._NgModel_16_5.ngOnDestroy();
        this._NgModel_21_5.ngOnDestroy();
        this._SelectionAreaDirective_0_5.ngOnDestroy();
    };
    _View_OptionsComponent0.prototype.handleEvent_0 = function (eventName, $event) {
        this.markPathToRootAsCheckOnce();
        var result = true;
        result = (this._SelectionAreaDirective_0_5.handleEvent(eventName, $event) && result);
        return result;
    };
    _View_OptionsComponent0.prototype.handleEvent_6 = function (eventName, $event) {
        this.markPathToRootAsCheckOnce();
        var result = true;
        result = (this._CheckboxControlValueAccessor_6_3.handleEvent(eventName, $event) && result);
        if ((eventName == 'ngModelChange')) {
            var pd_sub_0 = ((this.context.horizontal = $event) !== false);
            result = (pd_sub_0 && result);
        }
        return result;
    };
    _View_OptionsComponent0.prototype.handleEvent_11 = function (eventName, $event) {
        this.markPathToRootAsCheckOnce();
        var result = true;
        result = (this._CheckboxControlValueAccessor_11_3.handleEvent(eventName, $event) && result);
        if ((eventName == 'ngModelChange')) {
            var pd_sub_0 = ((this.context.toggleOnly = $event) !== false);
            result = (pd_sub_0 && result);
        }
        return result;
    };
    _View_OptionsComponent0.prototype.handleEvent_16 = function (eventName, $event) {
        this.markPathToRootAsCheckOnce();
        var result = true;
        result = (this._CheckboxControlValueAccessor_16_3.handleEvent(eventName, $event) && result);
        if ((eventName == 'ngModelChange')) {
            var pd_sub_0 = ((this.context.multiple = $event) !== false);
            result = (pd_sub_0 && result);
        }
        return result;
    };
    _View_OptionsComponent0.prototype.handleEvent_21 = function (eventName, $event) {
        this.markPathToRootAsCheckOnce();
        var result = true;
        result = (this._CheckboxControlValueAccessor_21_3.handleEvent(eventName, $event) && result);
        if ((eventName == 'ngModelChange')) {
            var pd_sub_0 = ((this.context.autoSelectFirst = $event) !== false);
            result = (pd_sub_0 && result);
        }
        return result;
    };
    _View_OptionsComponent0.prototype.handleEvent_24 = function (eventName, $event) {
        this.markPathToRootAsCheckOnce();
        var result = true;
        if ((eventName == 'click')) {
            var pd_sub_0 = (this.context.reload() !== false);
            result = (pd_sub_0 && result);
        }
        return result;
    };
    return _View_OptionsComponent0;
}(import1.AppView));
function viewFactory_OptionsComponent0(viewUtils, parentInjector, declarationEl) {
    if ((renderType_OptionsComponent === null)) {
        (renderType_OptionsComponent = viewUtils.createRenderComponentType('', 0, import9.ViewEncapsulation.Emulated, styles_OptionsComponent, {}));
    }
    return new _View_OptionsComponent0(viewUtils, parentInjector, declarationEl);
}
exports.viewFactory_OptionsComponent0 = viewFactory_OptionsComponent0;
var _View_OptionsComponent1 = (function (_super) {
    __extends(_View_OptionsComponent1, _super);
    function _View_OptionsComponent1(viewUtils, parentInjector, declarationEl) {
        _super.call(this, _View_OptionsComponent1, renderType_OptionsComponent, import6.ViewType.EMBEDDED, viewUtils, parentInjector, declarationEl, import7.ChangeDetectorStatus.CheckAlways);
        this._expr_6 = import7.UNINITIALIZED;
        this._expr_7 = import7.UNINITIALIZED;
    }
    _View_OptionsComponent1.prototype.createInternal = function (rootSelector) {
        this._el_0 = import4.createRenderElement(this.renderer, null, 'div', new import4.InlineArray2(2, 'class', 'col-md-3'), null);
        this._SelectableDirective_0_3 = new import32.Wrapper_SelectableDirective(this.parent._RtSelectionEventsHelper_0_4);
        this._text_1 = this.renderer.createText(this._el_0, '\n		', null);
        this._el_2 = import4.createRenderElement(this.renderer, this._el_0, 'div', new import4.InlineArray2(2, 'class', 'item'), null);
        this._text_3 = this.renderer.createText(this._el_2, '', null);
        this._text_4 = this.renderer.createText(this._el_0, '\n	', null);
        var disposable_0 = import4.subscribeToRenderElement(this, this._el_0, new import4.InlineArray2(2, 'mouseup', null), this.eventHandler(this.handleEvent_0));
        this.init(this._el_0, [
            this._el_0,
            this._text_1,
            this._el_2,
            this._text_3,
            this._text_4
        ], [disposable_0]);
        return null;
    };
    _View_OptionsComponent1.prototype.injectorGetInternal = function (token, requestNodeIndex, notFoundResult) {
        if (((token === import33.SelectableDirective) && ((0 <= requestNodeIndex) && (requestNodeIndex <= 4)))) {
            return this._SelectableDirective_0_3.context;
        }
        return notFoundResult;
    };
    _View_OptionsComponent1.prototype.detectChangesInternal = function (throwOnChange) {
        var currVal_0_0_0 = this.context.$implicit;
        this._SelectableDirective_0_3.check_item(currVal_0_0_0, throwOnChange, false);
        this._SelectableDirective_0_3.ngDoCheck(this, this._el_0, throwOnChange);
        var currVal_6 = this._SelectableDirective_0_3.context.selected;
        if (import4.checkBinding(throwOnChange, this._expr_6, currVal_6)) {
            this.renderer.setElementClass(this._el_2, 'selected', currVal_6);
            this._expr_6 = currVal_6;
        }
        var currVal_7 = import4.interpolate(1, '\n			', this.context.$implicit.name, '\n		');
        if (import4.checkBinding(throwOnChange, this._expr_7, currVal_7)) {
            this.renderer.setText(this._text_3, currVal_7);
            this._expr_7 = currVal_7;
        }
    };
    _View_OptionsComponent1.prototype.dirtyParentQueriesInternal = function () {
        this.parent._query_SelectableDirective_0_0.setDirty();
    };
    _View_OptionsComponent1.prototype.destroyInternal = function () {
        this._SelectableDirective_0_3.ngOnDestroy();
    };
    _View_OptionsComponent1.prototype.visitRootNodesInternal = function (cb, ctx) {
        cb(this._el_0, ctx);
    };
    _View_OptionsComponent1.prototype.handleEvent_0 = function (eventName, $event) {
        this.markPathToRootAsCheckOnce();
        var result = true;
        result = (this._SelectableDirective_0_3.handleEvent(eventName, $event) && result);
        return result;
    };
    return _View_OptionsComponent1;
}(import1.AppView));
function viewFactory_OptionsComponent1(viewUtils, parentInjector, declarationEl) {
    return new _View_OptionsComponent1(viewUtils, parentInjector, declarationEl);
}
var _View_OptionsComponent2 = (function (_super) {
    __extends(_View_OptionsComponent2, _super);
    function _View_OptionsComponent2(viewUtils, parentInjector, declarationEl) {
        _super.call(this, _View_OptionsComponent2, renderType_OptionsComponent, import6.ViewType.EMBEDDED, viewUtils, parentInjector, declarationEl, import7.ChangeDetectorStatus.CheckAlways);
    }
    _View_OptionsComponent2.prototype.createInternal = function (rootSelector) {
        this._el_0 = import4.createRenderElement(this.renderer, null, 'div', new import4.InlineArray2(2, 'class', 'line-progress'), null);
        this._text_1 = this.renderer.createText(this._el_0, '\n	', null);
        this.init(this._el_0, [
            this._el_0,
            this._text_1
        ], null);
        return null;
    };
    _View_OptionsComponent2.prototype.visitRootNodesInternal = function (cb, ctx) {
        cb(this._el_0, ctx);
    };
    return _View_OptionsComponent2;
}(import1.AppView));
function viewFactory_OptionsComponent2(viewUtils, parentInjector, declarationEl) {
    return new _View_OptionsComponent2(viewUtils, parentInjector, declarationEl);
}


/***/ },

/***/ "./src/compiled/src/app/+selection/select-all/select-all.component.ngfactory.ts":
/***/ function(module, exports, __webpack_require__) {

"use strict";
/**
 * This file is generated by the Angular 2 template compiler.
 * Do not edit.
 */
/* tslint:disable */
"use strict";
var import0 = __webpack_require__("./src/app/+selection/select-all/select-all.component.ts");
var import1 = __webpack_require__("./node_modules/@angular/core/src/linker/view.js");
var import3 = __webpack_require__("./node_modules/@angular/core/src/linker/element.js");
var import4 = __webpack_require__("./node_modules/@angular/core/src/linker/view_utils.js");
var import6 = __webpack_require__("./node_modules/@angular/core/src/linker/view_type.js");
var import7 = __webpack_require__("./node_modules/@angular/core/src/change_detection/change_detection.js");
var import8 = __webpack_require__("./src/app/+selection/countries.service.ts");
var import9 = __webpack_require__("./node_modules/@angular/core/src/metadata/view.js");
var import10 = __webpack_require__("./node_modules/@angular/core/src/linker/component_factory.js");
var import11 = __webpack_require__("./node_modules/right-angled/src/core/selection/selection-service.js");
var import12 = __webpack_require__("./node_modules/right-angled/src/core/providers.js");
var import13 = __webpack_require__("./src/compiled/node_modules/right-angled/src/selection-directives/selection-area.directive.ngfactory.ts");
var import14 = __webpack_require__("./node_modules/@angular/core/src/linker/query_list.js");
var import15 = __webpack_require__("./src/compiled/node_modules/@angular/common/src/directives/ng_for.ngfactory.ts");
var import16 = __webpack_require__("./node_modules/@angular/common/src/pipes/async_pipe.js");
var import17 = __webpack_require__("./node_modules/@angular/core/src/linker/template_ref.js");
var import18 = __webpack_require__("./node_modules/@angular/core/src/change_detection/differs/iterable_differs.js");
var import19 = __webpack_require__("./node_modules/@angular/common/src/directives/ng_for.js");
var import20 = __webpack_require__("./node_modules/right-angled/src/selection-directives/selection-area.directive.js");
var import21 = __webpack_require__("./src/compiled/node_modules/right-angled/src/selection-directives/selectable.directive.ngfactory.ts");
var import22 = __webpack_require__("./src/compiled/node_modules/@angular/common/src/directives/ng_if.ngfactory.ts");
var import23 = __webpack_require__("./node_modules/right-angled/src/selection-directives/selectable.directive.js");
var import24 = __webpack_require__("./node_modules/@angular/common/src/directives/ng_if.js");
var Wrapper_SelectAllComponent = (function () {
    function Wrapper_SelectAllComponent(p0) {
        this._changed = false;
        this.context = new import0.SelectAllComponent(p0);
    }
    Wrapper_SelectAllComponent.prototype.ngOnDetach = function (view, componentView, el) {
    };
    Wrapper_SelectAllComponent.prototype.ngOnDestroy = function () {
    };
    Wrapper_SelectAllComponent.prototype.ngDoCheck = function (view, el, throwOnChange) {
        var changed = this._changed;
        this._changed = false;
        return changed;
    };
    Wrapper_SelectAllComponent.prototype.checkHost = function (view, componentView, el, throwOnChange) {
    };
    Wrapper_SelectAllComponent.prototype.handleEvent = function (eventName, $event) {
        var result = true;
        return result;
    };
    Wrapper_SelectAllComponent.prototype.subscribe = function (view, _eventHandler) {
        this._eventHandler = _eventHandler;
    };
    return Wrapper_SelectAllComponent;
}());
exports.Wrapper_SelectAllComponent = Wrapper_SelectAllComponent;
var renderType_SelectAllComponent_Host = null;
var _View_SelectAllComponent_Host0 = (function (_super) {
    __extends(_View_SelectAllComponent_Host0, _super);
    function _View_SelectAllComponent_Host0(viewUtils, parentInjector, declarationEl) {
        _super.call(this, _View_SelectAllComponent_Host0, renderType_SelectAllComponent_Host, import6.ViewType.HOST, viewUtils, parentInjector, declarationEl, import7.ChangeDetectorStatus.CheckAlways);
    }
    _View_SelectAllComponent_Host0.prototype.createInternal = function (rootSelector) {
        this._el_0 = import4.selectOrCreateRenderHostElement(this.renderer, 'rt-demo-select-all', import4.EMPTY_INLINE_ARRAY, rootSelector, null);
        this._appEl_0 = new import3.AppElement(0, null, this, this._el_0);
        this.compView_0 = viewFactory_SelectAllComponent0(this.viewUtils, this.injector(0), this._appEl_0);
        this._SelectAllComponent_0_4 = new Wrapper_SelectAllComponent(this.parentInjector.get(import8.CountriesService));
        this._appEl_0.initComponent(this._SelectAllComponent_0_4.context, this.compView_0);
        this.compView_0.create(this._SelectAllComponent_0_4.context, null);
        this.init(this._el_0, [this._el_0], null);
        return this._appEl_0;
    };
    _View_SelectAllComponent_Host0.prototype.injectorGetInternal = function (token, requestNodeIndex, notFoundResult) {
        if (((token === import0.SelectAllComponent) && (0 === requestNodeIndex))) {
            return this._SelectAllComponent_0_4.context;
        }
        return notFoundResult;
    };
    _View_SelectAllComponent_Host0.prototype.detectChangesInternal = function (throwOnChange) {
        this._SelectAllComponent_0_4.ngDoCheck(this, this._el_0, throwOnChange);
        this.compView_0.detectChanges(throwOnChange);
    };
    _View_SelectAllComponent_Host0.prototype.destroyInternal = function () {
        this.compView_0.destroy();
    };
    _View_SelectAllComponent_Host0.prototype.visitRootNodesInternal = function (cb, ctx) {
        cb(this._el_0, ctx);
    };
    return _View_SelectAllComponent_Host0;
}(import1.AppView));
function viewFactory_SelectAllComponent_Host0(viewUtils, parentInjector, declarationEl) {
    if ((renderType_SelectAllComponent_Host === null)) {
        (renderType_SelectAllComponent_Host = viewUtils.createRenderComponentType('', 0, import9.ViewEncapsulation.None, [], {}));
    }
    return new _View_SelectAllComponent_Host0(viewUtils, parentInjector, declarationEl);
}
exports.SelectAllComponentNgFactory = new import10.ComponentFactory('rt-demo-select-all', viewFactory_SelectAllComponent_Host0, import0.SelectAllComponent);
var styles_SelectAllComponent = [];
var renderType_SelectAllComponent = null;
var _View_SelectAllComponent0 = (function (_super) {
    __extends(_View_SelectAllComponent0, _super);
    function _View_SelectAllComponent0(viewUtils, parentInjector, declarationEl) {
        _super.call(this, _View_SelectAllComponent0, renderType_SelectAllComponent, import6.ViewType.COMPONENT, viewUtils, parentInjector, declarationEl, import7.ChangeDetectorStatus.CheckAlways);
    }
    _View_SelectAllComponent0.prototype.createInternal = function (rootSelector) {
        var parentRenderNode = this.renderer.createViewRoot(this.declarationAppElement.nativeElement);
        this._el_0 = import4.createRenderElement(this.renderer, parentRenderNode, 'div', new import4.InlineArray4(4, 'class', 'row', 'rtSelectionArea', ''), null);
        this._RtSelectionService_0_3 = new import11.RtSelectionService();
        this._RtSelectionEventsHelper_0_4 = new import12.RtSelectionEventsHelper(this._RtSelectionService_0_3);
        this._SelectionAreaDirective_0_5 = new import13.Wrapper_SelectionAreaDirective(this._RtSelectionService_0_3, this._RtSelectionEventsHelper_0_4);
        this._query_SelectableDirective_0_0 = new import14.QueryList();
        this._query_SelectionCheckboxForDirective_0_1 = new import14.QueryList();
        this._query_SelectionAreaDirective_0_2 = new import14.QueryList();
        this._text_1 = this.renderer.createText(this._el_0, '\n  ', null);
        this._el_2 = import4.createRenderElement(this.renderer, this._el_0, 'div', new import4.InlineArray2(2, 'class', 'col-md-12 toolbar'), null);
        this._text_3 = this.renderer.createText(this._el_2, '\n    ', null);
        this._el_4 = import4.createRenderElement(this.renderer, this._el_2, 'ul', import4.EMPTY_INLINE_ARRAY, null);
        this._text_5 = this.renderer.createText(this._el_4, '\n      ', null);
        this._el_6 = import4.createRenderElement(this.renderer, this._el_4, 'li', import4.EMPTY_INLINE_ARRAY, null);
        this._text_7 = this.renderer.createText(this._el_6, '\n        ', null);
        this._el_8 = import4.createRenderElement(this.renderer, this._el_6, 'button', new import4.InlineArray4(4, 'class', 'btn btn-primary', 'title', 'Select all items'), null);
        this._text_9 = this.renderer.createText(this._el_8, 'Select all', null);
        this._text_10 = this.renderer.createText(this._el_6, '\n      ', null);
        this._text_11 = this.renderer.createText(this._el_4, '\n      ', null);
        this._el_12 = import4.createRenderElement(this.renderer, this._el_4, 'li', import4.EMPTY_INLINE_ARRAY, null);
        this._text_13 = this.renderer.createText(this._el_12, '\n        ', null);
        this._el_14 = import4.createRenderElement(this.renderer, this._el_12, 'button', new import4.InlineArray4(4, 'class', 'btn btn-primary', 'title', 'Deselect all items'), null);
        this._text_15 = this.renderer.createText(this._el_14, 'Deselect all', null);
        this._text_16 = this.renderer.createText(this._el_12, '\n      ', null);
        this._text_17 = this.renderer.createText(this._el_4, '\n      ', null);
        this._el_18 = import4.createRenderElement(this.renderer, this._el_4, 'li', import4.EMPTY_INLINE_ARRAY, null);
        this._text_19 = this.renderer.createText(this._el_18, '\n        ', null);
        this._el_20 = import4.createRenderElement(this.renderer, this._el_18, 'button', new import4.InlineArray4(4, 'class', 'btn btn-primary', 'title', 'Select all items recursivelly'), null);
        this._text_21 = this.renderer.createText(this._el_20, 'Select recursivelly', null);
        this._text_22 = this.renderer.createText(this._el_18, '\n      ', null);
        this._text_23 = this.renderer.createText(this._el_4, '\n      ', null);
        this._el_24 = import4.createRenderElement(this.renderer, this._el_4, 'li', import4.EMPTY_INLINE_ARRAY, null);
        this._text_25 = this.renderer.createText(this._el_24, '\n        ', null);
        this._el_26 = import4.createRenderElement(this.renderer, this._el_24, 'button', new import4.InlineArray4(4, 'class', 'btn btn-primary', 'title', 'Deselect all items recursivelly'), null);
        this._text_27 = this.renderer.createText(this._el_26, 'Deselect recursivelly', null);
        this._text_28 = this.renderer.createText(this._el_24, '\n      ', null);
        this._text_29 = this.renderer.createText(this._el_4, '\n    ', null);
        this._text_30 = this.renderer.createText(this._el_2, '\n  ', null);
        this._text_31 = this.renderer.createText(this._el_0, '\n  ', null);
        this._anchor_32 = this.renderer.createTemplateAnchor(this._el_0, null);
        this._appEl_32 = new import3.AppElement(32, 0, this, this._anchor_32);
        this._TemplateRef_32_5 = new import17.TemplateRef_(this._appEl_32, viewFactory_SelectAllComponent1);
        this._NgFor_32_6 = new import15.Wrapper_NgFor(this._appEl_32.vcRef, this._TemplateRef_32_5, this.parentInjector.get(import18.IterableDiffers), this.ref);
        this._text_33 = this.renderer.createText(this._el_0, '\n', null);
        var disposable_0 = import4.subscribeToRenderElement(this, this._el_0, new import4.InlineArray2(2, 'keydown', null), this.eventHandler(this.handleEvent_0));
        var disposable_1 = import4.subscribeToRenderElement(this, this._el_8, new import4.InlineArray2(2, 'click', null), this.eventHandler(this.handleEvent_8));
        var disposable_2 = import4.subscribeToRenderElement(this, this._el_14, new import4.InlineArray2(2, 'click', null), this.eventHandler(this.handleEvent_14));
        var disposable_3 = import4.subscribeToRenderElement(this, this._el_20, new import4.InlineArray2(2, 'click', null), this.eventHandler(this.handleEvent_20));
        var disposable_4 = import4.subscribeToRenderElement(this, this._el_26, new import4.InlineArray2(2, 'click', null), this.eventHandler(this.handleEvent_26));
        this._pipe_async_0 = new import16.AsyncPipe(this.ref);
        this.init(null, [
            this._el_0,
            this._text_1,
            this._el_2,
            this._text_3,
            this._el_4,
            this._text_5,
            this._el_6,
            this._text_7,
            this._el_8,
            this._text_9,
            this._text_10,
            this._text_11,
            this._el_12,
            this._text_13,
            this._el_14,
            this._text_15,
            this._text_16,
            this._text_17,
            this._el_18,
            this._text_19,
            this._el_20,
            this._text_21,
            this._text_22,
            this._text_23,
            this._el_24,
            this._text_25,
            this._el_26,
            this._text_27,
            this._text_28,
            this._text_29,
            this._text_30,
            this._text_31,
            this._anchor_32,
            this._text_33
        ], [
            disposable_0,
            disposable_1,
            disposable_2,
            disposable_3,
            disposable_4
        ]);
        return null;
    };
    _View_SelectAllComponent0.prototype.injectorGetInternal = function (token, requestNodeIndex, notFoundResult) {
        if (((token === import17.TemplateRef) && (32 === requestNodeIndex))) {
            return this._TemplateRef_32_5;
        }
        if (((token === import19.NgFor) && (32 === requestNodeIndex))) {
            return this._NgFor_32_6.context;
        }
        if (((token === import11.RtSelectionService) && ((0 <= requestNodeIndex) && (requestNodeIndex <= 33)))) {
            return this._RtSelectionService_0_3;
        }
        if (((token === import12.RtSelectionEventsHelper) && ((0 <= requestNodeIndex) && (requestNodeIndex <= 33)))) {
            return this._RtSelectionEventsHelper_0_4;
        }
        if (((token === import20.SelectionAreaDirective) && ((0 <= requestNodeIndex) && (requestNodeIndex <= 33)))) {
            return this._SelectionAreaDirective_0_5.context;
        }
        return notFoundResult;
    };
    _View_SelectAllComponent0.prototype.detectChangesInternal = function (throwOnChange) {
        var valUnwrapper = new import7.ValueUnwrapper();
        this._SelectionAreaDirective_0_5.ngDoCheck(this, this._el_0, throwOnChange);
        valUnwrapper.reset();
        var currVal_32_0_0 = valUnwrapper.unwrap(this._pipe_async_0.transform(this.context.regions));
        this._NgFor_32_6.check_ngForOf(currVal_32_0_0, throwOnChange, valUnwrapper.hasWrappedValue);
        this._NgFor_32_6.ngDoCheck(this, this._anchor_32, throwOnChange);
        this._appEl_32.detectChangesInNestedViews(throwOnChange);
        if (!throwOnChange) {
            if (this._query_SelectableDirective_0_0.dirty) {
                this._query_SelectableDirective_0_0.reset([this._appEl_32.mapNestedViews(_View_SelectAllComponent1, function (nestedView) {
                        return [nestedView._SelectableDirective_2_3.context];
                    })]);
                this._SelectionAreaDirective_0_5.context.selectableItems = this._query_SelectableDirective_0_0;
                this._query_SelectableDirective_0_0.notifyOnChanges();
            }
            if (this._query_SelectionCheckboxForDirective_0_1.dirty) {
                this._query_SelectionCheckboxForDirective_0_1.reset([]);
                this._SelectionAreaDirective_0_5.context.childSelectionCheckboxes = this._query_SelectionCheckboxForDirective_0_1;
                this._query_SelectionCheckboxForDirective_0_1.notifyOnChanges();
            }
            if (this._query_SelectionAreaDirective_0_2.dirty) {
                this._query_SelectionAreaDirective_0_2.reset([
                    this._SelectionAreaDirective_0_5.context,
                    this._appEl_32.mapNestedViews(_View_SelectAllComponent1, function (nestedView) {
                        return [nestedView._appEl_5.mapNestedViews(_View_SelectAllComponent2, function (nestedView) {
                                return [nestedView._SelectionAreaDirective_0_5.context];
                            })];
                    })
                ]);
                this._SelectionAreaDirective_0_5.context.childSelectionAreas = this._query_SelectionAreaDirective_0_2;
                this._query_SelectionAreaDirective_0_2.notifyOnChanges();
            }
            if ((this.numberOfChecks === 0)) {
                this._SelectionAreaDirective_0_5.context.ngAfterContentInit();
            }
        }
        this._SelectionAreaDirective_0_5.checkHost(this, this, this._el_0, throwOnChange);
    };
    _View_SelectAllComponent0.prototype.destroyInternal = function () {
        this._appEl_32.destroyNestedViews();
        this._SelectionAreaDirective_0_5.ngOnDestroy();
        this._pipe_async_0.ngOnDestroy();
    };
    _View_SelectAllComponent0.prototype.handleEvent_0 = function (eventName, $event) {
        this.markPathToRootAsCheckOnce();
        var result = true;
        result = (this._SelectionAreaDirective_0_5.handleEvent(eventName, $event) && result);
        return result;
    };
    _View_SelectAllComponent0.prototype.handleEvent_8 = function (eventName, $event) {
        this.markPathToRootAsCheckOnce();
        var result = true;
        if ((eventName == 'click')) {
            var pd_sub_0 = (this._SelectionAreaDirective_0_5.context.selectionService.selectAll(false) !== false);
            result = (pd_sub_0 && result);
        }
        return result;
    };
    _View_SelectAllComponent0.prototype.handleEvent_14 = function (eventName, $event) {
        this.markPathToRootAsCheckOnce();
        var result = true;
        if ((eventName == 'click')) {
            var pd_sub_0 = (this._SelectionAreaDirective_0_5.context.selectionService.deselectAll(false) !== false);
            result = (pd_sub_0 && result);
        }
        return result;
    };
    _View_SelectAllComponent0.prototype.handleEvent_20 = function (eventName, $event) {
        this.markPathToRootAsCheckOnce();
        var result = true;
        if ((eventName == 'click')) {
            var pd_sub_0 = (this._SelectionAreaDirective_0_5.context.selectionService.selectAll() !== false);
            result = (pd_sub_0 && result);
        }
        return result;
    };
    _View_SelectAllComponent0.prototype.handleEvent_26 = function (eventName, $event) {
        this.markPathToRootAsCheckOnce();
        var result = true;
        if ((eventName == 'click')) {
            var pd_sub_0 = (this._SelectionAreaDirective_0_5.context.selectionService.deselectAll() !== false);
            result = (pd_sub_0 && result);
        }
        return result;
    };
    return _View_SelectAllComponent0;
}(import1.AppView));
function viewFactory_SelectAllComponent0(viewUtils, parentInjector, declarationEl) {
    if ((renderType_SelectAllComponent === null)) {
        (renderType_SelectAllComponent = viewUtils.createRenderComponentType('', 0, import9.ViewEncapsulation.None, styles_SelectAllComponent, {}));
    }
    return new _View_SelectAllComponent0(viewUtils, parentInjector, declarationEl);
}
exports.viewFactory_SelectAllComponent0 = viewFactory_SelectAllComponent0;
var _View_SelectAllComponent1 = (function (_super) {
    __extends(_View_SelectAllComponent1, _super);
    function _View_SelectAllComponent1(viewUtils, parentInjector, declarationEl) {
        _super.call(this, _View_SelectAllComponent1, renderType_SelectAllComponent, import6.ViewType.EMBEDDED, viewUtils, parentInjector, declarationEl, import7.ChangeDetectorStatus.CheckAlways);
        this._expr_11 = import7.UNINITIALIZED;
        this._expr_12 = import7.UNINITIALIZED;
    }
    _View_SelectAllComponent1.prototype.createInternal = function (rootSelector) {
        this._el_0 = import4.createRenderElement(this.renderer, null, 'div', new import4.InlineArray2(2, 'class', 'col-md-12'), null);
        this._text_1 = this.renderer.createText(this._el_0, '\n    ', null);
        this._el_2 = import4.createRenderElement(this.renderer, this._el_0, 'div', new import4.InlineArray2(2, 'class', 'col-md-12 item'), null);
        this._SelectableDirective_2_3 = new import21.Wrapper_SelectableDirective(this.parent._RtSelectionEventsHelper_0_4);
        this._text_3 = this.renderer.createText(this._el_2, '', null);
        this._text_4 = this.renderer.createText(this._el_0, '\n\n    ', null);
        this._anchor_5 = this.renderer.createTemplateAnchor(this._el_0, null);
        this._appEl_5 = new import3.AppElement(5, 0, this, this._anchor_5);
        this._TemplateRef_5_5 = new import17.TemplateRef_(this._appEl_5, viewFactory_SelectAllComponent2);
        this._NgIf_5_6 = new import22.Wrapper_NgIf(this._appEl_5.vcRef, this._TemplateRef_5_5);
        this._text_6 = this.renderer.createText(this._el_0, '\n  ', null);
        var disposable_0 = import4.subscribeToRenderElement(this, this._el_2, new import4.InlineArray2(2, 'mouseup', null), this.eventHandler(this.handleEvent_2));
        this.init(this._el_0, [
            this._el_0,
            this._text_1,
            this._el_2,
            this._text_3,
            this._text_4,
            this._anchor_5,
            this._text_6
        ], [disposable_0]);
        return null;
    };
    _View_SelectAllComponent1.prototype.injectorGetInternal = function (token, requestNodeIndex, notFoundResult) {
        if (((token === import23.SelectableDirective) && ((2 <= requestNodeIndex) && (requestNodeIndex <= 3)))) {
            return this._SelectableDirective_2_3.context;
        }
        if (((token === import17.TemplateRef) && (5 === requestNodeIndex))) {
            return this._TemplateRef_5_5;
        }
        if (((token === import24.NgIf) && (5 === requestNodeIndex))) {
            return this._NgIf_5_6.context;
        }
        return notFoundResult;
    };
    _View_SelectAllComponent1.prototype.detectChangesInternal = function (throwOnChange) {
        var currVal_2_0_0 = this.context.$implicit;
        this._SelectableDirective_2_3.check_item(currVal_2_0_0, throwOnChange, false);
        this._SelectableDirective_2_3.ngDoCheck(this, this._el_2, throwOnChange);
        var currVal_5_0_0 = this._SelectableDirective_2_3.context.selected;
        this._NgIf_5_6.check_ngIf(currVal_5_0_0, throwOnChange, false);
        this._NgIf_5_6.ngDoCheck(this, this._anchor_5, throwOnChange);
        this._appEl_5.detectChangesInNestedViews(throwOnChange);
        var currVal_11 = this._SelectableDirective_2_3.context.selected;
        if (import4.checkBinding(throwOnChange, this._expr_11, currVal_11)) {
            this.renderer.setElementClass(this._el_2, 'selected', currVal_11);
            this._expr_11 = currVal_11;
        }
        var currVal_12 = import4.interpolate(2, '\n      ', this.context.$implicit.name, ' (', this.context.$implicit.countries.length, ' countries)\n    ');
        if (import4.checkBinding(throwOnChange, this._expr_12, currVal_12)) {
            this.renderer.setText(this._text_3, currVal_12);
            this._expr_12 = currVal_12;
        }
    };
    _View_SelectAllComponent1.prototype.dirtyParentQueriesInternal = function () {
        this.parent._query_SelectableDirective_0_0.setDirty();
    };
    _View_SelectAllComponent1.prototype.destroyInternal = function () {
        this._appEl_5.destroyNestedViews();
        this._SelectableDirective_2_3.ngOnDestroy();
    };
    _View_SelectAllComponent1.prototype.visitRootNodesInternal = function (cb, ctx) {
        cb(this._el_0, ctx);
    };
    _View_SelectAllComponent1.prototype.handleEvent_2 = function (eventName, $event) {
        this.markPathToRootAsCheckOnce();
        var result = true;
        result = (this._SelectableDirective_2_3.handleEvent(eventName, $event) && result);
        return result;
    };
    return _View_SelectAllComponent1;
}(import1.AppView));
function viewFactory_SelectAllComponent1(viewUtils, parentInjector, declarationEl) {
    return new _View_SelectAllComponent1(viewUtils, parentInjector, declarationEl);
}
var _View_SelectAllComponent2 = (function (_super) {
    __extends(_View_SelectAllComponent2, _super);
    function _View_SelectAllComponent2(viewUtils, parentInjector, declarationEl) {
        _super.call(this, _View_SelectAllComponent2, renderType_SelectAllComponent, import6.ViewType.EMBEDDED, viewUtils, parentInjector, declarationEl, import7.ChangeDetectorStatus.CheckAlways);
    }
    _View_SelectAllComponent2.prototype.createInternal = function (rootSelector) {
        this._el_0 = import4.createRenderElement(this.renderer, null, 'div', new import4.InlineArray4(4, 'class', 'col-md-12', 'rtSelectionArea', ''), null);
        this._RtSelectionService_0_3 = new import11.RtSelectionService();
        this._RtSelectionEventsHelper_0_4 = new import12.RtSelectionEventsHelper(this._RtSelectionService_0_3);
        this._SelectionAreaDirective_0_5 = new import13.Wrapper_SelectionAreaDirective(this._RtSelectionService_0_3, this._RtSelectionEventsHelper_0_4);
        this._query_SelectableDirective_0_0 = new import14.QueryList();
        this._query_SelectionCheckboxForDirective_0_1 = new import14.QueryList();
        this._query_SelectionAreaDirective_0_2 = new import14.QueryList();
        this._text_1 = this.renderer.createText(this._el_0, '\n      ', null);
        this._anchor_2 = this.renderer.createTemplateAnchor(this._el_0, null);
        this._appEl_2 = new import3.AppElement(2, 0, this, this._anchor_2);
        this._TemplateRef_2_5 = new import17.TemplateRef_(this._appEl_2, viewFactory_SelectAllComponent3);
        this._NgFor_2_6 = new import15.Wrapper_NgFor(this._appEl_2.vcRef, this._TemplateRef_2_5, this.parent.parent.parentInjector.get(import18.IterableDiffers), this.parent.parent.ref);
        this._text_3 = this.renderer.createText(this._el_0, '\n    ', null);
        var disposable_0 = import4.subscribeToRenderElement(this, this._el_0, new import4.InlineArray2(2, 'keydown', null), this.eventHandler(this.handleEvent_0));
        this.init(this._el_0, [
            this._el_0,
            this._text_1,
            this._anchor_2,
            this._text_3
        ], [disposable_0]);
        return null;
    };
    _View_SelectAllComponent2.prototype.injectorGetInternal = function (token, requestNodeIndex, notFoundResult) {
        if (((token === import17.TemplateRef) && (2 === requestNodeIndex))) {
            return this._TemplateRef_2_5;
        }
        if (((token === import19.NgFor) && (2 === requestNodeIndex))) {
            return this._NgFor_2_6.context;
        }
        if (((token === import11.RtSelectionService) && ((0 <= requestNodeIndex) && (requestNodeIndex <= 3)))) {
            return this._RtSelectionService_0_3;
        }
        if (((token === import12.RtSelectionEventsHelper) && ((0 <= requestNodeIndex) && (requestNodeIndex <= 3)))) {
            return this._RtSelectionEventsHelper_0_4;
        }
        if (((token === import20.SelectionAreaDirective) && ((0 <= requestNodeIndex) && (requestNodeIndex <= 3)))) {
            return this._SelectionAreaDirective_0_5.context;
        }
        return notFoundResult;
    };
    _View_SelectAllComponent2.prototype.detectChangesInternal = function (throwOnChange) {
        this._SelectionAreaDirective_0_5.ngDoCheck(this, this._el_0, throwOnChange);
        var currVal_2_0_0 = this.parent.context.$implicit.countries;
        this._NgFor_2_6.check_ngForOf(currVal_2_0_0, throwOnChange, false);
        this._NgFor_2_6.ngDoCheck(this, this._anchor_2, throwOnChange);
        this._appEl_2.detectChangesInNestedViews(throwOnChange);
        if (!throwOnChange) {
            if (this._query_SelectableDirective_0_0.dirty) {
                this._query_SelectableDirective_0_0.reset([this._appEl_2.mapNestedViews(_View_SelectAllComponent3, function (nestedView) {
                        return [nestedView._SelectableDirective_2_3.context];
                    })]);
                this._SelectionAreaDirective_0_5.context.selectableItems = this._query_SelectableDirective_0_0;
                this._query_SelectableDirective_0_0.notifyOnChanges();
            }
            if (this._query_SelectionCheckboxForDirective_0_1.dirty) {
                this._query_SelectionCheckboxForDirective_0_1.reset([]);
                this._SelectionAreaDirective_0_5.context.childSelectionCheckboxes = this._query_SelectionCheckboxForDirective_0_1;
                this._query_SelectionCheckboxForDirective_0_1.notifyOnChanges();
            }
            if (this._query_SelectionAreaDirective_0_2.dirty) {
                this._query_SelectionAreaDirective_0_2.reset([
                    this._SelectionAreaDirective_0_5.context,
                    this._appEl_2.mapNestedViews(_View_SelectAllComponent3, function (nestedView) {
                        return [nestedView._appEl_5.mapNestedViews(_View_SelectAllComponent4, function (nestedView) {
                                return [nestedView._SelectionAreaDirective_0_5.context];
                            })];
                    })
                ]);
                this._SelectionAreaDirective_0_5.context.childSelectionAreas = this._query_SelectionAreaDirective_0_2;
                this._query_SelectionAreaDirective_0_2.notifyOnChanges();
            }
            if ((this.numberOfChecks === 0)) {
                this._SelectionAreaDirective_0_5.context.ngAfterContentInit();
            }
        }
        this._SelectionAreaDirective_0_5.checkHost(this, this, this._el_0, throwOnChange);
    };
    _View_SelectAllComponent2.prototype.dirtyParentQueriesInternal = function () {
        this.parent.parent._query_SelectionAreaDirective_0_2.setDirty();
    };
    _View_SelectAllComponent2.prototype.destroyInternal = function () {
        this._appEl_2.destroyNestedViews();
        this._SelectionAreaDirective_0_5.ngOnDestroy();
    };
    _View_SelectAllComponent2.prototype.visitRootNodesInternal = function (cb, ctx) {
        cb(this._el_0, ctx);
    };
    _View_SelectAllComponent2.prototype.handleEvent_0 = function (eventName, $event) {
        this.markPathToRootAsCheckOnce();
        var result = true;
        result = (this._SelectionAreaDirective_0_5.handleEvent(eventName, $event) && result);
        return result;
    };
    return _View_SelectAllComponent2;
}(import1.AppView));
function viewFactory_SelectAllComponent2(viewUtils, parentInjector, declarationEl) {
    return new _View_SelectAllComponent2(viewUtils, parentInjector, declarationEl);
}
var _View_SelectAllComponent3 = (function (_super) {
    __extends(_View_SelectAllComponent3, _super);
    function _View_SelectAllComponent3(viewUtils, parentInjector, declarationEl) {
        _super.call(this, _View_SelectAllComponent3, renderType_SelectAllComponent, import6.ViewType.EMBEDDED, viewUtils, parentInjector, declarationEl, import7.ChangeDetectorStatus.CheckAlways);
        this._expr_11 = import7.UNINITIALIZED;
        this._expr_12 = import7.UNINITIALIZED;
    }
    _View_SelectAllComponent3.prototype.createInternal = function (rootSelector) {
        this._el_0 = import4.createRenderElement(this.renderer, null, 'div', import4.EMPTY_INLINE_ARRAY, null);
        this._text_1 = this.renderer.createText(this._el_0, '\n        ', null);
        this._el_2 = import4.createRenderElement(this.renderer, this._el_0, 'div', new import4.InlineArray2(2, 'class', 'col-md-12 item'), null);
        this._SelectableDirective_2_3 = new import21.Wrapper_SelectableDirective(this.parent._RtSelectionEventsHelper_0_4);
        this._text_3 = this.renderer.createText(this._el_2, '', null);
        this._text_4 = this.renderer.createText(this._el_0, '\n        ', null);
        this._anchor_5 = this.renderer.createTemplateAnchor(this._el_0, null);
        this._appEl_5 = new import3.AppElement(5, 0, this, this._anchor_5);
        this._TemplateRef_5_5 = new import17.TemplateRef_(this._appEl_5, viewFactory_SelectAllComponent4);
        this._NgIf_5_6 = new import22.Wrapper_NgIf(this._appEl_5.vcRef, this._TemplateRef_5_5);
        this._text_6 = this.renderer.createText(this._el_0, '\n      ', null);
        var disposable_0 = import4.subscribeToRenderElement(this, this._el_2, new import4.InlineArray2(2, 'mouseup', null), this.eventHandler(this.handleEvent_2));
        this.init(this._el_0, [
            this._el_0,
            this._text_1,
            this._el_2,
            this._text_3,
            this._text_4,
            this._anchor_5,
            this._text_6
        ], [disposable_0]);
        return null;
    };
    _View_SelectAllComponent3.prototype.injectorGetInternal = function (token, requestNodeIndex, notFoundResult) {
        if (((token === import23.SelectableDirective) && ((2 <= requestNodeIndex) && (requestNodeIndex <= 3)))) {
            return this._SelectableDirective_2_3.context;
        }
        if (((token === import17.TemplateRef) && (5 === requestNodeIndex))) {
            return this._TemplateRef_5_5;
        }
        if (((token === import24.NgIf) && (5 === requestNodeIndex))) {
            return this._NgIf_5_6.context;
        }
        return notFoundResult;
    };
    _View_SelectAllComponent3.prototype.detectChangesInternal = function (throwOnChange) {
        var currVal_2_0_0 = this.context.$implicit;
        this._SelectableDirective_2_3.check_item(currVal_2_0_0, throwOnChange, false);
        this._SelectableDirective_2_3.ngDoCheck(this, this._el_2, throwOnChange);
        var currVal_5_0_0 = this._SelectableDirective_2_3.context.selected;
        this._NgIf_5_6.check_ngIf(currVal_5_0_0, throwOnChange, false);
        this._NgIf_5_6.ngDoCheck(this, this._anchor_5, throwOnChange);
        this._appEl_5.detectChangesInNestedViews(throwOnChange);
        var currVal_11 = this._SelectableDirective_2_3.context.selected;
        if (import4.checkBinding(throwOnChange, this._expr_11, currVal_11)) {
            this.renderer.setElementClass(this._el_2, 'selected', currVal_11);
            this._expr_11 = currVal_11;
        }
        var currVal_12 = import4.interpolate(2, '\n          ', this.context.$implicit.name, ' (', this.context.$implicit.airports.length, ' airports)\n        ');
        if (import4.checkBinding(throwOnChange, this._expr_12, currVal_12)) {
            this.renderer.setText(this._text_3, currVal_12);
            this._expr_12 = currVal_12;
        }
    };
    _View_SelectAllComponent3.prototype.dirtyParentQueriesInternal = function () {
        this.parent._query_SelectableDirective_0_0.setDirty();
    };
    _View_SelectAllComponent3.prototype.destroyInternal = function () {
        this._appEl_5.destroyNestedViews();
        this._SelectableDirective_2_3.ngOnDestroy();
    };
    _View_SelectAllComponent3.prototype.visitRootNodesInternal = function (cb, ctx) {
        cb(this._el_0, ctx);
    };
    _View_SelectAllComponent3.prototype.handleEvent_2 = function (eventName, $event) {
        this.markPathToRootAsCheckOnce();
        var result = true;
        result = (this._SelectableDirective_2_3.handleEvent(eventName, $event) && result);
        return result;
    };
    return _View_SelectAllComponent3;
}(import1.AppView));
function viewFactory_SelectAllComponent3(viewUtils, parentInjector, declarationEl) {
    return new _View_SelectAllComponent3(viewUtils, parentInjector, declarationEl);
}
var _View_SelectAllComponent4 = (function (_super) {
    __extends(_View_SelectAllComponent4, _super);
    function _View_SelectAllComponent4(viewUtils, parentInjector, declarationEl) {
        _super.call(this, _View_SelectAllComponent4, renderType_SelectAllComponent, import6.ViewType.EMBEDDED, viewUtils, parentInjector, declarationEl, import7.ChangeDetectorStatus.CheckAlways);
    }
    _View_SelectAllComponent4.prototype.createInternal = function (rootSelector) {
        this._el_0 = import4.createRenderElement(this.renderer, null, 'div', new import4.InlineArray4(4, 'class', 'col-md-12', 'rtSelectionArea', ''), null);
        this._RtSelectionService_0_3 = new import11.RtSelectionService();
        this._RtSelectionEventsHelper_0_4 = new import12.RtSelectionEventsHelper(this._RtSelectionService_0_3);
        this._SelectionAreaDirective_0_5 = new import13.Wrapper_SelectionAreaDirective(this._RtSelectionService_0_3, this._RtSelectionEventsHelper_0_4);
        this._query_SelectableDirective_0_0 = new import14.QueryList();
        this._query_SelectionCheckboxForDirective_0_1 = new import14.QueryList();
        this._query_SelectionAreaDirective_0_2 = new import14.QueryList();
        this._text_1 = this.renderer.createText(this._el_0, '\n          ', null);
        this._anchor_2 = this.renderer.createTemplateAnchor(this._el_0, null);
        this._appEl_2 = new import3.AppElement(2, 0, this, this._anchor_2);
        this._TemplateRef_2_5 = new import17.TemplateRef_(this._appEl_2, viewFactory_SelectAllComponent5);
        this._NgFor_2_6 = new import15.Wrapper_NgFor(this._appEl_2.vcRef, this._TemplateRef_2_5, this.parent.parent.parent.parent.parentInjector.get(import18.IterableDiffers), this.parent.parent.parent.parent.ref);
        this._text_3 = this.renderer.createText(this._el_0, '\n        ', null);
        var disposable_0 = import4.subscribeToRenderElement(this, this._el_0, new import4.InlineArray2(2, 'keydown', null), this.eventHandler(this.handleEvent_0));
        this.init(this._el_0, [
            this._el_0,
            this._text_1,
            this._anchor_2,
            this._text_3
        ], [disposable_0]);
        return null;
    };
    _View_SelectAllComponent4.prototype.injectorGetInternal = function (token, requestNodeIndex, notFoundResult) {
        if (((token === import17.TemplateRef) && (2 === requestNodeIndex))) {
            return this._TemplateRef_2_5;
        }
        if (((token === import19.NgFor) && (2 === requestNodeIndex))) {
            return this._NgFor_2_6.context;
        }
        if (((token === import11.RtSelectionService) && ((0 <= requestNodeIndex) && (requestNodeIndex <= 3)))) {
            return this._RtSelectionService_0_3;
        }
        if (((token === import12.RtSelectionEventsHelper) && ((0 <= requestNodeIndex) && (requestNodeIndex <= 3)))) {
            return this._RtSelectionEventsHelper_0_4;
        }
        if (((token === import20.SelectionAreaDirective) && ((0 <= requestNodeIndex) && (requestNodeIndex <= 3)))) {
            return this._SelectionAreaDirective_0_5.context;
        }
        return notFoundResult;
    };
    _View_SelectAllComponent4.prototype.detectChangesInternal = function (throwOnChange) {
        this._SelectionAreaDirective_0_5.ngDoCheck(this, this._el_0, throwOnChange);
        var currVal_2_0_0 = this.parent.context.$implicit.airports;
        this._NgFor_2_6.check_ngForOf(currVal_2_0_0, throwOnChange, false);
        this._NgFor_2_6.ngDoCheck(this, this._anchor_2, throwOnChange);
        this._appEl_2.detectChangesInNestedViews(throwOnChange);
        if (!throwOnChange) {
            if (this._query_SelectableDirective_0_0.dirty) {
                this._query_SelectableDirective_0_0.reset([this._appEl_2.mapNestedViews(_View_SelectAllComponent5, function (nestedView) {
                        return [nestedView._SelectableDirective_2_3.context];
                    })]);
                this._SelectionAreaDirective_0_5.context.selectableItems = this._query_SelectableDirective_0_0;
                this._query_SelectableDirective_0_0.notifyOnChanges();
            }
            if (this._query_SelectionCheckboxForDirective_0_1.dirty) {
                this._query_SelectionCheckboxForDirective_0_1.reset([]);
                this._SelectionAreaDirective_0_5.context.childSelectionCheckboxes = this._query_SelectionCheckboxForDirective_0_1;
                this._query_SelectionCheckboxForDirective_0_1.notifyOnChanges();
            }
            if (this._query_SelectionAreaDirective_0_2.dirty) {
                this._query_SelectionAreaDirective_0_2.reset([this._SelectionAreaDirective_0_5.context]);
                this._SelectionAreaDirective_0_5.context.childSelectionAreas = this._query_SelectionAreaDirective_0_2;
                this._query_SelectionAreaDirective_0_2.notifyOnChanges();
            }
            if ((this.numberOfChecks === 0)) {
                this._SelectionAreaDirective_0_5.context.ngAfterContentInit();
            }
        }
        this._SelectionAreaDirective_0_5.checkHost(this, this, this._el_0, throwOnChange);
    };
    _View_SelectAllComponent4.prototype.dirtyParentQueriesInternal = function () {
        this.parent.parent._query_SelectionAreaDirective_0_2.setDirty();
    };
    _View_SelectAllComponent4.prototype.destroyInternal = function () {
        this._appEl_2.destroyNestedViews();
        this._SelectionAreaDirective_0_5.ngOnDestroy();
    };
    _View_SelectAllComponent4.prototype.visitRootNodesInternal = function (cb, ctx) {
        cb(this._el_0, ctx);
    };
    _View_SelectAllComponent4.prototype.handleEvent_0 = function (eventName, $event) {
        this.markPathToRootAsCheckOnce();
        var result = true;
        result = (this._SelectionAreaDirective_0_5.handleEvent(eventName, $event) && result);
        return result;
    };
    return _View_SelectAllComponent4;
}(import1.AppView));
function viewFactory_SelectAllComponent4(viewUtils, parentInjector, declarationEl) {
    return new _View_SelectAllComponent4(viewUtils, parentInjector, declarationEl);
}
var _View_SelectAllComponent5 = (function (_super) {
    __extends(_View_SelectAllComponent5, _super);
    function _View_SelectAllComponent5(viewUtils, parentInjector, declarationEl) {
        _super.call(this, _View_SelectAllComponent5, renderType_SelectAllComponent, import6.ViewType.EMBEDDED, viewUtils, parentInjector, declarationEl, import7.ChangeDetectorStatus.CheckAlways);
        this._expr_6 = import7.UNINITIALIZED;
        this._expr_7 = import7.UNINITIALIZED;
    }
    _View_SelectAllComponent5.prototype.createInternal = function (rootSelector) {
        this._el_0 = import4.createRenderElement(this.renderer, null, 'div', import4.EMPTY_INLINE_ARRAY, null);
        this._text_1 = this.renderer.createText(this._el_0, '\n            ', null);
        this._el_2 = import4.createRenderElement(this.renderer, this._el_0, 'div', new import4.InlineArray2(2, 'class', 'col-md-12 item'), null);
        this._SelectableDirective_2_3 = new import21.Wrapper_SelectableDirective(this.parent._RtSelectionEventsHelper_0_4);
        this._text_3 = this.renderer.createText(this._el_2, '', null);
        this._text_4 = this.renderer.createText(this._el_0, '\n          ', null);
        var disposable_0 = import4.subscribeToRenderElement(this, this._el_2, new import4.InlineArray2(2, 'mouseup', null), this.eventHandler(this.handleEvent_2));
        this.init(this._el_0, [
            this._el_0,
            this._text_1,
            this._el_2,
            this._text_3,
            this._text_4
        ], [disposable_0]);
        return null;
    };
    _View_SelectAllComponent5.prototype.injectorGetInternal = function (token, requestNodeIndex, notFoundResult) {
        if (((token === import23.SelectableDirective) && ((2 <= requestNodeIndex) && (requestNodeIndex <= 3)))) {
            return this._SelectableDirective_2_3.context;
        }
        return notFoundResult;
    };
    _View_SelectAllComponent5.prototype.detectChangesInternal = function (throwOnChange) {
        var currVal_2_0_0 = this.context.$implicit;
        this._SelectableDirective_2_3.check_item(currVal_2_0_0, throwOnChange, false);
        this._SelectableDirective_2_3.ngDoCheck(this, this._el_2, throwOnChange);
        var currVal_6 = this._SelectableDirective_2_3.context.selected;
        if (import4.checkBinding(throwOnChange, this._expr_6, currVal_6)) {
            this.renderer.setElementClass(this._el_2, 'selected', currVal_6);
            this._expr_6 = currVal_6;
        }
        var currVal_7 = import4.interpolate(2, '\n              ', this.context.$implicit.name, ' (', this.context.$implicit.iataCode, ')\n            ');
        if (import4.checkBinding(throwOnChange, this._expr_7, currVal_7)) {
            this.renderer.setText(this._text_3, currVal_7);
            this._expr_7 = currVal_7;
        }
    };
    _View_SelectAllComponent5.prototype.dirtyParentQueriesInternal = function () {
        this.parent._query_SelectableDirective_0_0.setDirty();
    };
    _View_SelectAllComponent5.prototype.destroyInternal = function () {
        this._SelectableDirective_2_3.ngOnDestroy();
    };
    _View_SelectAllComponent5.prototype.visitRootNodesInternal = function (cb, ctx) {
        cb(this._el_0, ctx);
    };
    _View_SelectAllComponent5.prototype.handleEvent_2 = function (eventName, $event) {
        this.markPathToRootAsCheckOnce();
        var result = true;
        result = (this._SelectableDirective_2_3.handleEvent(eventName, $event) && result);
        return result;
    };
    return _View_SelectAllComponent5;
}(import1.AppView));
function viewFactory_SelectAllComponent5(viewUtils, parentInjector, declarationEl) {
    return new _View_SelectAllComponent5(viewUtils, parentInjector, declarationEl);
}


/***/ },

/***/ "./src/compiled/src/app/+selection/selected-flag-data/selected-flag-data.component.ngfactory.ts":
/***/ function(module, exports, __webpack_require__) {

"use strict";
/**
 * This file is generated by the Angular 2 template compiler.
 * Do not edit.
 */
/* tslint:disable */
"use strict";
var import0 = __webpack_require__("./src/app/+selection/selected-flag-data/selected-flag-data.component.ts");
var import1 = __webpack_require__("./node_modules/@angular/core/src/linker/view.js");
var import3 = __webpack_require__("./node_modules/@angular/core/src/linker/element.js");
var import4 = __webpack_require__("./node_modules/@angular/core/src/linker/view_utils.js");
var import6 = __webpack_require__("./node_modules/@angular/core/src/linker/view_type.js");
var import7 = __webpack_require__("./node_modules/@angular/core/src/change_detection/change_detection.js");
var import8 = __webpack_require__("./src/app/+selection/countries.service.ts");
var import9 = __webpack_require__("./node_modules/@angular/core/src/metadata/view.js");
var import10 = __webpack_require__("./node_modules/@angular/core/src/linker/component_factory.js");
var import11 = __webpack_require__("./node_modules/right-angled/src/core/selection/selection-service.js");
var import12 = __webpack_require__("./node_modules/right-angled/src/core/providers.js");
var import13 = __webpack_require__("./src/compiled/node_modules/right-angled/src/selection-directives/selection-area.directive.ngfactory.ts");
var import14 = __webpack_require__("./node_modules/@angular/core/src/linker/query_list.js");
var import15 = __webpack_require__("./src/compiled/node_modules/@angular/common/src/directives/ng_for.ngfactory.ts");
var import16 = __webpack_require__("./node_modules/@angular/core/src/linker/template_ref.js");
var import17 = __webpack_require__("./node_modules/@angular/core/src/change_detection/differs/iterable_differs.js");
var import18 = __webpack_require__("./node_modules/@angular/common/src/directives/ng_for.js");
var import19 = __webpack_require__("./node_modules/right-angled/src/selection-directives/selection-area.directive.js");
var import20 = __webpack_require__("./src/compiled/node_modules/right-angled/src/selection-directives/selectable.directive.ngfactory.ts");
var import21 = __webpack_require__("./src/compiled/node_modules/@angular/common/src/directives/ng_if.ngfactory.ts");
var import22 = __webpack_require__("./node_modules/@angular/common/src/directives/ng_if.js");
var import23 = __webpack_require__("./node_modules/right-angled/src/selection-directives/selectable.directive.js");
var import24 = __webpack_require__("./src/compiled/node_modules/@angular/forms/src/directives/default_value_accessor.ngfactory.ts");
var import25 = __webpack_require__("./src/compiled/node_modules/@angular/forms/src/directives/ng_model.ngfactory.ts");
var import26 = __webpack_require__("./src/compiled/node_modules/@angular/forms/src/directives/ng_control_status.ngfactory.ts");
var import27 = __webpack_require__("./src/compiled/node_modules/right-angled/src/misc-directives/focus-on-render.directive.ngfactory.ts");
var import28 = __webpack_require__("./src/compiled/node_modules/right-angled/src/misc-directives/stop-events.directive.ngfactory.ts");
var import29 = __webpack_require__("./node_modules/@angular/core/src/linker/element_ref.js");
var import30 = __webpack_require__("./node_modules/@angular/forms/src/directives/default_value_accessor.js");
var import31 = __webpack_require__("./node_modules/@angular/forms/src/directives/control_value_accessor.js");
var import32 = __webpack_require__("./node_modules/@angular/forms/src/directives/ng_model.js");
var import33 = __webpack_require__("./node_modules/@angular/forms/src/directives/ng_control.js");
var import34 = __webpack_require__("./node_modules/@angular/forms/src/directives/ng_control_status.js");
var import35 = __webpack_require__("./node_modules/right-angled/src/misc-directives/focus-on-render.directive.js");
var import36 = __webpack_require__("./node_modules/right-angled/src/misc-directives/stop-events.directive.js");
var Wrapper_SelectedFlagDataComponent = (function () {
    function Wrapper_SelectedFlagDataComponent(p0) {
        this._changed = false;
        this.context = new import0.SelectedFlagDataComponent(p0);
    }
    Wrapper_SelectedFlagDataComponent.prototype.ngOnDetach = function (view, componentView, el) {
    };
    Wrapper_SelectedFlagDataComponent.prototype.ngOnDestroy = function () {
    };
    Wrapper_SelectedFlagDataComponent.prototype.ngDoCheck = function (view, el, throwOnChange) {
        var changed = this._changed;
        this._changed = false;
        return changed;
    };
    Wrapper_SelectedFlagDataComponent.prototype.checkHost = function (view, componentView, el, throwOnChange) {
    };
    Wrapper_SelectedFlagDataComponent.prototype.handleEvent = function (eventName, $event) {
        var result = true;
        return result;
    };
    Wrapper_SelectedFlagDataComponent.prototype.subscribe = function (view, _eventHandler) {
        this._eventHandler = _eventHandler;
    };
    return Wrapper_SelectedFlagDataComponent;
}());
exports.Wrapper_SelectedFlagDataComponent = Wrapper_SelectedFlagDataComponent;
var renderType_SelectedFlagDataComponent_Host = null;
var _View_SelectedFlagDataComponent_Host0 = (function (_super) {
    __extends(_View_SelectedFlagDataComponent_Host0, _super);
    function _View_SelectedFlagDataComponent_Host0(viewUtils, parentInjector, declarationEl) {
        _super.call(this, _View_SelectedFlagDataComponent_Host0, renderType_SelectedFlagDataComponent_Host, import6.ViewType.HOST, viewUtils, parentInjector, declarationEl, import7.ChangeDetectorStatus.CheckAlways);
    }
    _View_SelectedFlagDataComponent_Host0.prototype.createInternal = function (rootSelector) {
        this._el_0 = import4.selectOrCreateRenderHostElement(this.renderer, 'rt-demo-selected-flag-data', import4.EMPTY_INLINE_ARRAY, rootSelector, null);
        this._appEl_0 = new import3.AppElement(0, null, this, this._el_0);
        this.compView_0 = viewFactory_SelectedFlagDataComponent0(this.viewUtils, this.injector(0), this._appEl_0);
        this._SelectedFlagDataComponent_0_4 = new Wrapper_SelectedFlagDataComponent(this.parentInjector.get(import8.CountriesService));
        this._appEl_0.initComponent(this._SelectedFlagDataComponent_0_4.context, this.compView_0);
        this.compView_0.create(this._SelectedFlagDataComponent_0_4.context, null);
        this.init(this._el_0, [this._el_0], null);
        return this._appEl_0;
    };
    _View_SelectedFlagDataComponent_Host0.prototype.injectorGetInternal = function (token, requestNodeIndex, notFoundResult) {
        if (((token === import0.SelectedFlagDataComponent) && (0 === requestNodeIndex))) {
            return this._SelectedFlagDataComponent_0_4.context;
        }
        return notFoundResult;
    };
    _View_SelectedFlagDataComponent_Host0.prototype.detectChangesInternal = function (throwOnChange) {
        this._SelectedFlagDataComponent_0_4.ngDoCheck(this, this._el_0, throwOnChange);
        this.compView_0.detectChanges(throwOnChange);
    };
    _View_SelectedFlagDataComponent_Host0.prototype.destroyInternal = function () {
        this.compView_0.destroy();
    };
    _View_SelectedFlagDataComponent_Host0.prototype.visitRootNodesInternal = function (cb, ctx) {
        cb(this._el_0, ctx);
    };
    return _View_SelectedFlagDataComponent_Host0;
}(import1.AppView));
function viewFactory_SelectedFlagDataComponent_Host0(viewUtils, parentInjector, declarationEl) {
    if ((renderType_SelectedFlagDataComponent_Host === null)) {
        (renderType_SelectedFlagDataComponent_Host = viewUtils.createRenderComponentType('', 0, import9.ViewEncapsulation.None, [], {}));
    }
    return new _View_SelectedFlagDataComponent_Host0(viewUtils, parentInjector, declarationEl);
}
exports.SelectedFlagDataComponentNgFactory = new import10.ComponentFactory('rt-demo-selected-flag-data', viewFactory_SelectedFlagDataComponent_Host0, import0.SelectedFlagDataComponent);
var styles_SelectedFlagDataComponent = [];
var renderType_SelectedFlagDataComponent = null;
var _View_SelectedFlagDataComponent0 = (function (_super) {
    __extends(_View_SelectedFlagDataComponent0, _super);
    function _View_SelectedFlagDataComponent0(viewUtils, parentInjector, declarationEl) {
        _super.call(this, _View_SelectedFlagDataComponent0, renderType_SelectedFlagDataComponent, import6.ViewType.COMPONENT, viewUtils, parentInjector, declarationEl, import7.ChangeDetectorStatus.CheckAlways);
    }
    _View_SelectedFlagDataComponent0.prototype.createInternal = function (rootSelector) {
        var parentRenderNode = this.renderer.createViewRoot(this.declarationAppElement.nativeElement);
        this._el_0 = import4.createRenderElement(this.renderer, parentRenderNode, 'div', new import4.InlineArray4(4, 'class', 'row', 'rtSelectionArea', ''), null);
        this._RtSelectionService_0_3 = new import11.RtSelectionService();
        this._RtSelectionEventsHelper_0_4 = new import12.RtSelectionEventsHelper(this._RtSelectionService_0_3);
        this._SelectionAreaDirective_0_5 = new import13.Wrapper_SelectionAreaDirective(this._RtSelectionService_0_3, this._RtSelectionEventsHelper_0_4);
        this._query_SelectableDirective_0_0 = new import14.QueryList();
        this._query_SelectionCheckboxForDirective_0_1 = new import14.QueryList();
        this._query_SelectionAreaDirective_0_2 = new import14.QueryList();
        this._text_1 = this.renderer.createText(this._el_0, '\n  ', null);
        this._anchor_2 = this.renderer.createTemplateAnchor(this._el_0, null);
        this._appEl_2 = new import3.AppElement(2, 0, this, this._anchor_2);
        this._TemplateRef_2_5 = new import16.TemplateRef_(this._appEl_2, viewFactory_SelectedFlagDataComponent1);
        this._NgFor_2_6 = new import15.Wrapper_NgFor(this._appEl_2.vcRef, this._TemplateRef_2_5, this.parentInjector.get(import17.IterableDiffers), this.ref);
        this._text_3 = this.renderer.createText(this._el_0, '\n', null);
        var disposable_0 = import4.subscribeToRenderElement(this, this._el_0, new import4.InlineArray2(2, 'keydown', null), this.eventHandler(this.handleEvent_0));
        this.init(null, [
            this._el_0,
            this._text_1,
            this._anchor_2,
            this._text_3
        ], [disposable_0]);
        return null;
    };
    _View_SelectedFlagDataComponent0.prototype.injectorGetInternal = function (token, requestNodeIndex, notFoundResult) {
        if (((token === import16.TemplateRef) && (2 === requestNodeIndex))) {
            return this._TemplateRef_2_5;
        }
        if (((token === import18.NgFor) && (2 === requestNodeIndex))) {
            return this._NgFor_2_6.context;
        }
        if (((token === import11.RtSelectionService) && ((0 <= requestNodeIndex) && (requestNodeIndex <= 3)))) {
            return this._RtSelectionService_0_3;
        }
        if (((token === import12.RtSelectionEventsHelper) && ((0 <= requestNodeIndex) && (requestNodeIndex <= 3)))) {
            return this._RtSelectionEventsHelper_0_4;
        }
        if (((token === import19.SelectionAreaDirective) && ((0 <= requestNodeIndex) && (requestNodeIndex <= 3)))) {
            return this._SelectionAreaDirective_0_5.context;
        }
        return notFoundResult;
    };
    _View_SelectedFlagDataComponent0.prototype.detectChangesInternal = function (throwOnChange) {
        this._SelectionAreaDirective_0_5.ngDoCheck(this, this._el_0, throwOnChange);
        var currVal_2_0_0 = this.context.countries;
        this._NgFor_2_6.check_ngForOf(currVal_2_0_0, throwOnChange, false);
        this._NgFor_2_6.ngDoCheck(this, this._anchor_2, throwOnChange);
        this._appEl_2.detectChangesInNestedViews(throwOnChange);
        if (!throwOnChange) {
            if (this._query_SelectableDirective_0_0.dirty) {
                this._query_SelectableDirective_0_0.reset([this._appEl_2.mapNestedViews(_View_SelectedFlagDataComponent1, function (nestedView) {
                        return [nestedView._SelectableDirective_0_3.context];
                    })]);
                this._SelectionAreaDirective_0_5.context.selectableItems = this._query_SelectableDirective_0_0;
                this._query_SelectableDirective_0_0.notifyOnChanges();
            }
            if (this._query_SelectionCheckboxForDirective_0_1.dirty) {
                this._query_SelectionCheckboxForDirective_0_1.reset([]);
                this._SelectionAreaDirective_0_5.context.childSelectionCheckboxes = this._query_SelectionCheckboxForDirective_0_1;
                this._query_SelectionCheckboxForDirective_0_1.notifyOnChanges();
            }
            if (this._query_SelectionAreaDirective_0_2.dirty) {
                this._query_SelectionAreaDirective_0_2.reset([this._SelectionAreaDirective_0_5.context]);
                this._SelectionAreaDirective_0_5.context.childSelectionAreas = this._query_SelectionAreaDirective_0_2;
                this._query_SelectionAreaDirective_0_2.notifyOnChanges();
            }
            if ((this.numberOfChecks === 0)) {
                this._SelectionAreaDirective_0_5.context.ngAfterContentInit();
            }
        }
        this._SelectionAreaDirective_0_5.checkHost(this, this, this._el_0, throwOnChange);
    };
    _View_SelectedFlagDataComponent0.prototype.destroyInternal = function () {
        this._appEl_2.destroyNestedViews();
        this._SelectionAreaDirective_0_5.ngOnDestroy();
    };
    _View_SelectedFlagDataComponent0.prototype.handleEvent_0 = function (eventName, $event) {
        this.markPathToRootAsCheckOnce();
        var result = true;
        result = (this._SelectionAreaDirective_0_5.handleEvent(eventName, $event) && result);
        return result;
    };
    return _View_SelectedFlagDataComponent0;
}(import1.AppView));
function viewFactory_SelectedFlagDataComponent0(viewUtils, parentInjector, declarationEl) {
    if ((renderType_SelectedFlagDataComponent === null)) {
        (renderType_SelectedFlagDataComponent = viewUtils.createRenderComponentType('', 0, import9.ViewEncapsulation.None, styles_SelectedFlagDataComponent, {}));
    }
    return new _View_SelectedFlagDataComponent0(viewUtils, parentInjector, declarationEl);
}
exports.viewFactory_SelectedFlagDataComponent0 = viewFactory_SelectedFlagDataComponent0;
var _View_SelectedFlagDataComponent1 = (function (_super) {
    __extends(_View_SelectedFlagDataComponent1, _super);
    function _View_SelectedFlagDataComponent1(viewUtils, parentInjector, declarationEl) {
        _super.call(this, _View_SelectedFlagDataComponent1, renderType_SelectedFlagDataComponent, import6.ViewType.EMBEDDED, viewUtils, parentInjector, declarationEl, import7.ChangeDetectorStatus.CheckAlways);
    }
    _View_SelectedFlagDataComponent1.prototype.createInternal = function (rootSelector) {
        this._el_0 = import4.createRenderElement(this.renderer, null, 'div', new import4.InlineArray2(2, 'class', 'col-md-12'), null);
        this._SelectableDirective_0_3 = new import20.Wrapper_SelectableDirective(this.parent._RtSelectionEventsHelper_0_4);
        this._text_1 = this.renderer.createText(this._el_0, '\n    ', null);
        this._anchor_2 = this.renderer.createTemplateAnchor(this._el_0, null);
        this._appEl_2 = new import3.AppElement(2, 0, this, this._anchor_2);
        this._TemplateRef_2_5 = new import16.TemplateRef_(this._appEl_2, viewFactory_SelectedFlagDataComponent2);
        this._NgIf_2_6 = new import21.Wrapper_NgIf(this._appEl_2.vcRef, this._TemplateRef_2_5);
        this._text_3 = this.renderer.createText(this._el_0, '\n    ', null);
        this._anchor_4 = this.renderer.createTemplateAnchor(this._el_0, null);
        this._appEl_4 = new import3.AppElement(4, 0, this, this._anchor_4);
        this._TemplateRef_4_5 = new import16.TemplateRef_(this._appEl_4, viewFactory_SelectedFlagDataComponent3);
        this._NgIf_4_6 = new import21.Wrapper_NgIf(this._appEl_4.vcRef, this._TemplateRef_4_5);
        this._text_5 = this.renderer.createText(this._el_0, '\n  ', null);
        var disposable_0 = import4.subscribeToRenderElement(this, this._el_0, new import4.InlineArray2(2, 'mouseup', null), this.eventHandler(this.handleEvent_0));
        this.init(this._el_0, [
            this._el_0,
            this._text_1,
            this._anchor_2,
            this._text_3,
            this._anchor_4,
            this._text_5
        ], [disposable_0]);
        return null;
    };
    _View_SelectedFlagDataComponent1.prototype.injectorGetInternal = function (token, requestNodeIndex, notFoundResult) {
        if (((token === import16.TemplateRef) && (2 === requestNodeIndex))) {
            return this._TemplateRef_2_5;
        }
        if (((token === import22.NgIf) && (2 === requestNodeIndex))) {
            return this._NgIf_2_6.context;
        }
        if (((token === import16.TemplateRef) && (4 === requestNodeIndex))) {
            return this._TemplateRef_4_5;
        }
        if (((token === import22.NgIf) && (4 === requestNodeIndex))) {
            return this._NgIf_4_6.context;
        }
        if (((token === import23.SelectableDirective) && ((0 <= requestNodeIndex) && (requestNodeIndex <= 5)))) {
            return this._SelectableDirective_0_3.context;
        }
        return notFoundResult;
    };
    _View_SelectedFlagDataComponent1.prototype.detectChangesInternal = function (throwOnChange) {
        var currVal_0_0_0 = this.context.$implicit;
        this._SelectableDirective_0_3.check_item(currVal_0_0_0, throwOnChange, false);
        this._SelectableDirective_0_3.ngDoCheck(this, this._el_0, throwOnChange);
        var currVal_2_0_0 = !this.context.$implicit.selected;
        this._NgIf_2_6.check_ngIf(currVal_2_0_0, throwOnChange, false);
        this._NgIf_2_6.ngDoCheck(this, this._anchor_2, throwOnChange);
        var currVal_4_0_0 = this.context.$implicit.selected;
        this._NgIf_4_6.check_ngIf(currVal_4_0_0, throwOnChange, false);
        this._NgIf_4_6.ngDoCheck(this, this._anchor_4, throwOnChange);
        this._appEl_2.detectChangesInNestedViews(throwOnChange);
        this._appEl_4.detectChangesInNestedViews(throwOnChange);
    };
    _View_SelectedFlagDataComponent1.prototype.dirtyParentQueriesInternal = function () {
        this.parent._query_SelectableDirective_0_0.setDirty();
    };
    _View_SelectedFlagDataComponent1.prototype.destroyInternal = function () {
        this._appEl_2.destroyNestedViews();
        this._appEl_4.destroyNestedViews();
        this._SelectableDirective_0_3.ngOnDestroy();
    };
    _View_SelectedFlagDataComponent1.prototype.visitRootNodesInternal = function (cb, ctx) {
        cb(this._el_0, ctx);
    };
    _View_SelectedFlagDataComponent1.prototype.handleEvent_0 = function (eventName, $event) {
        this.markPathToRootAsCheckOnce();
        var result = true;
        result = (this._SelectableDirective_0_3.handleEvent(eventName, $event) && result);
        return result;
    };
    return _View_SelectedFlagDataComponent1;
}(import1.AppView));
function viewFactory_SelectedFlagDataComponent1(viewUtils, parentInjector, declarationEl) {
    return new _View_SelectedFlagDataComponent1(viewUtils, parentInjector, declarationEl);
}
var _View_SelectedFlagDataComponent2 = (function (_super) {
    __extends(_View_SelectedFlagDataComponent2, _super);
    function _View_SelectedFlagDataComponent2(viewUtils, parentInjector, declarationEl) {
        _super.call(this, _View_SelectedFlagDataComponent2, renderType_SelectedFlagDataComponent, import6.ViewType.EMBEDDED, viewUtils, parentInjector, declarationEl, import7.ChangeDetectorStatus.CheckAlways);
        this._expr_2 = import7.UNINITIALIZED;
        this._expr_3 = import7.UNINITIALIZED;
    }
    _View_SelectedFlagDataComponent2.prototype.createInternal = function (rootSelector) {
        this._el_0 = import4.createRenderElement(this.renderer, null, 'div', new import4.InlineArray2(2, 'class', 'item'), null);
        this._text_1 = this.renderer.createText(this._el_0, '', null);
        this.init(this._el_0, [
            this._el_0,
            this._text_1
        ], null);
        return null;
    };
    _View_SelectedFlagDataComponent2.prototype.detectChangesInternal = function (throwOnChange) {
        var currVal_2 = this.parent.context.$implicit.selected;
        if (import4.checkBinding(throwOnChange, this._expr_2, currVal_2)) {
            this.renderer.setElementClass(this._el_0, 'selected', currVal_2);
            this._expr_2 = currVal_2;
        }
        var currVal_3 = import4.interpolate(1, '\n      ', this.parent.context.$implicit.name, '\n    ');
        if (import4.checkBinding(throwOnChange, this._expr_3, currVal_3)) {
            this.renderer.setText(this._text_1, currVal_3);
            this._expr_3 = currVal_3;
        }
    };
    _View_SelectedFlagDataComponent2.prototype.visitRootNodesInternal = function (cb, ctx) {
        cb(this._el_0, ctx);
    };
    return _View_SelectedFlagDataComponent2;
}(import1.AppView));
function viewFactory_SelectedFlagDataComponent2(viewUtils, parentInjector, declarationEl) {
    return new _View_SelectedFlagDataComponent2(viewUtils, parentInjector, declarationEl);
}
var _View_SelectedFlagDataComponent3 = (function (_super) {
    __extends(_View_SelectedFlagDataComponent3, _super);
    function _View_SelectedFlagDataComponent3(viewUtils, parentInjector, declarationEl) {
        _super.call(this, _View_SelectedFlagDataComponent3, renderType_SelectedFlagDataComponent, import6.ViewType.EMBEDDED, viewUtils, parentInjector, declarationEl, import7.ChangeDetectorStatus.CheckAlways);
        this._expr_11 = import7.UNINITIALIZED;
    }
    _View_SelectedFlagDataComponent3.prototype.createInternal = function (rootSelector) {
        this._el_0 = import4.createRenderElement(this.renderer, null, 'div', new import4.InlineArray2(2, 'class', 'item'), null);
        this._text_1 = this.renderer.createText(this._el_0, '\n      ', null);
        this._el_2 = import4.createRenderElement(this.renderer, this._el_0, 'input', new import4.InlineArray16(10, 'class', 'form-control', 'name', 'name', 'rtFocusOnRender', '', 'rtStopEvents', 'mouseup', 'type', 'text'), null);
        this._DefaultValueAccessor_2_3 = new import24.Wrapper_DefaultValueAccessor(this.renderer, new import29.ElementRef(this._el_2));
        this._NG_VALUE_ACCESSOR_2_4 = [this._DefaultValueAccessor_2_3.context];
        this._NgModel_2_5 = new import25.Wrapper_NgModel(null, null, null, this._NG_VALUE_ACCESSOR_2_4);
        this._NgControl_2_6 = this._NgModel_2_5.context;
        this._NgControlStatus_2_7 = new import26.Wrapper_NgControlStatus(this._NgControl_2_6);
        this._FocusOnRenderDirective_2_8 = new import27.Wrapper_FocusOnRenderDirective(this.renderer, new import29.ElementRef(this._el_2));
        this._StopEventsDirective_2_9 = new import28.Wrapper_StopEventsDirective(new import29.ElementRef(this._el_2));
        this._text_3 = this.renderer.createText(this._el_0, '\n    ', null);
        var disposable_0 = import4.subscribeToRenderElement(this, this._el_2, new import4.InlineArray8(6, 'ngModelChange', null, 'input', null, 'blur', null), this.eventHandler(this.handleEvent_2));
        this._NgModel_2_5.subscribe(this, this.eventHandler(this.handleEvent_2), true);
        this.init(this._el_0, [
            this._el_0,
            this._text_1,
            this._el_2,
            this._text_3
        ], [disposable_0]);
        return null;
    };
    _View_SelectedFlagDataComponent3.prototype.injectorGetInternal = function (token, requestNodeIndex, notFoundResult) {
        if (((token === import30.DefaultValueAccessor) && (2 === requestNodeIndex))) {
            return this._DefaultValueAccessor_2_3.context;
        }
        if (((token === import31.NG_VALUE_ACCESSOR) && (2 === requestNodeIndex))) {
            return this._NG_VALUE_ACCESSOR_2_4;
        }
        if (((token === import32.NgModel) && (2 === requestNodeIndex))) {
            return this._NgModel_2_5.context;
        }
        if (((token === import33.NgControl) && (2 === requestNodeIndex))) {
            return this._NgControl_2_6;
        }
        if (((token === import34.NgControlStatus) && (2 === requestNodeIndex))) {
            return this._NgControlStatus_2_7.context;
        }
        if (((token === import35.FocusOnRenderDirective) && (2 === requestNodeIndex))) {
            return this._FocusOnRenderDirective_2_8.context;
        }
        if (((token === import36.StopEventsDirective) && (2 === requestNodeIndex))) {
            return this._StopEventsDirective_2_9.context;
        }
        return notFoundResult;
    };
    _View_SelectedFlagDataComponent3.prototype.detectChangesInternal = function (throwOnChange) {
        this._DefaultValueAccessor_2_3.ngDoCheck(this, this._el_2, throwOnChange);
        var currVal_2_1_0 = 'name';
        this._NgModel_2_5.check_name(currVal_2_1_0, throwOnChange, false);
        var currVal_2_1_1 = this.parent.context.$implicit.name;
        this._NgModel_2_5.check_model(currVal_2_1_1, throwOnChange, false);
        this._NgModel_2_5.ngDoCheck(this, this._el_2, throwOnChange);
        this._NgControlStatus_2_7.ngDoCheck(this, this._el_2, throwOnChange);
        this._FocusOnRenderDirective_2_8.ngDoCheck(this, this._el_2, throwOnChange);
        var currVal_2_4_0 = 'mouseup';
        this._StopEventsDirective_2_9.check_eventNames(currVal_2_4_0, throwOnChange, false);
        this._StopEventsDirective_2_9.ngDoCheck(this, this._el_2, throwOnChange);
        if (!throwOnChange) {
            if ((this.numberOfChecks === 0)) {
                this._FocusOnRenderDirective_2_8.context.ngAfterContentInit();
            }
        }
        var currVal_11 = this.parent.context.$implicit.selected;
        if (import4.checkBinding(throwOnChange, this._expr_11, currVal_11)) {
            this.renderer.setElementClass(this._el_0, 'selected', currVal_11);
            this._expr_11 = currVal_11;
        }
        this._NgControlStatus_2_7.checkHost(this, this, this._el_2, throwOnChange);
    };
    _View_SelectedFlagDataComponent3.prototype.destroyInternal = function () {
        this._NgModel_2_5.ngOnDestroy();
        this._StopEventsDirective_2_9.ngOnDestroy();
    };
    _View_SelectedFlagDataComponent3.prototype.visitRootNodesInternal = function (cb, ctx) {
        cb(this._el_0, ctx);
    };
    _View_SelectedFlagDataComponent3.prototype.handleEvent_2 = function (eventName, $event) {
        this.markPathToRootAsCheckOnce();
        var result = true;
        result = (this._DefaultValueAccessor_2_3.handleEvent(eventName, $event) && result);
        if ((eventName == 'ngModelChange')) {
            var pd_sub_0 = ((this.parent.context.$implicit.name = $event) !== false);
            result = (pd_sub_0 && result);
        }
        return result;
    };
    return _View_SelectedFlagDataComponent3;
}(import1.AppView));
function viewFactory_SelectedFlagDataComponent3(viewUtils, parentInjector, declarationEl) {
    return new _View_SelectedFlagDataComponent3(viewUtils, parentInjector, declarationEl);
}


/***/ },

/***/ "./src/compiled/src/app/+selection/selected-flag/selected-flag.component.ngfactory.ts":
/***/ function(module, exports, __webpack_require__) {

"use strict";
/**
 * This file is generated by the Angular 2 template compiler.
 * Do not edit.
 */
/* tslint:disable */
"use strict";
var import0 = __webpack_require__("./src/app/+selection/selected-flag/selected-flag.component.ts");
var import1 = __webpack_require__("./node_modules/@angular/core/src/linker/view.js");
var import3 = __webpack_require__("./node_modules/@angular/core/src/linker/element.js");
var import4 = __webpack_require__("./node_modules/@angular/core/src/linker/view_utils.js");
var import6 = __webpack_require__("./node_modules/@angular/core/src/linker/view_type.js");
var import7 = __webpack_require__("./node_modules/@angular/core/src/change_detection/change_detection.js");
var import8 = __webpack_require__("./src/app/+selection/countries.service.ts");
var import9 = __webpack_require__("./node_modules/@angular/core/src/metadata/view.js");
var import10 = __webpack_require__("./node_modules/@angular/core/src/linker/component_factory.js");
var import11 = __webpack_require__("./node_modules/right-angled/src/core/selection/selection-service.js");
var import12 = __webpack_require__("./node_modules/right-angled/src/core/providers.js");
var import13 = __webpack_require__("./src/compiled/node_modules/right-angled/src/selection-directives/selection-area.directive.ngfactory.ts");
var import14 = __webpack_require__("./node_modules/@angular/core/src/linker/query_list.js");
var import15 = __webpack_require__("./src/compiled/node_modules/@angular/common/src/directives/ng_for.ngfactory.ts");
var import16 = __webpack_require__("./node_modules/@angular/core/src/linker/template_ref.js");
var import17 = __webpack_require__("./node_modules/@angular/core/src/change_detection/differs/iterable_differs.js");
var import18 = __webpack_require__("./node_modules/@angular/common/src/directives/ng_for.js");
var import19 = __webpack_require__("./node_modules/right-angled/src/selection-directives/selection-area.directive.js");
var import20 = __webpack_require__("./src/compiled/node_modules/right-angled/src/selection-directives/selectable.directive.ngfactory.ts");
var import21 = __webpack_require__("./src/compiled/node_modules/@angular/common/src/directives/ng_if.ngfactory.ts");
var import22 = __webpack_require__("./node_modules/@angular/common/src/directives/ng_if.js");
var import23 = __webpack_require__("./node_modules/right-angled/src/selection-directives/selectable.directive.js");
var import24 = __webpack_require__("./src/compiled/node_modules/@angular/forms/src/directives/default_value_accessor.ngfactory.ts");
var import25 = __webpack_require__("./src/compiled/node_modules/@angular/forms/src/directives/ng_model.ngfactory.ts");
var import26 = __webpack_require__("./src/compiled/node_modules/@angular/forms/src/directives/ng_control_status.ngfactory.ts");
var import27 = __webpack_require__("./src/compiled/node_modules/right-angled/src/misc-directives/focus-on-render.directive.ngfactory.ts");
var import28 = __webpack_require__("./src/compiled/node_modules/right-angled/src/misc-directives/stop-events.directive.ngfactory.ts");
var import29 = __webpack_require__("./node_modules/@angular/core/src/linker/element_ref.js");
var import30 = __webpack_require__("./node_modules/@angular/forms/src/directives/default_value_accessor.js");
var import31 = __webpack_require__("./node_modules/@angular/forms/src/directives/control_value_accessor.js");
var import32 = __webpack_require__("./node_modules/@angular/forms/src/directives/ng_model.js");
var import33 = __webpack_require__("./node_modules/@angular/forms/src/directives/ng_control.js");
var import34 = __webpack_require__("./node_modules/@angular/forms/src/directives/ng_control_status.js");
var import35 = __webpack_require__("./node_modules/right-angled/src/misc-directives/focus-on-render.directive.js");
var import36 = __webpack_require__("./node_modules/right-angled/src/misc-directives/stop-events.directive.js");
var Wrapper_SelectedFlagComponent = (function () {
    function Wrapper_SelectedFlagComponent(p0) {
        this._changed = false;
        this.context = new import0.SelectedFlagComponent(p0);
    }
    Wrapper_SelectedFlagComponent.prototype.ngOnDetach = function (view, componentView, el) {
    };
    Wrapper_SelectedFlagComponent.prototype.ngOnDestroy = function () {
    };
    Wrapper_SelectedFlagComponent.prototype.ngDoCheck = function (view, el, throwOnChange) {
        var changed = this._changed;
        this._changed = false;
        return changed;
    };
    Wrapper_SelectedFlagComponent.prototype.checkHost = function (view, componentView, el, throwOnChange) {
    };
    Wrapper_SelectedFlagComponent.prototype.handleEvent = function (eventName, $event) {
        var result = true;
        return result;
    };
    Wrapper_SelectedFlagComponent.prototype.subscribe = function (view, _eventHandler) {
        this._eventHandler = _eventHandler;
    };
    return Wrapper_SelectedFlagComponent;
}());
exports.Wrapper_SelectedFlagComponent = Wrapper_SelectedFlagComponent;
var renderType_SelectedFlagComponent_Host = null;
var _View_SelectedFlagComponent_Host0 = (function (_super) {
    __extends(_View_SelectedFlagComponent_Host0, _super);
    function _View_SelectedFlagComponent_Host0(viewUtils, parentInjector, declarationEl) {
        _super.call(this, _View_SelectedFlagComponent_Host0, renderType_SelectedFlagComponent_Host, import6.ViewType.HOST, viewUtils, parentInjector, declarationEl, import7.ChangeDetectorStatus.CheckAlways);
    }
    _View_SelectedFlagComponent_Host0.prototype.createInternal = function (rootSelector) {
        this._el_0 = import4.selectOrCreateRenderHostElement(this.renderer, 'rt-demo-selected-flag', import4.EMPTY_INLINE_ARRAY, rootSelector, null);
        this._appEl_0 = new import3.AppElement(0, null, this, this._el_0);
        this.compView_0 = viewFactory_SelectedFlagComponent0(this.viewUtils, this.injector(0), this._appEl_0);
        this._SelectedFlagComponent_0_4 = new Wrapper_SelectedFlagComponent(this.parentInjector.get(import8.CountriesService));
        this._appEl_0.initComponent(this._SelectedFlagComponent_0_4.context, this.compView_0);
        this.compView_0.create(this._SelectedFlagComponent_0_4.context, null);
        this.init(this._el_0, [this._el_0], null);
        return this._appEl_0;
    };
    _View_SelectedFlagComponent_Host0.prototype.injectorGetInternal = function (token, requestNodeIndex, notFoundResult) {
        if (((token === import0.SelectedFlagComponent) && (0 === requestNodeIndex))) {
            return this._SelectedFlagComponent_0_4.context;
        }
        return notFoundResult;
    };
    _View_SelectedFlagComponent_Host0.prototype.detectChangesInternal = function (throwOnChange) {
        this._SelectedFlagComponent_0_4.ngDoCheck(this, this._el_0, throwOnChange);
        this.compView_0.detectChanges(throwOnChange);
    };
    _View_SelectedFlagComponent_Host0.prototype.destroyInternal = function () {
        this.compView_0.destroy();
    };
    _View_SelectedFlagComponent_Host0.prototype.visitRootNodesInternal = function (cb, ctx) {
        cb(this._el_0, ctx);
    };
    return _View_SelectedFlagComponent_Host0;
}(import1.AppView));
function viewFactory_SelectedFlagComponent_Host0(viewUtils, parentInjector, declarationEl) {
    if ((renderType_SelectedFlagComponent_Host === null)) {
        (renderType_SelectedFlagComponent_Host = viewUtils.createRenderComponentType('', 0, import9.ViewEncapsulation.None, [], {}));
    }
    return new _View_SelectedFlagComponent_Host0(viewUtils, parentInjector, declarationEl);
}
exports.SelectedFlagComponentNgFactory = new import10.ComponentFactory('rt-demo-selected-flag', viewFactory_SelectedFlagComponent_Host0, import0.SelectedFlagComponent);
var styles_SelectedFlagComponent = [];
var renderType_SelectedFlagComponent = null;
var _View_SelectedFlagComponent0 = (function (_super) {
    __extends(_View_SelectedFlagComponent0, _super);
    function _View_SelectedFlagComponent0(viewUtils, parentInjector, declarationEl) {
        _super.call(this, _View_SelectedFlagComponent0, renderType_SelectedFlagComponent, import6.ViewType.COMPONENT, viewUtils, parentInjector, declarationEl, import7.ChangeDetectorStatus.CheckAlways);
    }
    _View_SelectedFlagComponent0.prototype.createInternal = function (rootSelector) {
        var parentRenderNode = this.renderer.createViewRoot(this.declarationAppElement.nativeElement);
        this._el_0 = import4.createRenderElement(this.renderer, parentRenderNode, 'div', new import4.InlineArray4(4, 'class', 'row', 'rtSelectionArea', ''), null);
        this._RtSelectionService_0_3 = new import11.RtSelectionService();
        this._RtSelectionEventsHelper_0_4 = new import12.RtSelectionEventsHelper(this._RtSelectionService_0_3);
        this._SelectionAreaDirective_0_5 = new import13.Wrapper_SelectionAreaDirective(this._RtSelectionService_0_3, this._RtSelectionEventsHelper_0_4);
        this._query_SelectableDirective_0_0 = new import14.QueryList();
        this._query_SelectionCheckboxForDirective_0_1 = new import14.QueryList();
        this._query_SelectionAreaDirective_0_2 = new import14.QueryList();
        this._text_1 = this.renderer.createText(this._el_0, '\n  ', null);
        this._anchor_2 = this.renderer.createTemplateAnchor(this._el_0, null);
        this._appEl_2 = new import3.AppElement(2, 0, this, this._anchor_2);
        this._TemplateRef_2_5 = new import16.TemplateRef_(this._appEl_2, viewFactory_SelectedFlagComponent1);
        this._NgFor_2_6 = new import15.Wrapper_NgFor(this._appEl_2.vcRef, this._TemplateRef_2_5, this.parentInjector.get(import17.IterableDiffers), this.ref);
        this._text_3 = this.renderer.createText(this._el_0, '\n', null);
        var disposable_0 = import4.subscribeToRenderElement(this, this._el_0, new import4.InlineArray2(2, 'keydown', null), this.eventHandler(this.handleEvent_0));
        this.init(null, [
            this._el_0,
            this._text_1,
            this._anchor_2,
            this._text_3
        ], [disposable_0]);
        return null;
    };
    _View_SelectedFlagComponent0.prototype.injectorGetInternal = function (token, requestNodeIndex, notFoundResult) {
        if (((token === import16.TemplateRef) && (2 === requestNodeIndex))) {
            return this._TemplateRef_2_5;
        }
        if (((token === import18.NgFor) && (2 === requestNodeIndex))) {
            return this._NgFor_2_6.context;
        }
        if (((token === import11.RtSelectionService) && ((0 <= requestNodeIndex) && (requestNodeIndex <= 3)))) {
            return this._RtSelectionService_0_3;
        }
        if (((token === import12.RtSelectionEventsHelper) && ((0 <= requestNodeIndex) && (requestNodeIndex <= 3)))) {
            return this._RtSelectionEventsHelper_0_4;
        }
        if (((token === import19.SelectionAreaDirective) && ((0 <= requestNodeIndex) && (requestNodeIndex <= 3)))) {
            return this._SelectionAreaDirective_0_5.context;
        }
        return notFoundResult;
    };
    _View_SelectedFlagComponent0.prototype.detectChangesInternal = function (throwOnChange) {
        this._SelectionAreaDirective_0_5.ngDoCheck(this, this._el_0, throwOnChange);
        var currVal_2_0_0 = this.context.countries;
        this._NgFor_2_6.check_ngForOf(currVal_2_0_0, throwOnChange, false);
        this._NgFor_2_6.ngDoCheck(this, this._anchor_2, throwOnChange);
        this._appEl_2.detectChangesInNestedViews(throwOnChange);
        if (!throwOnChange) {
            if (this._query_SelectableDirective_0_0.dirty) {
                this._query_SelectableDirective_0_0.reset([this._appEl_2.mapNestedViews(_View_SelectedFlagComponent1, function (nestedView) {
                        return [nestedView._SelectableDirective_0_3.context];
                    })]);
                this._SelectionAreaDirective_0_5.context.selectableItems = this._query_SelectableDirective_0_0;
                this._query_SelectableDirective_0_0.notifyOnChanges();
            }
            if (this._query_SelectionCheckboxForDirective_0_1.dirty) {
                this._query_SelectionCheckboxForDirective_0_1.reset([]);
                this._SelectionAreaDirective_0_5.context.childSelectionCheckboxes = this._query_SelectionCheckboxForDirective_0_1;
                this._query_SelectionCheckboxForDirective_0_1.notifyOnChanges();
            }
            if (this._query_SelectionAreaDirective_0_2.dirty) {
                this._query_SelectionAreaDirective_0_2.reset([this._SelectionAreaDirective_0_5.context]);
                this._SelectionAreaDirective_0_5.context.childSelectionAreas = this._query_SelectionAreaDirective_0_2;
                this._query_SelectionAreaDirective_0_2.notifyOnChanges();
            }
            if ((this.numberOfChecks === 0)) {
                this._SelectionAreaDirective_0_5.context.ngAfterContentInit();
            }
        }
        this._SelectionAreaDirective_0_5.checkHost(this, this, this._el_0, throwOnChange);
    };
    _View_SelectedFlagComponent0.prototype.destroyInternal = function () {
        this._appEl_2.destroyNestedViews();
        this._SelectionAreaDirective_0_5.ngOnDestroy();
    };
    _View_SelectedFlagComponent0.prototype.handleEvent_0 = function (eventName, $event) {
        this.markPathToRootAsCheckOnce();
        var result = true;
        result = (this._SelectionAreaDirective_0_5.handleEvent(eventName, $event) && result);
        return result;
    };
    return _View_SelectedFlagComponent0;
}(import1.AppView));
function viewFactory_SelectedFlagComponent0(viewUtils, parentInjector, declarationEl) {
    if ((renderType_SelectedFlagComponent === null)) {
        (renderType_SelectedFlagComponent = viewUtils.createRenderComponentType('', 0, import9.ViewEncapsulation.None, styles_SelectedFlagComponent, {}));
    }
    return new _View_SelectedFlagComponent0(viewUtils, parentInjector, declarationEl);
}
exports.viewFactory_SelectedFlagComponent0 = viewFactory_SelectedFlagComponent0;
var _View_SelectedFlagComponent1 = (function (_super) {
    __extends(_View_SelectedFlagComponent1, _super);
    function _View_SelectedFlagComponent1(viewUtils, parentInjector, declarationEl) {
        _super.call(this, _View_SelectedFlagComponent1, renderType_SelectedFlagComponent, import6.ViewType.EMBEDDED, viewUtils, parentInjector, declarationEl, import7.ChangeDetectorStatus.CheckAlways);
    }
    _View_SelectedFlagComponent1.prototype.createInternal = function (rootSelector) {
        this._el_0 = import4.createRenderElement(this.renderer, null, 'div', new import4.InlineArray2(2, 'class', 'col-md-12'), null);
        this._SelectableDirective_0_3 = new import20.Wrapper_SelectableDirective(this.parent._RtSelectionEventsHelper_0_4);
        this._text_1 = this.renderer.createText(this._el_0, '\n    ', null);
        this._anchor_2 = this.renderer.createTemplateAnchor(this._el_0, null);
        this._appEl_2 = new import3.AppElement(2, 0, this, this._anchor_2);
        this._TemplateRef_2_5 = new import16.TemplateRef_(this._appEl_2, viewFactory_SelectedFlagComponent2);
        this._NgIf_2_6 = new import21.Wrapper_NgIf(this._appEl_2.vcRef, this._TemplateRef_2_5);
        this._text_3 = this.renderer.createText(this._el_0, '\n    ', null);
        this._anchor_4 = this.renderer.createTemplateAnchor(this._el_0, null);
        this._appEl_4 = new import3.AppElement(4, 0, this, this._anchor_4);
        this._TemplateRef_4_5 = new import16.TemplateRef_(this._appEl_4, viewFactory_SelectedFlagComponent3);
        this._NgIf_4_6 = new import21.Wrapper_NgIf(this._appEl_4.vcRef, this._TemplateRef_4_5);
        this._text_5 = this.renderer.createText(this._el_0, '\n  ', null);
        var disposable_0 = import4.subscribeToRenderElement(this, this._el_0, new import4.InlineArray2(2, 'mouseup', null), this.eventHandler(this.handleEvent_0));
        this.init(this._el_0, [
            this._el_0,
            this._text_1,
            this._anchor_2,
            this._text_3,
            this._anchor_4,
            this._text_5
        ], [disposable_0]);
        return null;
    };
    _View_SelectedFlagComponent1.prototype.injectorGetInternal = function (token, requestNodeIndex, notFoundResult) {
        if (((token === import16.TemplateRef) && (2 === requestNodeIndex))) {
            return this._TemplateRef_2_5;
        }
        if (((token === import22.NgIf) && (2 === requestNodeIndex))) {
            return this._NgIf_2_6.context;
        }
        if (((token === import16.TemplateRef) && (4 === requestNodeIndex))) {
            return this._TemplateRef_4_5;
        }
        if (((token === import22.NgIf) && (4 === requestNodeIndex))) {
            return this._NgIf_4_6.context;
        }
        if (((token === import23.SelectableDirective) && ((0 <= requestNodeIndex) && (requestNodeIndex <= 5)))) {
            return this._SelectableDirective_0_3.context;
        }
        return notFoundResult;
    };
    _View_SelectedFlagComponent1.prototype.detectChangesInternal = function (throwOnChange) {
        var currVal_0_0_0 = this.context.$implicit;
        this._SelectableDirective_0_3.check_item(currVal_0_0_0, throwOnChange, false);
        this._SelectableDirective_0_3.ngDoCheck(this, this._el_0, throwOnChange);
        var currVal_2_0_0 = !this._SelectableDirective_0_3.context.selected;
        this._NgIf_2_6.check_ngIf(currVal_2_0_0, throwOnChange, false);
        this._NgIf_2_6.ngDoCheck(this, this._anchor_2, throwOnChange);
        var currVal_4_0_0 = this._SelectableDirective_0_3.context.selected;
        this._NgIf_4_6.check_ngIf(currVal_4_0_0, throwOnChange, false);
        this._NgIf_4_6.ngDoCheck(this, this._anchor_4, throwOnChange);
        this._appEl_2.detectChangesInNestedViews(throwOnChange);
        this._appEl_4.detectChangesInNestedViews(throwOnChange);
    };
    _View_SelectedFlagComponent1.prototype.dirtyParentQueriesInternal = function () {
        this.parent._query_SelectableDirective_0_0.setDirty();
    };
    _View_SelectedFlagComponent1.prototype.destroyInternal = function () {
        this._appEl_2.destroyNestedViews();
        this._appEl_4.destroyNestedViews();
        this._SelectableDirective_0_3.ngOnDestroy();
    };
    _View_SelectedFlagComponent1.prototype.visitRootNodesInternal = function (cb, ctx) {
        cb(this._el_0, ctx);
    };
    _View_SelectedFlagComponent1.prototype.handleEvent_0 = function (eventName, $event) {
        this.markPathToRootAsCheckOnce();
        var result = true;
        result = (this._SelectableDirective_0_3.handleEvent(eventName, $event) && result);
        return result;
    };
    return _View_SelectedFlagComponent1;
}(import1.AppView));
function viewFactory_SelectedFlagComponent1(viewUtils, parentInjector, declarationEl) {
    return new _View_SelectedFlagComponent1(viewUtils, parentInjector, declarationEl);
}
var _View_SelectedFlagComponent2 = (function (_super) {
    __extends(_View_SelectedFlagComponent2, _super);
    function _View_SelectedFlagComponent2(viewUtils, parentInjector, declarationEl) {
        _super.call(this, _View_SelectedFlagComponent2, renderType_SelectedFlagComponent, import6.ViewType.EMBEDDED, viewUtils, parentInjector, declarationEl, import7.ChangeDetectorStatus.CheckAlways);
        this._expr_2 = import7.UNINITIALIZED;
        this._expr_3 = import7.UNINITIALIZED;
    }
    _View_SelectedFlagComponent2.prototype.createInternal = function (rootSelector) {
        this._el_0 = import4.createRenderElement(this.renderer, null, 'div', new import4.InlineArray2(2, 'class', 'item'), null);
        this._text_1 = this.renderer.createText(this._el_0, '', null);
        this.init(this._el_0, [
            this._el_0,
            this._text_1
        ], null);
        return null;
    };
    _View_SelectedFlagComponent2.prototype.detectChangesInternal = function (throwOnChange) {
        var currVal_2 = this.parent._SelectableDirective_0_3.context.selected;
        if (import4.checkBinding(throwOnChange, this._expr_2, currVal_2)) {
            this.renderer.setElementClass(this._el_0, 'selected', currVal_2);
            this._expr_2 = currVal_2;
        }
        var currVal_3 = import4.interpolate(1, '\n      ', this.parent.context.$implicit.name, '\n    ');
        if (import4.checkBinding(throwOnChange, this._expr_3, currVal_3)) {
            this.renderer.setText(this._text_1, currVal_3);
            this._expr_3 = currVal_3;
        }
    };
    _View_SelectedFlagComponent2.prototype.visitRootNodesInternal = function (cb, ctx) {
        cb(this._el_0, ctx);
    };
    return _View_SelectedFlagComponent2;
}(import1.AppView));
function viewFactory_SelectedFlagComponent2(viewUtils, parentInjector, declarationEl) {
    return new _View_SelectedFlagComponent2(viewUtils, parentInjector, declarationEl);
}
var _View_SelectedFlagComponent3 = (function (_super) {
    __extends(_View_SelectedFlagComponent3, _super);
    function _View_SelectedFlagComponent3(viewUtils, parentInjector, declarationEl) {
        _super.call(this, _View_SelectedFlagComponent3, renderType_SelectedFlagComponent, import6.ViewType.EMBEDDED, viewUtils, parentInjector, declarationEl, import7.ChangeDetectorStatus.CheckAlways);
        this._expr_11 = import7.UNINITIALIZED;
    }
    _View_SelectedFlagComponent3.prototype.createInternal = function (rootSelector) {
        this._el_0 = import4.createRenderElement(this.renderer, null, 'div', new import4.InlineArray2(2, 'class', 'item'), null);
        this._text_1 = this.renderer.createText(this._el_0, '\n      ', null);
        this._el_2 = import4.createRenderElement(this.renderer, this._el_0, 'input', new import4.InlineArray16(10, 'class', 'form-control', 'name', 'name', 'rtFocusOnRender', '', 'rtStopEvents', 'mouseup', 'type', 'text'), null);
        this._DefaultValueAccessor_2_3 = new import24.Wrapper_DefaultValueAccessor(this.renderer, new import29.ElementRef(this._el_2));
        this._NG_VALUE_ACCESSOR_2_4 = [this._DefaultValueAccessor_2_3.context];
        this._NgModel_2_5 = new import25.Wrapper_NgModel(null, null, null, this._NG_VALUE_ACCESSOR_2_4);
        this._NgControl_2_6 = this._NgModel_2_5.context;
        this._NgControlStatus_2_7 = new import26.Wrapper_NgControlStatus(this._NgControl_2_6);
        this._FocusOnRenderDirective_2_8 = new import27.Wrapper_FocusOnRenderDirective(this.renderer, new import29.ElementRef(this._el_2));
        this._StopEventsDirective_2_9 = new import28.Wrapper_StopEventsDirective(new import29.ElementRef(this._el_2));
        this._text_3 = this.renderer.createText(this._el_0, '\n    ', null);
        var disposable_0 = import4.subscribeToRenderElement(this, this._el_2, new import4.InlineArray8(6, 'ngModelChange', null, 'input', null, 'blur', null), this.eventHandler(this.handleEvent_2));
        this._NgModel_2_5.subscribe(this, this.eventHandler(this.handleEvent_2), true);
        this.init(this._el_0, [
            this._el_0,
            this._text_1,
            this._el_2,
            this._text_3
        ], [disposable_0]);
        return null;
    };
    _View_SelectedFlagComponent3.prototype.injectorGetInternal = function (token, requestNodeIndex, notFoundResult) {
        if (((token === import30.DefaultValueAccessor) && (2 === requestNodeIndex))) {
            return this._DefaultValueAccessor_2_3.context;
        }
        if (((token === import31.NG_VALUE_ACCESSOR) && (2 === requestNodeIndex))) {
            return this._NG_VALUE_ACCESSOR_2_4;
        }
        if (((token === import32.NgModel) && (2 === requestNodeIndex))) {
            return this._NgModel_2_5.context;
        }
        if (((token === import33.NgControl) && (2 === requestNodeIndex))) {
            return this._NgControl_2_6;
        }
        if (((token === import34.NgControlStatus) && (2 === requestNodeIndex))) {
            return this._NgControlStatus_2_7.context;
        }
        if (((token === import35.FocusOnRenderDirective) && (2 === requestNodeIndex))) {
            return this._FocusOnRenderDirective_2_8.context;
        }
        if (((token === import36.StopEventsDirective) && (2 === requestNodeIndex))) {
            return this._StopEventsDirective_2_9.context;
        }
        return notFoundResult;
    };
    _View_SelectedFlagComponent3.prototype.detectChangesInternal = function (throwOnChange) {
        this._DefaultValueAccessor_2_3.ngDoCheck(this, this._el_2, throwOnChange);
        var currVal_2_1_0 = 'name';
        this._NgModel_2_5.check_name(currVal_2_1_0, throwOnChange, false);
        var currVal_2_1_1 = this.parent.context.$implicit.name;
        this._NgModel_2_5.check_model(currVal_2_1_1, throwOnChange, false);
        this._NgModel_2_5.ngDoCheck(this, this._el_2, throwOnChange);
        this._NgControlStatus_2_7.ngDoCheck(this, this._el_2, throwOnChange);
        this._FocusOnRenderDirective_2_8.ngDoCheck(this, this._el_2, throwOnChange);
        var currVal_2_4_0 = 'mouseup';
        this._StopEventsDirective_2_9.check_eventNames(currVal_2_4_0, throwOnChange, false);
        this._StopEventsDirective_2_9.ngDoCheck(this, this._el_2, throwOnChange);
        if (!throwOnChange) {
            if ((this.numberOfChecks === 0)) {
                this._FocusOnRenderDirective_2_8.context.ngAfterContentInit();
            }
        }
        var currVal_11 = this.parent._SelectableDirective_0_3.context.selected;
        if (import4.checkBinding(throwOnChange, this._expr_11, currVal_11)) {
            this.renderer.setElementClass(this._el_0, 'selected', currVal_11);
            this._expr_11 = currVal_11;
        }
        this._NgControlStatus_2_7.checkHost(this, this, this._el_2, throwOnChange);
    };
    _View_SelectedFlagComponent3.prototype.destroyInternal = function () {
        this._NgModel_2_5.ngOnDestroy();
        this._StopEventsDirective_2_9.ngOnDestroy();
    };
    _View_SelectedFlagComponent3.prototype.visitRootNodesInternal = function (cb, ctx) {
        cb(this._el_0, ctx);
    };
    _View_SelectedFlagComponent3.prototype.handleEvent_2 = function (eventName, $event) {
        this.markPathToRootAsCheckOnce();
        var result = true;
        result = (this._DefaultValueAccessor_2_3.handleEvent(eventName, $event) && result);
        if ((eventName == 'ngModelChange')) {
            var pd_sub_0 = ((this.parent.context.$implicit.name = $event) !== false);
            result = (pd_sub_0 && result);
        }
        return result;
    };
    return _View_SelectedFlagComponent3;
}(import1.AppView));
function viewFactory_SelectedFlagComponent3(viewUtils, parentInjector, declarationEl) {
    return new _View_SelectedFlagComponent3(viewUtils, parentInjector, declarationEl);
}


/***/ },

/***/ "./src/compiled/src/app/+selection/selection-checkbox/selection-checkbox.component.css.shim.ts":
/***/ function(module, exports) {

"use strict";
/**
 * This file is generated by the Angular 2 template compiler.
 * Do not edit.
 */
/* tslint:disable */
"use strict";
exports.styles = ['[_nghost-%COMP%]   div.toolbar[_ngcontent-%COMP%]   ul[_ngcontent-%COMP%]{padding-left:17px;list-style:none;margin-bottom:0}[_nghost-%COMP%]   div.toolbar[_ngcontent-%COMP%]   ul[_ngcontent-%COMP%]   li[_ngcontent-%COMP%]{display:inline-block;padding-right:5px;padding-left:5px}'];


/***/ },

/***/ "./src/compiled/src/app/+selection/selection-checkbox/selection-checkbox.component.ngfactory.ts":
/***/ function(module, exports, __webpack_require__) {

"use strict";
/**
 * This file is generated by the Angular 2 template compiler.
 * Do not edit.
 */
/* tslint:disable */
"use strict";
var import0 = __webpack_require__("./src/app/+selection/selection-checkbox/selection-checkbox.component.ts");
var import1 = __webpack_require__("./node_modules/@angular/core/src/linker/view.js");
var import3 = __webpack_require__("./node_modules/@angular/core/src/linker/element.js");
var import4 = __webpack_require__("./node_modules/@angular/core/src/linker/view_utils.js");
var import6 = __webpack_require__("./node_modules/@angular/core/src/linker/view_type.js");
var import7 = __webpack_require__("./node_modules/@angular/core/src/change_detection/change_detection.js");
var import8 = __webpack_require__("./src/app/+selection/countries.service.ts");
var import9 = __webpack_require__("./node_modules/@angular/core/src/metadata/view.js");
var import10 = __webpack_require__("./node_modules/@angular/core/src/linker/component_factory.js");
var import11 = __webpack_require__("./src/compiled/src/app/+selection/selection-checkbox/selection-checkbox.component.css.shim.ts");
var import12 = __webpack_require__("./node_modules/right-angled/src/core/selection/selection-service.js");
var import13 = __webpack_require__("./node_modules/right-angled/src/core/providers.js");
var import14 = __webpack_require__("./src/compiled/node_modules/right-angled/src/selection-directives/selection-area.directive.ngfactory.ts");
var import15 = __webpack_require__("./node_modules/@angular/core/src/linker/query_list.js");
var import16 = __webpack_require__("./src/compiled/node_modules/@angular/common/src/directives/ng_for.ngfactory.ts");
var import17 = __webpack_require__("./node_modules/@angular/common/src/pipes/async_pipe.js");
var import18 = __webpack_require__("./node_modules/@angular/core/src/linker/template_ref.js");
var import19 = __webpack_require__("./node_modules/@angular/core/src/change_detection/differs/iterable_differs.js");
var import20 = __webpack_require__("./node_modules/@angular/common/src/directives/ng_for.js");
var import21 = __webpack_require__("./node_modules/right-angled/src/selection-directives/selection-area.directive.js");
var import22 = __webpack_require__("./src/compiled/node_modules/right-angled/src/selection-directives/selection-checkbox-for.directive.ngfactory.ts");
var import23 = __webpack_require__("./src/compiled/node_modules/@angular/common/src/directives/ng_if.ngfactory.ts");
var import24 = __webpack_require__("./node_modules/right-angled/src/selection-directives/selection-checkbox-for.directive.js");
var import25 = __webpack_require__("./node_modules/@angular/common/src/directives/ng_if.js");
var Wrapper_SelectionCheckboxComponent = (function () {
    function Wrapper_SelectionCheckboxComponent(p0) {
        this._changed = false;
        this.context = new import0.SelectionCheckboxComponent(p0);
    }
    Wrapper_SelectionCheckboxComponent.prototype.ngOnDetach = function (view, componentView, el) {
    };
    Wrapper_SelectionCheckboxComponent.prototype.ngOnDestroy = function () {
    };
    Wrapper_SelectionCheckboxComponent.prototype.ngDoCheck = function (view, el, throwOnChange) {
        var changed = this._changed;
        this._changed = false;
        return changed;
    };
    Wrapper_SelectionCheckboxComponent.prototype.checkHost = function (view, componentView, el, throwOnChange) {
    };
    Wrapper_SelectionCheckboxComponent.prototype.handleEvent = function (eventName, $event) {
        var result = true;
        return result;
    };
    Wrapper_SelectionCheckboxComponent.prototype.subscribe = function (view, _eventHandler) {
        this._eventHandler = _eventHandler;
    };
    return Wrapper_SelectionCheckboxComponent;
}());
exports.Wrapper_SelectionCheckboxComponent = Wrapper_SelectionCheckboxComponent;
var renderType_SelectionCheckboxComponent_Host = null;
var _View_SelectionCheckboxComponent_Host0 = (function (_super) {
    __extends(_View_SelectionCheckboxComponent_Host0, _super);
    function _View_SelectionCheckboxComponent_Host0(viewUtils, parentInjector, declarationEl) {
        _super.call(this, _View_SelectionCheckboxComponent_Host0, renderType_SelectionCheckboxComponent_Host, import6.ViewType.HOST, viewUtils, parentInjector, declarationEl, import7.ChangeDetectorStatus.CheckAlways);
    }
    _View_SelectionCheckboxComponent_Host0.prototype.createInternal = function (rootSelector) {
        this._el_0 = import4.selectOrCreateRenderHostElement(this.renderer, 'rt-demo-selection-checkbox', import4.EMPTY_INLINE_ARRAY, rootSelector, null);
        this._appEl_0 = new import3.AppElement(0, null, this, this._el_0);
        this.compView_0 = viewFactory_SelectionCheckboxComponent0(this.viewUtils, this.injector(0), this._appEl_0);
        this._SelectionCheckboxComponent_0_4 = new Wrapper_SelectionCheckboxComponent(this.parentInjector.get(import8.CountriesService));
        this._appEl_0.initComponent(this._SelectionCheckboxComponent_0_4.context, this.compView_0);
        this.compView_0.create(this._SelectionCheckboxComponent_0_4.context, null);
        this.init(this._el_0, [this._el_0], null);
        return this._appEl_0;
    };
    _View_SelectionCheckboxComponent_Host0.prototype.injectorGetInternal = function (token, requestNodeIndex, notFoundResult) {
        if (((token === import0.SelectionCheckboxComponent) && (0 === requestNodeIndex))) {
            return this._SelectionCheckboxComponent_0_4.context;
        }
        return notFoundResult;
    };
    _View_SelectionCheckboxComponent_Host0.prototype.detectChangesInternal = function (throwOnChange) {
        this._SelectionCheckboxComponent_0_4.ngDoCheck(this, this._el_0, throwOnChange);
        this.compView_0.detectChanges(throwOnChange);
    };
    _View_SelectionCheckboxComponent_Host0.prototype.destroyInternal = function () {
        this.compView_0.destroy();
    };
    _View_SelectionCheckboxComponent_Host0.prototype.visitRootNodesInternal = function (cb, ctx) {
        cb(this._el_0, ctx);
    };
    return _View_SelectionCheckboxComponent_Host0;
}(import1.AppView));
function viewFactory_SelectionCheckboxComponent_Host0(viewUtils, parentInjector, declarationEl) {
    if ((renderType_SelectionCheckboxComponent_Host === null)) {
        (renderType_SelectionCheckboxComponent_Host = viewUtils.createRenderComponentType('', 0, import9.ViewEncapsulation.None, [], {}));
    }
    return new _View_SelectionCheckboxComponent_Host0(viewUtils, parentInjector, declarationEl);
}
exports.SelectionCheckboxComponentNgFactory = new import10.ComponentFactory('rt-demo-selection-checkbox', viewFactory_SelectionCheckboxComponent_Host0, import0.SelectionCheckboxComponent);
var styles_SelectionCheckboxComponent = [import11.styles];
var renderType_SelectionCheckboxComponent = null;
var _View_SelectionCheckboxComponent0 = (function (_super) {
    __extends(_View_SelectionCheckboxComponent0, _super);
    function _View_SelectionCheckboxComponent0(viewUtils, parentInjector, declarationEl) {
        _super.call(this, _View_SelectionCheckboxComponent0, renderType_SelectionCheckboxComponent, import6.ViewType.COMPONENT, viewUtils, parentInjector, declarationEl, import7.ChangeDetectorStatus.CheckAlways);
    }
    _View_SelectionCheckboxComponent0.prototype.createInternal = function (rootSelector) {
        var parentRenderNode = this.renderer.createViewRoot(this.declarationAppElement.nativeElement);
        this._el_0 = import4.createRenderElement(this.renderer, parentRenderNode, 'div', new import4.InlineArray4(4, 'class', 'row', 'rtSelectionArea', ''), null);
        this._RtSelectionService_0_3 = new import12.RtSelectionService();
        this._RtSelectionEventsHelper_0_4 = new import13.RtSelectionEventsHelper(this._RtSelectionService_0_3);
        this._SelectionAreaDirective_0_5 = new import14.Wrapper_SelectionAreaDirective(this._RtSelectionService_0_3, this._RtSelectionEventsHelper_0_4);
        this._query_SelectableDirective_0_0 = new import15.QueryList();
        this._query_SelectionCheckboxForDirective_0_1 = new import15.QueryList();
        this._query_SelectionAreaDirective_0_2 = new import15.QueryList();
        this._text_1 = this.renderer.createText(this._el_0, '\n  ', null);
        this._anchor_2 = this.renderer.createTemplateAnchor(this._el_0, null);
        this._appEl_2 = new import3.AppElement(2, 0, this, this._anchor_2);
        this._TemplateRef_2_5 = new import18.TemplateRef_(this._appEl_2, viewFactory_SelectionCheckboxComponent1);
        this._NgFor_2_6 = new import16.Wrapper_NgFor(this._appEl_2.vcRef, this._TemplateRef_2_5, this.parentInjector.get(import19.IterableDiffers), this.ref);
        this._text_3 = this.renderer.createText(this._el_0, '\n', null);
        var disposable_0 = import4.subscribeToRenderElement(this, this._el_0, new import4.InlineArray2(2, 'keydown', null), this.eventHandler(this.handleEvent_0));
        this._pipe_async_0 = new import17.AsyncPipe(this.ref);
        this.init(null, [
            this._el_0,
            this._text_1,
            this._anchor_2,
            this._text_3
        ], [disposable_0]);
        return null;
    };
    _View_SelectionCheckboxComponent0.prototype.injectorGetInternal = function (token, requestNodeIndex, notFoundResult) {
        if (((token === import18.TemplateRef) && (2 === requestNodeIndex))) {
            return this._TemplateRef_2_5;
        }
        if (((token === import20.NgFor) && (2 === requestNodeIndex))) {
            return this._NgFor_2_6.context;
        }
        if (((token === import12.RtSelectionService) && ((0 <= requestNodeIndex) && (requestNodeIndex <= 3)))) {
            return this._RtSelectionService_0_3;
        }
        if (((token === import13.RtSelectionEventsHelper) && ((0 <= requestNodeIndex) && (requestNodeIndex <= 3)))) {
            return this._RtSelectionEventsHelper_0_4;
        }
        if (((token === import21.SelectionAreaDirective) && ((0 <= requestNodeIndex) && (requestNodeIndex <= 3)))) {
            return this._SelectionAreaDirective_0_5.context;
        }
        return notFoundResult;
    };
    _View_SelectionCheckboxComponent0.prototype.detectChangesInternal = function (throwOnChange) {
        var valUnwrapper = new import7.ValueUnwrapper();
        this._SelectionAreaDirective_0_5.ngDoCheck(this, this._el_0, throwOnChange);
        valUnwrapper.reset();
        var currVal_2_0_0 = valUnwrapper.unwrap(this._pipe_async_0.transform(this.context.regions));
        this._NgFor_2_6.check_ngForOf(currVal_2_0_0, throwOnChange, valUnwrapper.hasWrappedValue);
        this._NgFor_2_6.ngDoCheck(this, this._anchor_2, throwOnChange);
        this._appEl_2.detectChangesInNestedViews(throwOnChange);
        if (!throwOnChange) {
            if (this._query_SelectableDirective_0_0.dirty) {
                this._query_SelectableDirective_0_0.reset([]);
                this._SelectionAreaDirective_0_5.context.selectableItems = this._query_SelectableDirective_0_0;
                this._query_SelectableDirective_0_0.notifyOnChanges();
            }
            if (this._query_SelectionCheckboxForDirective_0_1.dirty) {
                this._query_SelectionCheckboxForDirective_0_1.reset([this._appEl_2.mapNestedViews(_View_SelectionCheckboxComponent1, function (nestedView) {
                        return [nestedView._SelectionCheckboxForDirective_6_3.context];
                    })]);
                this._SelectionAreaDirective_0_5.context.childSelectionCheckboxes = this._query_SelectionCheckboxForDirective_0_1;
                this._query_SelectionCheckboxForDirective_0_1.notifyOnChanges();
            }
            if (this._query_SelectionAreaDirective_0_2.dirty) {
                this._query_SelectionAreaDirective_0_2.reset([
                    this._SelectionAreaDirective_0_5.context,
                    this._appEl_2.mapNestedViews(_View_SelectionCheckboxComponent1, function (nestedView) {
                        return [nestedView._appEl_10.mapNestedViews(_View_SelectionCheckboxComponent2, function (nestedView) {
                                return [nestedView._SelectionAreaDirective_0_5.context];
                            })];
                    })
                ]);
                this._SelectionAreaDirective_0_5.context.childSelectionAreas = this._query_SelectionAreaDirective_0_2;
                this._query_SelectionAreaDirective_0_2.notifyOnChanges();
            }
            if ((this.numberOfChecks === 0)) {
                this._SelectionAreaDirective_0_5.context.ngAfterContentInit();
            }
        }
        this._SelectionAreaDirective_0_5.checkHost(this, this, this._el_0, throwOnChange);
    };
    _View_SelectionCheckboxComponent0.prototype.destroyInternal = function () {
        this._appEl_2.destroyNestedViews();
        this._SelectionAreaDirective_0_5.ngOnDestroy();
        this._pipe_async_0.ngOnDestroy();
    };
    _View_SelectionCheckboxComponent0.prototype.handleEvent_0 = function (eventName, $event) {
        this.markPathToRootAsCheckOnce();
        var result = true;
        result = (this._SelectionAreaDirective_0_5.handleEvent(eventName, $event) && result);
        return result;
    };
    return _View_SelectionCheckboxComponent0;
}(import1.AppView));
function viewFactory_SelectionCheckboxComponent0(viewUtils, parentInjector, declarationEl) {
    if ((renderType_SelectionCheckboxComponent === null)) {
        (renderType_SelectionCheckboxComponent = viewUtils.createRenderComponentType('', 0, import9.ViewEncapsulation.Emulated, styles_SelectionCheckboxComponent, {}));
    }
    return new _View_SelectionCheckboxComponent0(viewUtils, parentInjector, declarationEl);
}
exports.viewFactory_SelectionCheckboxComponent0 = viewFactory_SelectionCheckboxComponent0;
var _View_SelectionCheckboxComponent1 = (function (_super) {
    __extends(_View_SelectionCheckboxComponent1, _super);
    function _View_SelectionCheckboxComponent1(viewUtils, parentInjector, declarationEl) {
        _super.call(this, _View_SelectionCheckboxComponent1, renderType_SelectionCheckboxComponent, import6.ViewType.EMBEDDED, viewUtils, parentInjector, declarationEl, import7.ChangeDetectorStatus.CheckAlways);
        this._expr_16 = import7.UNINITIALIZED;
        this._expr_17 = import7.UNINITIALIZED;
    }
    _View_SelectionCheckboxComponent1.prototype.createInternal = function (rootSelector) {
        this._el_0 = import4.createRenderElement(this.renderer, null, 'div', new import4.InlineArray2(2, 'class', 'col-md-12'), null);
        this._text_1 = this.renderer.createText(this._el_0, '\n    ', null);
        this._el_2 = import4.createRenderElement(this.renderer, this._el_0, 'div', new import4.InlineArray2(2, 'class', 'col-md-12 item'), null);
        this._text_3 = this.renderer.createText(this._el_2, '\n      ', null);
        this._el_4 = import4.createRenderElement(this.renderer, this._el_2, 'label', new import4.InlineArray2(2, 'class', 'checkbox-inline'), null);
        this._text_5 = this.renderer.createText(this._el_4, '\n      ', null);
        this._el_6 = import4.createRenderElement(this.renderer, this._el_4, 'input', new import4.InlineArray2(2, 'type', 'checkbox'), null);
        this._SelectionCheckboxForDirective_6_3 = new import22.Wrapper_SelectionCheckboxForDirective(this.parent._RtSelectionService_0_3);
        this._text_7 = this.renderer.createText(this._el_4, '', null);
        this._text_8 = this.renderer.createText(this._el_2, '\n    ', null);
        this._text_9 = this.renderer.createText(this._el_0, '\n    ', null);
        this._anchor_10 = this.renderer.createTemplateAnchor(this._el_0, null);
        this._appEl_10 = new import3.AppElement(10, 0, this, this._anchor_10);
        this._TemplateRef_10_5 = new import18.TemplateRef_(this._appEl_10, viewFactory_SelectionCheckboxComponent2);
        this._NgIf_10_6 = new import23.Wrapper_NgIf(this._appEl_10.vcRef, this._TemplateRef_10_5);
        this._text_11 = this.renderer.createText(this._el_0, '\n  ', null);
        var disposable_0 = import4.subscribeToRenderElement(this, this._el_6, new import4.InlineArray2(2, 'change', null), this.eventHandler(this.handleEvent_6));
        this.init(this._el_0, [
            this._el_0,
            this._text_1,
            this._el_2,
            this._text_3,
            this._el_4,
            this._text_5,
            this._el_6,
            this._text_7,
            this._text_8,
            this._text_9,
            this._anchor_10,
            this._text_11
        ], [disposable_0]);
        return null;
    };
    _View_SelectionCheckboxComponent1.prototype.injectorGetInternal = function (token, requestNodeIndex, notFoundResult) {
        if (((token === import24.SelectionCheckboxForDirective) && (6 === requestNodeIndex))) {
            return this._SelectionCheckboxForDirective_6_3.context;
        }
        if (((token === import18.TemplateRef) && (10 === requestNodeIndex))) {
            return this._TemplateRef_10_5;
        }
        if (((token === import25.NgIf) && (10 === requestNodeIndex))) {
            return this._NgIf_10_6.context;
        }
        return notFoundResult;
    };
    _View_SelectionCheckboxComponent1.prototype.detectChangesInternal = function (throwOnChange) {
        var currVal_6_0_0 = this.context.$implicit;
        this._SelectionCheckboxForDirective_6_3.check_item(currVal_6_0_0, throwOnChange, false);
        this._SelectionCheckboxForDirective_6_3.ngDoCheck(this, this._el_6, throwOnChange);
        var currVal_10_0_0 = this.context.$implicit.selected;
        this._NgIf_10_6.check_ngIf(currVal_10_0_0, throwOnChange, false);
        this._NgIf_10_6.ngDoCheck(this, this._anchor_10, throwOnChange);
        this._appEl_10.detectChangesInNestedViews(throwOnChange);
        var currVal_16 = this.context.$implicit.selected;
        if (import4.checkBinding(throwOnChange, this._expr_16, currVal_16)) {
            this.renderer.setElementClass(this._el_2, 'selected', currVal_16);
            this._expr_16 = currVal_16;
        }
        this._SelectionCheckboxForDirective_6_3.checkHost(this, this, this._el_6, throwOnChange);
        var currVal_17 = import4.interpolate(2, ' ', this.context.$implicit.name, ' (', this.context.$implicit.countries.length, ' countries)\n      ');
        if (import4.checkBinding(throwOnChange, this._expr_17, currVal_17)) {
            this.renderer.setText(this._text_7, currVal_17);
            this._expr_17 = currVal_17;
        }
    };
    _View_SelectionCheckboxComponent1.prototype.dirtyParentQueriesInternal = function () {
        this.parent._query_SelectionCheckboxForDirective_0_1.setDirty();
    };
    _View_SelectionCheckboxComponent1.prototype.destroyInternal = function () {
        this._appEl_10.destroyNestedViews();
        this._SelectionCheckboxForDirective_6_3.ngOnDestroy();
    };
    _View_SelectionCheckboxComponent1.prototype.visitRootNodesInternal = function (cb, ctx) {
        cb(this._el_0, ctx);
    };
    _View_SelectionCheckboxComponent1.prototype.handleEvent_6 = function (eventName, $event) {
        this.markPathToRootAsCheckOnce();
        var result = true;
        result = (this._SelectionCheckboxForDirective_6_3.handleEvent(eventName, $event) && result);
        return result;
    };
    return _View_SelectionCheckboxComponent1;
}(import1.AppView));
function viewFactory_SelectionCheckboxComponent1(viewUtils, parentInjector, declarationEl) {
    return new _View_SelectionCheckboxComponent1(viewUtils, parentInjector, declarationEl);
}
var _View_SelectionCheckboxComponent2 = (function (_super) {
    __extends(_View_SelectionCheckboxComponent2, _super);
    function _View_SelectionCheckboxComponent2(viewUtils, parentInjector, declarationEl) {
        _super.call(this, _View_SelectionCheckboxComponent2, renderType_SelectionCheckboxComponent, import6.ViewType.EMBEDDED, viewUtils, parentInjector, declarationEl, import7.ChangeDetectorStatus.CheckAlways);
    }
    _View_SelectionCheckboxComponent2.prototype.createInternal = function (rootSelector) {
        this._el_0 = import4.createRenderElement(this.renderer, null, 'div', new import4.InlineArray4(4, 'class', 'col-md-12', 'rtSelectionArea', ''), null);
        this._RtSelectionService_0_3 = new import12.RtSelectionService();
        this._RtSelectionEventsHelper_0_4 = new import13.RtSelectionEventsHelper(this._RtSelectionService_0_3);
        this._SelectionAreaDirective_0_5 = new import14.Wrapper_SelectionAreaDirective(this._RtSelectionService_0_3, this._RtSelectionEventsHelper_0_4);
        this._query_SelectableDirective_0_0 = new import15.QueryList();
        this._query_SelectionCheckboxForDirective_0_1 = new import15.QueryList();
        this._query_SelectionAreaDirective_0_2 = new import15.QueryList();
        this._text_1 = this.renderer.createText(this._el_0, '\n      ', null);
        this._anchor_2 = this.renderer.createTemplateAnchor(this._el_0, null);
        this._appEl_2 = new import3.AppElement(2, 0, this, this._anchor_2);
        this._TemplateRef_2_5 = new import18.TemplateRef_(this._appEl_2, viewFactory_SelectionCheckboxComponent3);
        this._NgFor_2_6 = new import16.Wrapper_NgFor(this._appEl_2.vcRef, this._TemplateRef_2_5, this.parent.parent.parentInjector.get(import19.IterableDiffers), this.parent.parent.ref);
        this._text_3 = this.renderer.createText(this._el_0, '\n    ', null);
        var disposable_0 = import4.subscribeToRenderElement(this, this._el_0, new import4.InlineArray2(2, 'keydown', null), this.eventHandler(this.handleEvent_0));
        this.init(this._el_0, [
            this._el_0,
            this._text_1,
            this._anchor_2,
            this._text_3
        ], [disposable_0]);
        return null;
    };
    _View_SelectionCheckboxComponent2.prototype.injectorGetInternal = function (token, requestNodeIndex, notFoundResult) {
        if (((token === import18.TemplateRef) && (2 === requestNodeIndex))) {
            return this._TemplateRef_2_5;
        }
        if (((token === import20.NgFor) && (2 === requestNodeIndex))) {
            return this._NgFor_2_6.context;
        }
        if (((token === import12.RtSelectionService) && ((0 <= requestNodeIndex) && (requestNodeIndex <= 3)))) {
            return this._RtSelectionService_0_3;
        }
        if (((token === import13.RtSelectionEventsHelper) && ((0 <= requestNodeIndex) && (requestNodeIndex <= 3)))) {
            return this._RtSelectionEventsHelper_0_4;
        }
        if (((token === import21.SelectionAreaDirective) && ((0 <= requestNodeIndex) && (requestNodeIndex <= 3)))) {
            return this._SelectionAreaDirective_0_5.context;
        }
        return notFoundResult;
    };
    _View_SelectionCheckboxComponent2.prototype.detectChangesInternal = function (throwOnChange) {
        this._SelectionAreaDirective_0_5.ngDoCheck(this, this._el_0, throwOnChange);
        var currVal_2_0_0 = this.parent.context.$implicit.countries;
        this._NgFor_2_6.check_ngForOf(currVal_2_0_0, throwOnChange, false);
        this._NgFor_2_6.ngDoCheck(this, this._anchor_2, throwOnChange);
        this._appEl_2.detectChangesInNestedViews(throwOnChange);
        if (!throwOnChange) {
            if (this._query_SelectableDirective_0_0.dirty) {
                this._query_SelectableDirective_0_0.reset([]);
                this._SelectionAreaDirective_0_5.context.selectableItems = this._query_SelectableDirective_0_0;
                this._query_SelectableDirective_0_0.notifyOnChanges();
            }
            if (this._query_SelectionCheckboxForDirective_0_1.dirty) {
                this._query_SelectionCheckboxForDirective_0_1.reset([this._appEl_2.mapNestedViews(_View_SelectionCheckboxComponent3, function (nestedView) {
                        return [nestedView._SelectionCheckboxForDirective_6_3.context];
                    })]);
                this._SelectionAreaDirective_0_5.context.childSelectionCheckboxes = this._query_SelectionCheckboxForDirective_0_1;
                this._query_SelectionCheckboxForDirective_0_1.notifyOnChanges();
            }
            if (this._query_SelectionAreaDirective_0_2.dirty) {
                this._query_SelectionAreaDirective_0_2.reset([
                    this._SelectionAreaDirective_0_5.context,
                    this._appEl_2.mapNestedViews(_View_SelectionCheckboxComponent3, function (nestedView) {
                        return [nestedView._appEl_10.mapNestedViews(_View_SelectionCheckboxComponent4, function (nestedView) {
                                return [nestedView._SelectionAreaDirective_0_5.context];
                            })];
                    })
                ]);
                this._SelectionAreaDirective_0_5.context.childSelectionAreas = this._query_SelectionAreaDirective_0_2;
                this._query_SelectionAreaDirective_0_2.notifyOnChanges();
            }
            if ((this.numberOfChecks === 0)) {
                this._SelectionAreaDirective_0_5.context.ngAfterContentInit();
            }
        }
        this._SelectionAreaDirective_0_5.checkHost(this, this, this._el_0, throwOnChange);
    };
    _View_SelectionCheckboxComponent2.prototype.dirtyParentQueriesInternal = function () {
        this.parent.parent._query_SelectionAreaDirective_0_2.setDirty();
    };
    _View_SelectionCheckboxComponent2.prototype.destroyInternal = function () {
        this._appEl_2.destroyNestedViews();
        this._SelectionAreaDirective_0_5.ngOnDestroy();
    };
    _View_SelectionCheckboxComponent2.prototype.visitRootNodesInternal = function (cb, ctx) {
        cb(this._el_0, ctx);
    };
    _View_SelectionCheckboxComponent2.prototype.handleEvent_0 = function (eventName, $event) {
        this.markPathToRootAsCheckOnce();
        var result = true;
        result = (this._SelectionAreaDirective_0_5.handleEvent(eventName, $event) && result);
        return result;
    };
    return _View_SelectionCheckboxComponent2;
}(import1.AppView));
function viewFactory_SelectionCheckboxComponent2(viewUtils, parentInjector, declarationEl) {
    return new _View_SelectionCheckboxComponent2(viewUtils, parentInjector, declarationEl);
}
var _View_SelectionCheckboxComponent3 = (function (_super) {
    __extends(_View_SelectionCheckboxComponent3, _super);
    function _View_SelectionCheckboxComponent3(viewUtils, parentInjector, declarationEl) {
        _super.call(this, _View_SelectionCheckboxComponent3, renderType_SelectionCheckboxComponent, import6.ViewType.EMBEDDED, viewUtils, parentInjector, declarationEl, import7.ChangeDetectorStatus.CheckAlways);
        this._expr_16 = import7.UNINITIALIZED;
        this._expr_17 = import7.UNINITIALIZED;
    }
    _View_SelectionCheckboxComponent3.prototype.createInternal = function (rootSelector) {
        this._el_0 = import4.createRenderElement(this.renderer, null, 'div', import4.EMPTY_INLINE_ARRAY, null);
        this._text_1 = this.renderer.createText(this._el_0, '\n        ', null);
        this._el_2 = import4.createRenderElement(this.renderer, this._el_0, 'div', new import4.InlineArray2(2, 'class', 'col-md-12 item'), null);
        this._text_3 = this.renderer.createText(this._el_2, '\n          ', null);
        this._el_4 = import4.createRenderElement(this.renderer, this._el_2, 'label', new import4.InlineArray2(2, 'class', 'checkbox-inline'), null);
        this._text_5 = this.renderer.createText(this._el_4, '\n          ', null);
        this._el_6 = import4.createRenderElement(this.renderer, this._el_4, 'input', new import4.InlineArray2(2, 'type', 'checkbox'), null);
        this._SelectionCheckboxForDirective_6_3 = new import22.Wrapper_SelectionCheckboxForDirective(this.parent._RtSelectionService_0_3);
        this._text_7 = this.renderer.createText(this._el_4, '', null);
        this._text_8 = this.renderer.createText(this._el_2, '\n        ', null);
        this._text_9 = this.renderer.createText(this._el_0, '\n        ', null);
        this._anchor_10 = this.renderer.createTemplateAnchor(this._el_0, null);
        this._appEl_10 = new import3.AppElement(10, 0, this, this._anchor_10);
        this._TemplateRef_10_5 = new import18.TemplateRef_(this._appEl_10, viewFactory_SelectionCheckboxComponent4);
        this._NgIf_10_6 = new import23.Wrapper_NgIf(this._appEl_10.vcRef, this._TemplateRef_10_5);
        this._text_11 = this.renderer.createText(this._el_0, '\n      ', null);
        var disposable_0 = import4.subscribeToRenderElement(this, this._el_6, new import4.InlineArray2(2, 'change', null), this.eventHandler(this.handleEvent_6));
        this.init(this._el_0, [
            this._el_0,
            this._text_1,
            this._el_2,
            this._text_3,
            this._el_4,
            this._text_5,
            this._el_6,
            this._text_7,
            this._text_8,
            this._text_9,
            this._anchor_10,
            this._text_11
        ], [disposable_0]);
        return null;
    };
    _View_SelectionCheckboxComponent3.prototype.injectorGetInternal = function (token, requestNodeIndex, notFoundResult) {
        if (((token === import24.SelectionCheckboxForDirective) && (6 === requestNodeIndex))) {
            return this._SelectionCheckboxForDirective_6_3.context;
        }
        if (((token === import18.TemplateRef) && (10 === requestNodeIndex))) {
            return this._TemplateRef_10_5;
        }
        if (((token === import25.NgIf) && (10 === requestNodeIndex))) {
            return this._NgIf_10_6.context;
        }
        return notFoundResult;
    };
    _View_SelectionCheckboxComponent3.prototype.detectChangesInternal = function (throwOnChange) {
        var currVal_6_0_0 = this.context.$implicit;
        this._SelectionCheckboxForDirective_6_3.check_item(currVal_6_0_0, throwOnChange, false);
        this._SelectionCheckboxForDirective_6_3.ngDoCheck(this, this._el_6, throwOnChange);
        var currVal_10_0_0 = this.context.$implicit.selected;
        this._NgIf_10_6.check_ngIf(currVal_10_0_0, throwOnChange, false);
        this._NgIf_10_6.ngDoCheck(this, this._anchor_10, throwOnChange);
        this._appEl_10.detectChangesInNestedViews(throwOnChange);
        var currVal_16 = this.context.$implicit.selected;
        if (import4.checkBinding(throwOnChange, this._expr_16, currVal_16)) {
            this.renderer.setElementClass(this._el_2, 'selected', currVal_16);
            this._expr_16 = currVal_16;
        }
        this._SelectionCheckboxForDirective_6_3.checkHost(this, this, this._el_6, throwOnChange);
        var currVal_17 = import4.interpolate(2, ' ', this.context.$implicit.name, ' (', this.context.$implicit.airports.length, '\n          airports)');
        if (import4.checkBinding(throwOnChange, this._expr_17, currVal_17)) {
            this.renderer.setText(this._text_7, currVal_17);
            this._expr_17 = currVal_17;
        }
    };
    _View_SelectionCheckboxComponent3.prototype.dirtyParentQueriesInternal = function () {
        this.parent._query_SelectionCheckboxForDirective_0_1.setDirty();
    };
    _View_SelectionCheckboxComponent3.prototype.destroyInternal = function () {
        this._appEl_10.destroyNestedViews();
        this._SelectionCheckboxForDirective_6_3.ngOnDestroy();
    };
    _View_SelectionCheckboxComponent3.prototype.visitRootNodesInternal = function (cb, ctx) {
        cb(this._el_0, ctx);
    };
    _View_SelectionCheckboxComponent3.prototype.handleEvent_6 = function (eventName, $event) {
        this.markPathToRootAsCheckOnce();
        var result = true;
        result = (this._SelectionCheckboxForDirective_6_3.handleEvent(eventName, $event) && result);
        return result;
    };
    return _View_SelectionCheckboxComponent3;
}(import1.AppView));
function viewFactory_SelectionCheckboxComponent3(viewUtils, parentInjector, declarationEl) {
    return new _View_SelectionCheckboxComponent3(viewUtils, parentInjector, declarationEl);
}
var _View_SelectionCheckboxComponent4 = (function (_super) {
    __extends(_View_SelectionCheckboxComponent4, _super);
    function _View_SelectionCheckboxComponent4(viewUtils, parentInjector, declarationEl) {
        _super.call(this, _View_SelectionCheckboxComponent4, renderType_SelectionCheckboxComponent, import6.ViewType.EMBEDDED, viewUtils, parentInjector, declarationEl, import7.ChangeDetectorStatus.CheckAlways);
    }
    _View_SelectionCheckboxComponent4.prototype.createInternal = function (rootSelector) {
        this._el_0 = import4.createRenderElement(this.renderer, null, 'div', new import4.InlineArray4(4, 'class', 'col-md-12', 'rtSelectionArea', ''), null);
        this._RtSelectionService_0_3 = new import12.RtSelectionService();
        this._RtSelectionEventsHelper_0_4 = new import13.RtSelectionEventsHelper(this._RtSelectionService_0_3);
        this._SelectionAreaDirective_0_5 = new import14.Wrapper_SelectionAreaDirective(this._RtSelectionService_0_3, this._RtSelectionEventsHelper_0_4);
        this._query_SelectableDirective_0_0 = new import15.QueryList();
        this._query_SelectionCheckboxForDirective_0_1 = new import15.QueryList();
        this._query_SelectionAreaDirective_0_2 = new import15.QueryList();
        this._text_1 = this.renderer.createText(this._el_0, '\n          ', null);
        this._anchor_2 = this.renderer.createTemplateAnchor(this._el_0, null);
        this._appEl_2 = new import3.AppElement(2, 0, this, this._anchor_2);
        this._TemplateRef_2_5 = new import18.TemplateRef_(this._appEl_2, viewFactory_SelectionCheckboxComponent5);
        this._NgFor_2_6 = new import16.Wrapper_NgFor(this._appEl_2.vcRef, this._TemplateRef_2_5, this.parent.parent.parent.parent.parentInjector.get(import19.IterableDiffers), this.parent.parent.parent.parent.ref);
        this._text_3 = this.renderer.createText(this._el_0, '\n        ', null);
        var disposable_0 = import4.subscribeToRenderElement(this, this._el_0, new import4.InlineArray2(2, 'keydown', null), this.eventHandler(this.handleEvent_0));
        this.init(this._el_0, [
            this._el_0,
            this._text_1,
            this._anchor_2,
            this._text_3
        ], [disposable_0]);
        return null;
    };
    _View_SelectionCheckboxComponent4.prototype.injectorGetInternal = function (token, requestNodeIndex, notFoundResult) {
        if (((token === import18.TemplateRef) && (2 === requestNodeIndex))) {
            return this._TemplateRef_2_5;
        }
        if (((token === import20.NgFor) && (2 === requestNodeIndex))) {
            return this._NgFor_2_6.context;
        }
        if (((token === import12.RtSelectionService) && ((0 <= requestNodeIndex) && (requestNodeIndex <= 3)))) {
            return this._RtSelectionService_0_3;
        }
        if (((token === import13.RtSelectionEventsHelper) && ((0 <= requestNodeIndex) && (requestNodeIndex <= 3)))) {
            return this._RtSelectionEventsHelper_0_4;
        }
        if (((token === import21.SelectionAreaDirective) && ((0 <= requestNodeIndex) && (requestNodeIndex <= 3)))) {
            return this._SelectionAreaDirective_0_5.context;
        }
        return notFoundResult;
    };
    _View_SelectionCheckboxComponent4.prototype.detectChangesInternal = function (throwOnChange) {
        this._SelectionAreaDirective_0_5.ngDoCheck(this, this._el_0, throwOnChange);
        var currVal_2_0_0 = this.parent.context.$implicit.airports;
        this._NgFor_2_6.check_ngForOf(currVal_2_0_0, throwOnChange, false);
        this._NgFor_2_6.ngDoCheck(this, this._anchor_2, throwOnChange);
        this._appEl_2.detectChangesInNestedViews(throwOnChange);
        if (!throwOnChange) {
            if (this._query_SelectableDirective_0_0.dirty) {
                this._query_SelectableDirective_0_0.reset([]);
                this._SelectionAreaDirective_0_5.context.selectableItems = this._query_SelectableDirective_0_0;
                this._query_SelectableDirective_0_0.notifyOnChanges();
            }
            if (this._query_SelectionCheckboxForDirective_0_1.dirty) {
                this._query_SelectionCheckboxForDirective_0_1.reset([this._appEl_2.mapNestedViews(_View_SelectionCheckboxComponent5, function (nestedView) {
                        return [nestedView._SelectionCheckboxForDirective_6_3.context];
                    })]);
                this._SelectionAreaDirective_0_5.context.childSelectionCheckboxes = this._query_SelectionCheckboxForDirective_0_1;
                this._query_SelectionCheckboxForDirective_0_1.notifyOnChanges();
            }
            if (this._query_SelectionAreaDirective_0_2.dirty) {
                this._query_SelectionAreaDirective_0_2.reset([this._SelectionAreaDirective_0_5.context]);
                this._SelectionAreaDirective_0_5.context.childSelectionAreas = this._query_SelectionAreaDirective_0_2;
                this._query_SelectionAreaDirective_0_2.notifyOnChanges();
            }
            if ((this.numberOfChecks === 0)) {
                this._SelectionAreaDirective_0_5.context.ngAfterContentInit();
            }
        }
        this._SelectionAreaDirective_0_5.checkHost(this, this, this._el_0, throwOnChange);
    };
    _View_SelectionCheckboxComponent4.prototype.dirtyParentQueriesInternal = function () {
        this.parent.parent._query_SelectionAreaDirective_0_2.setDirty();
    };
    _View_SelectionCheckboxComponent4.prototype.destroyInternal = function () {
        this._appEl_2.destroyNestedViews();
        this._SelectionAreaDirective_0_5.ngOnDestroy();
    };
    _View_SelectionCheckboxComponent4.prototype.visitRootNodesInternal = function (cb, ctx) {
        cb(this._el_0, ctx);
    };
    _View_SelectionCheckboxComponent4.prototype.handleEvent_0 = function (eventName, $event) {
        this.markPathToRootAsCheckOnce();
        var result = true;
        result = (this._SelectionAreaDirective_0_5.handleEvent(eventName, $event) && result);
        return result;
    };
    return _View_SelectionCheckboxComponent4;
}(import1.AppView));
function viewFactory_SelectionCheckboxComponent4(viewUtils, parentInjector, declarationEl) {
    return new _View_SelectionCheckboxComponent4(viewUtils, parentInjector, declarationEl);
}
var _View_SelectionCheckboxComponent5 = (function (_super) {
    __extends(_View_SelectionCheckboxComponent5, _super);
    function _View_SelectionCheckboxComponent5(viewUtils, parentInjector, declarationEl) {
        _super.call(this, _View_SelectionCheckboxComponent5, renderType_SelectionCheckboxComponent, import6.ViewType.EMBEDDED, viewUtils, parentInjector, declarationEl, import7.ChangeDetectorStatus.CheckAlways);
        this._expr_11 = import7.UNINITIALIZED;
        this._expr_12 = import7.UNINITIALIZED;
    }
    _View_SelectionCheckboxComponent5.prototype.createInternal = function (rootSelector) {
        this._el_0 = import4.createRenderElement(this.renderer, null, 'div', import4.EMPTY_INLINE_ARRAY, null);
        this._text_1 = this.renderer.createText(this._el_0, '\n            ', null);
        this._el_2 = import4.createRenderElement(this.renderer, this._el_0, 'div', new import4.InlineArray2(2, 'class', 'col-md-12 item'), null);
        this._text_3 = this.renderer.createText(this._el_2, '\n              ', null);
        this._el_4 = import4.createRenderElement(this.renderer, this._el_2, 'label', new import4.InlineArray2(2, 'class', 'checkbox-inline'), null);
        this._text_5 = this.renderer.createText(this._el_4, '\n              ', null);
        this._el_6 = import4.createRenderElement(this.renderer, this._el_4, 'input', new import4.InlineArray2(2, 'type', 'checkbox'), null);
        this._SelectionCheckboxForDirective_6_3 = new import22.Wrapper_SelectionCheckboxForDirective(this.parent._RtSelectionService_0_3);
        this._text_7 = this.renderer.createText(this._el_4, '', null);
        this._text_8 = this.renderer.createText(this._el_2, '\n            ', null);
        this._text_9 = this.renderer.createText(this._el_0, '\n          ', null);
        var disposable_0 = import4.subscribeToRenderElement(this, this._el_6, new import4.InlineArray2(2, 'change', null), this.eventHandler(this.handleEvent_6));
        this.init(this._el_0, [
            this._el_0,
            this._text_1,
            this._el_2,
            this._text_3,
            this._el_4,
            this._text_5,
            this._el_6,
            this._text_7,
            this._text_8,
            this._text_9
        ], [disposable_0]);
        return null;
    };
    _View_SelectionCheckboxComponent5.prototype.injectorGetInternal = function (token, requestNodeIndex, notFoundResult) {
        if (((token === import24.SelectionCheckboxForDirective) && (6 === requestNodeIndex))) {
            return this._SelectionCheckboxForDirective_6_3.context;
        }
        return notFoundResult;
    };
    _View_SelectionCheckboxComponent5.prototype.detectChangesInternal = function (throwOnChange) {
        var currVal_6_0_0 = this.context.$implicit;
        this._SelectionCheckboxForDirective_6_3.check_item(currVal_6_0_0, throwOnChange, false);
        this._SelectionCheckboxForDirective_6_3.ngDoCheck(this, this._el_6, throwOnChange);
        var currVal_11 = this.context.$implicit.selected;
        if (import4.checkBinding(throwOnChange, this._expr_11, currVal_11)) {
            this.renderer.setElementClass(this._el_2, 'selected', currVal_11);
            this._expr_11 = currVal_11;
        }
        this._SelectionCheckboxForDirective_6_3.checkHost(this, this, this._el_6, throwOnChange);
        var currVal_12 = import4.interpolate(2, ' ', this.context.$implicit.name, ' (', this.context.$implicit.iataCode, ')\n              ');
        if (import4.checkBinding(throwOnChange, this._expr_12, currVal_12)) {
            this.renderer.setText(this._text_7, currVal_12);
            this._expr_12 = currVal_12;
        }
    };
    _View_SelectionCheckboxComponent5.prototype.dirtyParentQueriesInternal = function () {
        this.parent._query_SelectionCheckboxForDirective_0_1.setDirty();
    };
    _View_SelectionCheckboxComponent5.prototype.destroyInternal = function () {
        this._SelectionCheckboxForDirective_6_3.ngOnDestroy();
    };
    _View_SelectionCheckboxComponent5.prototype.visitRootNodesInternal = function (cb, ctx) {
        cb(this._el_0, ctx);
    };
    _View_SelectionCheckboxComponent5.prototype.handleEvent_6 = function (eventName, $event) {
        this.markPathToRootAsCheckOnce();
        var result = true;
        result = (this._SelectionCheckboxForDirective_6_3.handleEvent(eventName, $event) && result);
        return result;
    };
    return _View_SelectionCheckboxComponent5;
}(import1.AppView));
function viewFactory_SelectionCheckboxComponent5(viewUtils, parentInjector, declarationEl) {
    return new _View_SelectionCheckboxComponent5(viewUtils, parentInjector, declarationEl);
}


/***/ },

/***/ "./src/compiled/src/app/+selection/selection-events/country-details/country-details.component.ngfactory.ts":
/***/ function(module, exports, __webpack_require__) {

"use strict";
/**
 * This file is generated by the Angular 2 template compiler.
 * Do not edit.
 */
/* tslint:disable */
"use strict";
var import0 = __webpack_require__("./src/app/+selection/selection-events/country-details/country-details.component.ts");
var import1 = __webpack_require__("./node_modules/@angular/core/src/change_detection/change_detection.js");
var import2 = __webpack_require__("./node_modules/@angular/core/src/linker/view.js");
var import3 = __webpack_require__("./node_modules/@angular/core/src/linker/view_utils.js");
var import5 = __webpack_require__("./node_modules/@angular/core/src/linker/element.js");
var import7 = __webpack_require__("./node_modules/@angular/core/src/linker/view_type.js");
var import8 = __webpack_require__("./src/app/+selection/countries.service.ts");
var import9 = __webpack_require__("./node_modules/@angular/core/src/metadata/view.js");
var import10 = __webpack_require__("./node_modules/@angular/core/src/linker/component_factory.js");
var import11 = __webpack_require__("./src/compiled/node_modules/@angular/common/src/directives/ng_if.ngfactory.ts");
var import12 = __webpack_require__("./node_modules/@angular/core/src/linker/template_ref.js");
var import13 = __webpack_require__("./node_modules/@angular/common/src/directives/ng_if.js");
var import14 = __webpack_require__("./src/compiled/node_modules/right-angled/src/misc-directives/stop-events.directive.ngfactory.ts");
var import15 = __webpack_require__("./node_modules/@angular/core/src/linker/element_ref.js");
var import16 = __webpack_require__("./node_modules/right-angled/src/misc-directives/stop-events.directive.js");
var import17 = __webpack_require__("./src/compiled/node_modules/@angular/forms/src/directives/ng_form.ngfactory.ts");
var import18 = __webpack_require__("./src/compiled/node_modules/@angular/forms/src/directives/ng_control_status.ngfactory.ts");
var import19 = __webpack_require__("./src/compiled/node_modules/@angular/forms/src/directives/default_value_accessor.ngfactory.ts");
var import20 = __webpack_require__("./src/compiled/node_modules/@angular/forms/src/directives/ng_model.ngfactory.ts");
var import21 = __webpack_require__("./node_modules/@angular/forms/src/directives/default_value_accessor.js");
var import22 = __webpack_require__("./node_modules/@angular/forms/src/directives/control_value_accessor.js");
var import23 = __webpack_require__("./node_modules/@angular/forms/src/directives/ng_model.js");
var import24 = __webpack_require__("./node_modules/@angular/forms/src/directives/ng_control.js");
var import25 = __webpack_require__("./node_modules/@angular/forms/src/directives/ng_control_status.js");
var import26 = __webpack_require__("./node_modules/@angular/forms/src/directives/ng_form.js");
var import27 = __webpack_require__("./node_modules/@angular/forms/src/directives/control_container.js");
var Wrapper_CountryDetailsComponent = (function () {
    function Wrapper_CountryDetailsComponent(p0) {
        this._changed = false;
        this.context = new import0.CountryDetailsComponent(p0);
        this._expr_0 = import1.UNINITIALIZED;
    }
    Wrapper_CountryDetailsComponent.prototype.ngOnDetach = function (view, componentView, el) {
    };
    Wrapper_CountryDetailsComponent.prototype.ngOnDestroy = function () {
    };
    Wrapper_CountryDetailsComponent.prototype.check_country = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import3.checkBinding(throwOnChange, this._expr_0, currValue))) {
            this._changed = true;
            this.context.country = currValue;
            this._expr_0 = currValue;
        }
    };
    Wrapper_CountryDetailsComponent.prototype.ngDoCheck = function (view, el, throwOnChange) {
        var changed = this._changed;
        this._changed = false;
        return changed;
    };
    Wrapper_CountryDetailsComponent.prototype.checkHost = function (view, componentView, el, throwOnChange) {
    };
    Wrapper_CountryDetailsComponent.prototype.handleEvent = function (eventName, $event) {
        var result = true;
        return result;
    };
    Wrapper_CountryDetailsComponent.prototype.subscribe = function (view, _eventHandler) {
        this._eventHandler = _eventHandler;
    };
    return Wrapper_CountryDetailsComponent;
}());
exports.Wrapper_CountryDetailsComponent = Wrapper_CountryDetailsComponent;
var renderType_CountryDetailsComponent_Host = null;
var _View_CountryDetailsComponent_Host0 = (function (_super) {
    __extends(_View_CountryDetailsComponent_Host0, _super);
    function _View_CountryDetailsComponent_Host0(viewUtils, parentInjector, declarationEl) {
        _super.call(this, _View_CountryDetailsComponent_Host0, renderType_CountryDetailsComponent_Host, import7.ViewType.HOST, viewUtils, parentInjector, declarationEl, import1.ChangeDetectorStatus.CheckAlways);
    }
    _View_CountryDetailsComponent_Host0.prototype.createInternal = function (rootSelector) {
        this._el_0 = import3.selectOrCreateRenderHostElement(this.renderer, 'rt-demo-country-details', import3.EMPTY_INLINE_ARRAY, rootSelector, null);
        this._appEl_0 = new import5.AppElement(0, null, this, this._el_0);
        this.compView_0 = viewFactory_CountryDetailsComponent0(this.viewUtils, this.injector(0), this._appEl_0);
        this._CountryDetailsComponent_0_4 = new Wrapper_CountryDetailsComponent(this.parentInjector.get(import8.CountriesService));
        this._appEl_0.initComponent(this._CountryDetailsComponent_0_4.context, this.compView_0);
        this.compView_0.create(this._CountryDetailsComponent_0_4.context, null);
        this.init(this._el_0, [this._el_0], null);
        return this._appEl_0;
    };
    _View_CountryDetailsComponent_Host0.prototype.injectorGetInternal = function (token, requestNodeIndex, notFoundResult) {
        if (((token === import0.CountryDetailsComponent) && (0 === requestNodeIndex))) {
            return this._CountryDetailsComponent_0_4.context;
        }
        return notFoundResult;
    };
    _View_CountryDetailsComponent_Host0.prototype.detectChangesInternal = function (throwOnChange) {
        this._CountryDetailsComponent_0_4.ngDoCheck(this, this._el_0, throwOnChange);
        this.compView_0.detectChanges(throwOnChange);
    };
    _View_CountryDetailsComponent_Host0.prototype.destroyInternal = function () {
        this.compView_0.destroy();
    };
    _View_CountryDetailsComponent_Host0.prototype.visitRootNodesInternal = function (cb, ctx) {
        cb(this._el_0, ctx);
    };
    return _View_CountryDetailsComponent_Host0;
}(import2.AppView));
function viewFactory_CountryDetailsComponent_Host0(viewUtils, parentInjector, declarationEl) {
    if ((renderType_CountryDetailsComponent_Host === null)) {
        (renderType_CountryDetailsComponent_Host = viewUtils.createRenderComponentType('', 0, import9.ViewEncapsulation.None, [], {}));
    }
    return new _View_CountryDetailsComponent_Host0(viewUtils, parentInjector, declarationEl);
}
exports.CountryDetailsComponentNgFactory = new import10.ComponentFactory('rt-demo-country-details', viewFactory_CountryDetailsComponent_Host0, import0.CountryDetailsComponent);
var styles_CountryDetailsComponent = [];
var renderType_CountryDetailsComponent = null;
var _View_CountryDetailsComponent0 = (function (_super) {
    __extends(_View_CountryDetailsComponent0, _super);
    function _View_CountryDetailsComponent0(viewUtils, parentInjector, declarationEl) {
        _super.call(this, _View_CountryDetailsComponent0, renderType_CountryDetailsComponent, import7.ViewType.COMPONENT, viewUtils, parentInjector, declarationEl, import1.ChangeDetectorStatus.CheckAlways);
        this._expr_7 = import1.UNINITIALIZED;
        this._expr_8 = import1.UNINITIALIZED;
    }
    _View_CountryDetailsComponent0.prototype.createInternal = function (rootSelector) {
        var parentRenderNode = this.renderer.createViewRoot(this.declarationAppElement.nativeElement);
        this._el_0 = import3.createRenderElement(this.renderer, parentRenderNode, 'div', new import3.InlineArray2(2, 'class', 'item'), null);
        this._text_1 = this.renderer.createText(this._el_0, '', null);
        this._text_2 = this.renderer.createText(parentRenderNode, '\n', null);
        this._anchor_3 = this.renderer.createTemplateAnchor(parentRenderNode, null);
        this._appEl_3 = new import5.AppElement(3, null, this, this._anchor_3);
        this._TemplateRef_3_5 = new import12.TemplateRef_(this._appEl_3, viewFactory_CountryDetailsComponent1);
        this._NgIf_3_6 = new import11.Wrapper_NgIf(this._appEl_3.vcRef, this._TemplateRef_3_5);
        this.init(null, [
            this._el_0,
            this._text_1,
            this._text_2,
            this._anchor_3
        ], null);
        return null;
    };
    _View_CountryDetailsComponent0.prototype.injectorGetInternal = function (token, requestNodeIndex, notFoundResult) {
        if (((token === import12.TemplateRef) && (3 === requestNodeIndex))) {
            return this._TemplateRef_3_5;
        }
        if (((token === import13.NgIf) && (3 === requestNodeIndex))) {
            return this._NgIf_3_6.context;
        }
        return notFoundResult;
    };
    _View_CountryDetailsComponent0.prototype.detectChangesInternal = function (throwOnChange) {
        var currVal_3_0_0 = this.context.selected;
        this._NgIf_3_6.check_ngIf(currVal_3_0_0, throwOnChange, false);
        this._NgIf_3_6.ngDoCheck(this, this._anchor_3, throwOnChange);
        this._appEl_3.detectChangesInNestedViews(throwOnChange);
        var currVal_7 = this.context.selected;
        if (import3.checkBinding(throwOnChange, this._expr_7, currVal_7)) {
            this.renderer.setElementClass(this._el_0, 'selected', currVal_7);
            this._expr_7 = currVal_7;
        }
        var currVal_8 = import3.interpolate(1, '\n	', this.context.country.name, '\n');
        if (import3.checkBinding(throwOnChange, this._expr_8, currVal_8)) {
            this.renderer.setText(this._text_1, currVal_8);
            this._expr_8 = currVal_8;
        }
    };
    _View_CountryDetailsComponent0.prototype.destroyInternal = function () {
        this._appEl_3.destroyNestedViews();
    };
    return _View_CountryDetailsComponent0;
}(import2.AppView));
function viewFactory_CountryDetailsComponent0(viewUtils, parentInjector, declarationEl) {
    if ((renderType_CountryDetailsComponent === null)) {
        (renderType_CountryDetailsComponent = viewUtils.createRenderComponentType('', 0, import9.ViewEncapsulation.None, styles_CountryDetailsComponent, {}));
    }
    return new _View_CountryDetailsComponent0(viewUtils, parentInjector, declarationEl);
}
exports.viewFactory_CountryDetailsComponent0 = viewFactory_CountryDetailsComponent0;
var _View_CountryDetailsComponent1 = (function (_super) {
    __extends(_View_CountryDetailsComponent1, _super);
    function _View_CountryDetailsComponent1(viewUtils, parentInjector, declarationEl) {
        _super.call(this, _View_CountryDetailsComponent1, renderType_CountryDetailsComponent, import7.ViewType.EMBEDDED, viewUtils, parentInjector, declarationEl, import1.ChangeDetectorStatus.CheckAlways);
    }
    _View_CountryDetailsComponent1.prototype.createInternal = function (rootSelector) {
        this._el_0 = import3.createRenderElement(this.renderer, null, 'div', new import3.InlineArray2(2, 'rtStopEvents', 'mouseup'), null);
        this._StopEventsDirective_0_3 = new import14.Wrapper_StopEventsDirective(new import15.ElementRef(this._el_0));
        this._text_1 = this.renderer.createText(this._el_0, '\n	', null);
        this._anchor_2 = this.renderer.createTemplateAnchor(this._el_0, null);
        this._appEl_2 = new import5.AppElement(2, 0, this, this._anchor_2);
        this._TemplateRef_2_5 = new import12.TemplateRef_(this._appEl_2, viewFactory_CountryDetailsComponent2);
        this._NgIf_2_6 = new import11.Wrapper_NgIf(this._appEl_2.vcRef, this._TemplateRef_2_5);
        this._text_3 = this.renderer.createText(this._el_0, '\n	', null);
        this._anchor_4 = this.renderer.createTemplateAnchor(this._el_0, null);
        this._appEl_4 = new import5.AppElement(4, 0, this, this._anchor_4);
        this._TemplateRef_4_5 = new import12.TemplateRef_(this._appEl_4, viewFactory_CountryDetailsComponent3);
        this._NgIf_4_6 = new import11.Wrapper_NgIf(this._appEl_4.vcRef, this._TemplateRef_4_5);
        this._text_5 = this.renderer.createText(this._el_0, '\n', null);
        this.init(this._el_0, [
            this._el_0,
            this._text_1,
            this._anchor_2,
            this._text_3,
            this._anchor_4,
            this._text_5
        ], null);
        return null;
    };
    _View_CountryDetailsComponent1.prototype.injectorGetInternal = function (token, requestNodeIndex, notFoundResult) {
        if (((token === import12.TemplateRef) && (2 === requestNodeIndex))) {
            return this._TemplateRef_2_5;
        }
        if (((token === import13.NgIf) && (2 === requestNodeIndex))) {
            return this._NgIf_2_6.context;
        }
        if (((token === import12.TemplateRef) && (4 === requestNodeIndex))) {
            return this._TemplateRef_4_5;
        }
        if (((token === import13.NgIf) && (4 === requestNodeIndex))) {
            return this._NgIf_4_6.context;
        }
        if (((token === import16.StopEventsDirective) && ((0 <= requestNodeIndex) && (requestNodeIndex <= 5)))) {
            return this._StopEventsDirective_0_3.context;
        }
        return notFoundResult;
    };
    _View_CountryDetailsComponent1.prototype.detectChangesInternal = function (throwOnChange) {
        var currVal_0_0_0 = 'mouseup';
        this._StopEventsDirective_0_3.check_eventNames(currVal_0_0_0, throwOnChange, false);
        this._StopEventsDirective_0_3.ngDoCheck(this, this._el_0, throwOnChange);
        var currVal_2_0_0 = this.parent.context.loading;
        this._NgIf_2_6.check_ngIf(currVal_2_0_0, throwOnChange, false);
        this._NgIf_2_6.ngDoCheck(this, this._anchor_2, throwOnChange);
        var currVal_4_0_0 = !this.parent.context.loading;
        this._NgIf_4_6.check_ngIf(currVal_4_0_0, throwOnChange, false);
        this._NgIf_4_6.ngDoCheck(this, this._anchor_4, throwOnChange);
        this._appEl_2.detectChangesInNestedViews(throwOnChange);
        this._appEl_4.detectChangesInNestedViews(throwOnChange);
    };
    _View_CountryDetailsComponent1.prototype.destroyInternal = function () {
        this._appEl_2.destroyNestedViews();
        this._appEl_4.destroyNestedViews();
        this._StopEventsDirective_0_3.ngOnDestroy();
    };
    _View_CountryDetailsComponent1.prototype.visitRootNodesInternal = function (cb, ctx) {
        cb(this._el_0, ctx);
    };
    return _View_CountryDetailsComponent1;
}(import2.AppView));
function viewFactory_CountryDetailsComponent1(viewUtils, parentInjector, declarationEl) {
    return new _View_CountryDetailsComponent1(viewUtils, parentInjector, declarationEl);
}
var _View_CountryDetailsComponent2 = (function (_super) {
    __extends(_View_CountryDetailsComponent2, _super);
    function _View_CountryDetailsComponent2(viewUtils, parentInjector, declarationEl) {
        _super.call(this, _View_CountryDetailsComponent2, renderType_CountryDetailsComponent, import7.ViewType.EMBEDDED, viewUtils, parentInjector, declarationEl, import1.ChangeDetectorStatus.CheckAlways);
    }
    _View_CountryDetailsComponent2.prototype.createInternal = function (rootSelector) {
        this._el_0 = import3.createRenderElement(this.renderer, null, 'div', new import3.InlineArray2(2, 'class', 'line-progress'), null);
        this._text_1 = this.renderer.createText(this._el_0, '\n	', null);
        this.init(this._el_0, [
            this._el_0,
            this._text_1
        ], null);
        return null;
    };
    _View_CountryDetailsComponent2.prototype.visitRootNodesInternal = function (cb, ctx) {
        cb(this._el_0, ctx);
    };
    return _View_CountryDetailsComponent2;
}(import2.AppView));
function viewFactory_CountryDetailsComponent2(viewUtils, parentInjector, declarationEl) {
    return new _View_CountryDetailsComponent2(viewUtils, parentInjector, declarationEl);
}
var _View_CountryDetailsComponent3 = (function (_super) {
    __extends(_View_CountryDetailsComponent3, _super);
    function _View_CountryDetailsComponent3(viewUtils, parentInjector, declarationEl) {
        _super.call(this, _View_CountryDetailsComponent3, renderType_CountryDetailsComponent, import7.ViewType.EMBEDDED, viewUtils, parentInjector, declarationEl, import1.ChangeDetectorStatus.CheckAlways);
    }
    _View_CountryDetailsComponent3.prototype.createInternal = function (rootSelector) {
        this._el_0 = import3.createRenderElement(this.renderer, null, 'div', import3.EMPTY_INLINE_ARRAY, null);
        this._text_1 = this.renderer.createText(this._el_0, '\n		', null);
        this._el_2 = import3.createRenderElement(this.renderer, this._el_0, 'form', import3.EMPTY_INLINE_ARRAY, null);
        this._NgForm_2_3 = new import17.Wrapper_NgForm(null, null);
        this._ControlContainer_2_4 = this._NgForm_2_3.context;
        this._NgControlStatusGroup_2_5 = new import18.Wrapper_NgControlStatusGroup(this._ControlContainer_2_4);
        this._text_3 = this.renderer.createText(this._el_2, '\n			', null);
        this._el_4 = import3.createRenderElement(this.renderer, this._el_2, 'div', new import3.InlineArray2(2, 'class', 'form-group'), null);
        this._text_5 = this.renderer.createText(this._el_4, '\n				', null);
        this._el_6 = import3.createRenderElement(this.renderer, this._el_4, 'label', new import3.InlineArray2(2, 'for', 'name'), null);
        this._text_7 = this.renderer.createText(this._el_6, 'Country name', null);
        this._text_8 = this.renderer.createText(this._el_4, '\n				', null);
        this._el_9 = import3.createRenderElement(this.renderer, this._el_4, 'input', new import3.InlineArray8(8, 'class', 'form-control', 'name', 'name', 'placeholder', 'Country name', 'type', 'text'), null);
        this._DefaultValueAccessor_9_3 = new import19.Wrapper_DefaultValueAccessor(this.renderer, new import15.ElementRef(this._el_9));
        this._NG_VALUE_ACCESSOR_9_4 = [this._DefaultValueAccessor_9_3.context];
        this._NgModel_9_5 = new import20.Wrapper_NgModel(this._ControlContainer_2_4, null, null, this._NG_VALUE_ACCESSOR_9_4);
        this._NgControl_9_6 = this._NgModel_9_5.context;
        this._NgControlStatus_9_7 = new import18.Wrapper_NgControlStatus(this._NgControl_9_6);
        this._text_10 = this.renderer.createText(this._el_4, '\n			', null);
        this._text_11 = this.renderer.createText(this._el_2, '\n			', null);
        this._el_12 = import3.createRenderElement(this.renderer, this._el_2, 'div', new import3.InlineArray2(2, 'class', 'form-group'), null);
        this._text_13 = this.renderer.createText(this._el_12, '\n				', null);
        this._el_14 = import3.createRenderElement(this.renderer, this._el_12, 'label', new import3.InlineArray2(2, 'for', 'nativeName'), null);
        this._text_15 = this.renderer.createText(this._el_14, 'Native name', null);
        this._text_16 = this.renderer.createText(this._el_12, '\n				', null);
        this._el_17 = import3.createRenderElement(this.renderer, this._el_12, 'input', new import3.InlineArray8(8, 'class', 'form-control', 'name', 'nativeName', 'placeholder', 'Native name', 'type', 'text'), null);
        this._DefaultValueAccessor_17_3 = new import19.Wrapper_DefaultValueAccessor(this.renderer, new import15.ElementRef(this._el_17));
        this._NG_VALUE_ACCESSOR_17_4 = [this._DefaultValueAccessor_17_3.context];
        this._NgModel_17_5 = new import20.Wrapper_NgModel(this._ControlContainer_2_4, null, null, this._NG_VALUE_ACCESSOR_17_4);
        this._NgControl_17_6 = this._NgModel_17_5.context;
        this._NgControlStatus_17_7 = new import18.Wrapper_NgControlStatus(this._NgControl_17_6);
        this._text_18 = this.renderer.createText(this._el_12, '\n			', null);
        this._text_19 = this.renderer.createText(this._el_2, '\n			', null);
        this._el_20 = import3.createRenderElement(this.renderer, this._el_2, 'div', new import3.InlineArray2(2, 'class', 'form-group'), null);
        this._text_21 = this.renderer.createText(this._el_20, '\n				', null);
        this._el_22 = import3.createRenderElement(this.renderer, this._el_20, 'label', new import3.InlineArray2(2, 'for', 'population'), null);
        this._text_23 = this.renderer.createText(this._el_22, 'Population', null);
        this._text_24 = this.renderer.createText(this._el_20, '\n				', null);
        this._el_25 = import3.createRenderElement(this.renderer, this._el_20, 'input', new import3.InlineArray8(8, 'class', 'form-control', 'name', 'population', 'placeholder', 'Population', 'type', 'text'), null);
        this._DefaultValueAccessor_25_3 = new import19.Wrapper_DefaultValueAccessor(this.renderer, new import15.ElementRef(this._el_25));
        this._NG_VALUE_ACCESSOR_25_4 = [this._DefaultValueAccessor_25_3.context];
        this._NgModel_25_5 = new import20.Wrapper_NgModel(this._ControlContainer_2_4, null, null, this._NG_VALUE_ACCESSOR_25_4);
        this._NgControl_25_6 = this._NgModel_25_5.context;
        this._NgControlStatus_25_7 = new import18.Wrapper_NgControlStatus(this._NgControl_25_6);
        this._text_26 = this.renderer.createText(this._el_20, '\n			', null);
        this._text_27 = this.renderer.createText(this._el_2, '\n			', null);
        this._el_28 = import3.createRenderElement(this.renderer, this._el_2, 'div', new import3.InlineArray2(2, 'class', 'form-group'), null);
        this._text_29 = this.renderer.createText(this._el_28, '\n				', null);
        this._el_30 = import3.createRenderElement(this.renderer, this._el_28, 'label', new import3.InlineArray2(2, 'for', 'alpha2Code'), null);
        this._text_31 = this.renderer.createText(this._el_30, 'Alpha2 code', null);
        this._text_32 = this.renderer.createText(this._el_28, '\n				', null);
        this._el_33 = import3.createRenderElement(this.renderer, this._el_28, 'input', new import3.InlineArray8(8, 'class', 'form-control', 'name', 'alpha2Code', 'placeholder', 'Alpha2 code', 'type', 'text'), null);
        this._DefaultValueAccessor_33_3 = new import19.Wrapper_DefaultValueAccessor(this.renderer, new import15.ElementRef(this._el_33));
        this._NG_VALUE_ACCESSOR_33_4 = [this._DefaultValueAccessor_33_3.context];
        this._NgModel_33_5 = new import20.Wrapper_NgModel(this._ControlContainer_2_4, null, null, this._NG_VALUE_ACCESSOR_33_4);
        this._NgControl_33_6 = this._NgModel_33_5.context;
        this._NgControlStatus_33_7 = new import18.Wrapper_NgControlStatus(this._NgControl_33_6);
        this._text_34 = this.renderer.createText(this._el_28, '\n			', null);
        this._text_35 = this.renderer.createText(this._el_2, '\n			', null);
        this._el_36 = import3.createRenderElement(this.renderer, this._el_2, 'div', new import3.InlineArray2(2, 'class', 'form-group'), null);
        this._text_37 = this.renderer.createText(this._el_36, '\n				', null);
        this._el_38 = import3.createRenderElement(this.renderer, this._el_36, 'label', new import3.InlineArray2(2, 'for', 'alpha3Code'), null);
        this._text_39 = this.renderer.createText(this._el_38, 'Alpha3 code', null);
        this._text_40 = this.renderer.createText(this._el_36, '\n				', null);
        this._el_41 = import3.createRenderElement(this.renderer, this._el_36, 'input', new import3.InlineArray8(8, 'class', 'form-control', 'name', 'alpha3Code', 'placeholder', 'Alpha3 code', 'type', 'text'), null);
        this._DefaultValueAccessor_41_3 = new import19.Wrapper_DefaultValueAccessor(this.renderer, new import15.ElementRef(this._el_41));
        this._NG_VALUE_ACCESSOR_41_4 = [this._DefaultValueAccessor_41_3.context];
        this._NgModel_41_5 = new import20.Wrapper_NgModel(this._ControlContainer_2_4, null, null, this._NG_VALUE_ACCESSOR_41_4);
        this._NgControl_41_6 = this._NgModel_41_5.context;
        this._NgControlStatus_41_7 = new import18.Wrapper_NgControlStatus(this._NgControl_41_6);
        this._text_42 = this.renderer.createText(this._el_36, '\n			', null);
        this._text_43 = this.renderer.createText(this._el_2, '\n		', null);
        this._text_44 = this.renderer.createText(this._el_0, '\n	', null);
        var disposable_0 = import3.subscribeToRenderElement(this, this._el_2, new import3.InlineArray4(4, 'submit', null, 'reset', null), this.eventHandler(this.handleEvent_2));
        var disposable_1 = import3.subscribeToRenderElement(this, this._el_9, new import3.InlineArray8(6, 'ngModelChange', null, 'input', null, 'blur', null), this.eventHandler(this.handleEvent_9));
        this._NgModel_9_5.subscribe(this, this.eventHandler(this.handleEvent_9), true);
        var disposable_2 = import3.subscribeToRenderElement(this, this._el_17, new import3.InlineArray8(6, 'ngModelChange', null, 'input', null, 'blur', null), this.eventHandler(this.handleEvent_17));
        this._NgModel_17_5.subscribe(this, this.eventHandler(this.handleEvent_17), true);
        var disposable_3 = import3.subscribeToRenderElement(this, this._el_25, new import3.InlineArray8(6, 'ngModelChange', null, 'input', null, 'blur', null), this.eventHandler(this.handleEvent_25));
        this._NgModel_25_5.subscribe(this, this.eventHandler(this.handleEvent_25), true);
        var disposable_4 = import3.subscribeToRenderElement(this, this._el_33, new import3.InlineArray8(6, 'ngModelChange', null, 'input', null, 'blur', null), this.eventHandler(this.handleEvent_33));
        this._NgModel_33_5.subscribe(this, this.eventHandler(this.handleEvent_33), true);
        var disposable_5 = import3.subscribeToRenderElement(this, this._el_41, new import3.InlineArray8(6, 'ngModelChange', null, 'input', null, 'blur', null), this.eventHandler(this.handleEvent_41));
        this._NgModel_41_5.subscribe(this, this.eventHandler(this.handleEvent_41), true);
        this.init(this._el_0, [
            this._el_0,
            this._text_1,
            this._el_2,
            this._text_3,
            this._el_4,
            this._text_5,
            this._el_6,
            this._text_7,
            this._text_8,
            this._el_9,
            this._text_10,
            this._text_11,
            this._el_12,
            this._text_13,
            this._el_14,
            this._text_15,
            this._text_16,
            this._el_17,
            this._text_18,
            this._text_19,
            this._el_20,
            this._text_21,
            this._el_22,
            this._text_23,
            this._text_24,
            this._el_25,
            this._text_26,
            this._text_27,
            this._el_28,
            this._text_29,
            this._el_30,
            this._text_31,
            this._text_32,
            this._el_33,
            this._text_34,
            this._text_35,
            this._el_36,
            this._text_37,
            this._el_38,
            this._text_39,
            this._text_40,
            this._el_41,
            this._text_42,
            this._text_43,
            this._text_44
        ], [
            disposable_0,
            disposable_1,
            disposable_2,
            disposable_3,
            disposable_4,
            disposable_5
        ]);
        return null;
    };
    _View_CountryDetailsComponent3.prototype.injectorGetInternal = function (token, requestNodeIndex, notFoundResult) {
        if (((token === import21.DefaultValueAccessor) && (9 === requestNodeIndex))) {
            return this._DefaultValueAccessor_9_3.context;
        }
        if (((token === import22.NG_VALUE_ACCESSOR) && (9 === requestNodeIndex))) {
            return this._NG_VALUE_ACCESSOR_9_4;
        }
        if (((token === import23.NgModel) && (9 === requestNodeIndex))) {
            return this._NgModel_9_5.context;
        }
        if (((token === import24.NgControl) && (9 === requestNodeIndex))) {
            return this._NgControl_9_6;
        }
        if (((token === import25.NgControlStatus) && (9 === requestNodeIndex))) {
            return this._NgControlStatus_9_7.context;
        }
        if (((token === import21.DefaultValueAccessor) && (17 === requestNodeIndex))) {
            return this._DefaultValueAccessor_17_3.context;
        }
        if (((token === import22.NG_VALUE_ACCESSOR) && (17 === requestNodeIndex))) {
            return this._NG_VALUE_ACCESSOR_17_4;
        }
        if (((token === import23.NgModel) && (17 === requestNodeIndex))) {
            return this._NgModel_17_5.context;
        }
        if (((token === import24.NgControl) && (17 === requestNodeIndex))) {
            return this._NgControl_17_6;
        }
        if (((token === import25.NgControlStatus) && (17 === requestNodeIndex))) {
            return this._NgControlStatus_17_7.context;
        }
        if (((token === import21.DefaultValueAccessor) && (25 === requestNodeIndex))) {
            return this._DefaultValueAccessor_25_3.context;
        }
        if (((token === import22.NG_VALUE_ACCESSOR) && (25 === requestNodeIndex))) {
            return this._NG_VALUE_ACCESSOR_25_4;
        }
        if (((token === import23.NgModel) && (25 === requestNodeIndex))) {
            return this._NgModel_25_5.context;
        }
        if (((token === import24.NgControl) && (25 === requestNodeIndex))) {
            return this._NgControl_25_6;
        }
        if (((token === import25.NgControlStatus) && (25 === requestNodeIndex))) {
            return this._NgControlStatus_25_7.context;
        }
        if (((token === import21.DefaultValueAccessor) && (33 === requestNodeIndex))) {
            return this._DefaultValueAccessor_33_3.context;
        }
        if (((token === import22.NG_VALUE_ACCESSOR) && (33 === requestNodeIndex))) {
            return this._NG_VALUE_ACCESSOR_33_4;
        }
        if (((token === import23.NgModel) && (33 === requestNodeIndex))) {
            return this._NgModel_33_5.context;
        }
        if (((token === import24.NgControl) && (33 === requestNodeIndex))) {
            return this._NgControl_33_6;
        }
        if (((token === import25.NgControlStatus) && (33 === requestNodeIndex))) {
            return this._NgControlStatus_33_7.context;
        }
        if (((token === import21.DefaultValueAccessor) && (41 === requestNodeIndex))) {
            return this._DefaultValueAccessor_41_3.context;
        }
        if (((token === import22.NG_VALUE_ACCESSOR) && (41 === requestNodeIndex))) {
            return this._NG_VALUE_ACCESSOR_41_4;
        }
        if (((token === import23.NgModel) && (41 === requestNodeIndex))) {
            return this._NgModel_41_5.context;
        }
        if (((token === import24.NgControl) && (41 === requestNodeIndex))) {
            return this._NgControl_41_6;
        }
        if (((token === import25.NgControlStatus) && (41 === requestNodeIndex))) {
            return this._NgControlStatus_41_7.context;
        }
        if (((token === import26.NgForm) && ((2 <= requestNodeIndex) && (requestNodeIndex <= 43)))) {
            return this._NgForm_2_3.context;
        }
        if (((token === import27.ControlContainer) && ((2 <= requestNodeIndex) && (requestNodeIndex <= 43)))) {
            return this._ControlContainer_2_4;
        }
        if (((token === import25.NgControlStatusGroup) && ((2 <= requestNodeIndex) && (requestNodeIndex <= 43)))) {
            return this._NgControlStatusGroup_2_5.context;
        }
        return notFoundResult;
    };
    _View_CountryDetailsComponent3.prototype.detectChangesInternal = function (throwOnChange) {
        this._NgForm_2_3.ngDoCheck(this, this._el_2, throwOnChange);
        this._NgControlStatusGroup_2_5.ngDoCheck(this, this._el_2, throwOnChange);
        this._DefaultValueAccessor_9_3.ngDoCheck(this, this._el_9, throwOnChange);
        var currVal_9_1_0 = 'name';
        this._NgModel_9_5.check_name(currVal_9_1_0, throwOnChange, false);
        var currVal_9_1_1 = this.parent.parent.context.countryInfo.name;
        this._NgModel_9_5.check_model(currVal_9_1_1, throwOnChange, false);
        this._NgModel_9_5.ngDoCheck(this, this._el_9, throwOnChange);
        this._NgControlStatus_9_7.ngDoCheck(this, this._el_9, throwOnChange);
        this._DefaultValueAccessor_17_3.ngDoCheck(this, this._el_17, throwOnChange);
        var currVal_17_1_0 = 'nativeName';
        this._NgModel_17_5.check_name(currVal_17_1_0, throwOnChange, false);
        var currVal_17_1_1 = this.parent.parent.context.countryInfo.nativeName;
        this._NgModel_17_5.check_model(currVal_17_1_1, throwOnChange, false);
        this._NgModel_17_5.ngDoCheck(this, this._el_17, throwOnChange);
        this._NgControlStatus_17_7.ngDoCheck(this, this._el_17, throwOnChange);
        this._DefaultValueAccessor_25_3.ngDoCheck(this, this._el_25, throwOnChange);
        var currVal_25_1_0 = 'population';
        this._NgModel_25_5.check_name(currVal_25_1_0, throwOnChange, false);
        var currVal_25_1_1 = this.parent.parent.context.countryInfo.population;
        this._NgModel_25_5.check_model(currVal_25_1_1, throwOnChange, false);
        this._NgModel_25_5.ngDoCheck(this, this._el_25, throwOnChange);
        this._NgControlStatus_25_7.ngDoCheck(this, this._el_25, throwOnChange);
        this._DefaultValueAccessor_33_3.ngDoCheck(this, this._el_33, throwOnChange);
        var currVal_33_1_0 = 'alpha2Code';
        this._NgModel_33_5.check_name(currVal_33_1_0, throwOnChange, false);
        var currVal_33_1_1 = this.parent.parent.context.countryInfo.alpha2Code;
        this._NgModel_33_5.check_model(currVal_33_1_1, throwOnChange, false);
        this._NgModel_33_5.ngDoCheck(this, this._el_33, throwOnChange);
        this._NgControlStatus_33_7.ngDoCheck(this, this._el_33, throwOnChange);
        this._DefaultValueAccessor_41_3.ngDoCheck(this, this._el_41, throwOnChange);
        var currVal_41_1_0 = 'alpha3Code';
        this._NgModel_41_5.check_name(currVal_41_1_0, throwOnChange, false);
        var currVal_41_1_1 = this.parent.parent.context.countryInfo.alpha3Code;
        this._NgModel_41_5.check_model(currVal_41_1_1, throwOnChange, false);
        this._NgModel_41_5.ngDoCheck(this, this._el_41, throwOnChange);
        this._NgControlStatus_41_7.ngDoCheck(this, this._el_41, throwOnChange);
        this._NgControlStatusGroup_2_5.checkHost(this, this, this._el_2, throwOnChange);
        this._NgControlStatus_9_7.checkHost(this, this, this._el_9, throwOnChange);
        this._NgControlStatus_17_7.checkHost(this, this, this._el_17, throwOnChange);
        this._NgControlStatus_25_7.checkHost(this, this, this._el_25, throwOnChange);
        this._NgControlStatus_33_7.checkHost(this, this, this._el_33, throwOnChange);
        this._NgControlStatus_41_7.checkHost(this, this, this._el_41, throwOnChange);
    };
    _View_CountryDetailsComponent3.prototype.destroyInternal = function () {
        this._NgModel_9_5.ngOnDestroy();
        this._NgModel_17_5.ngOnDestroy();
        this._NgModel_25_5.ngOnDestroy();
        this._NgModel_33_5.ngOnDestroy();
        this._NgModel_41_5.ngOnDestroy();
        this._NgForm_2_3.ngOnDestroy();
    };
    _View_CountryDetailsComponent3.prototype.visitRootNodesInternal = function (cb, ctx) {
        cb(this._el_0, ctx);
    };
    _View_CountryDetailsComponent3.prototype.handleEvent_2 = function (eventName, $event) {
        this.markPathToRootAsCheckOnce();
        var result = true;
        result = (this._NgForm_2_3.handleEvent(eventName, $event) && result);
        return result;
    };
    _View_CountryDetailsComponent3.prototype.handleEvent_9 = function (eventName, $event) {
        this.markPathToRootAsCheckOnce();
        var result = true;
        result = (this._DefaultValueAccessor_9_3.handleEvent(eventName, $event) && result);
        if ((eventName == 'ngModelChange')) {
            var pd_sub_0 = ((this.parent.parent.context.countryInfo.name = $event) !== false);
            result = (pd_sub_0 && result);
        }
        return result;
    };
    _View_CountryDetailsComponent3.prototype.handleEvent_17 = function (eventName, $event) {
        this.markPathToRootAsCheckOnce();
        var result = true;
        result = (this._DefaultValueAccessor_17_3.handleEvent(eventName, $event) && result);
        if ((eventName == 'ngModelChange')) {
            var pd_sub_0 = ((this.parent.parent.context.countryInfo.nativeName = $event) !== false);
            result = (pd_sub_0 && result);
        }
        return result;
    };
    _View_CountryDetailsComponent3.prototype.handleEvent_25 = function (eventName, $event) {
        this.markPathToRootAsCheckOnce();
        var result = true;
        result = (this._DefaultValueAccessor_25_3.handleEvent(eventName, $event) && result);
        if ((eventName == 'ngModelChange')) {
            var pd_sub_0 = ((this.parent.parent.context.countryInfo.population = $event) !== false);
            result = (pd_sub_0 && result);
        }
        return result;
    };
    _View_CountryDetailsComponent3.prototype.handleEvent_33 = function (eventName, $event) {
        this.markPathToRootAsCheckOnce();
        var result = true;
        result = (this._DefaultValueAccessor_33_3.handleEvent(eventName, $event) && result);
        if ((eventName == 'ngModelChange')) {
            var pd_sub_0 = ((this.parent.parent.context.countryInfo.alpha2Code = $event) !== false);
            result = (pd_sub_0 && result);
        }
        return result;
    };
    _View_CountryDetailsComponent3.prototype.handleEvent_41 = function (eventName, $event) {
        this.markPathToRootAsCheckOnce();
        var result = true;
        result = (this._DefaultValueAccessor_41_3.handleEvent(eventName, $event) && result);
        if ((eventName == 'ngModelChange')) {
            var pd_sub_0 = ((this.parent.parent.context.countryInfo.alpha3Code = $event) !== false);
            result = (pd_sub_0 && result);
        }
        return result;
    };
    return _View_CountryDetailsComponent3;
}(import2.AppView));
function viewFactory_CountryDetailsComponent3(viewUtils, parentInjector, declarationEl) {
    return new _View_CountryDetailsComponent3(viewUtils, parentInjector, declarationEl);
}


/***/ },

/***/ "./src/compiled/src/app/+selection/selection-events/selection-events.component.ngfactory.ts":
/***/ function(module, exports, __webpack_require__) {

"use strict";
/**
 * This file is generated by the Angular 2 template compiler.
 * Do not edit.
 */
/* tslint:disable */
"use strict";
var import0 = __webpack_require__("./src/app/+selection/selection-events/selection-events.component.ts");
var import1 = __webpack_require__("./node_modules/@angular/core/src/linker/view.js");
var import3 = __webpack_require__("./node_modules/@angular/core/src/linker/element.js");
var import4 = __webpack_require__("./node_modules/@angular/core/src/linker/view_utils.js");
var import6 = __webpack_require__("./node_modules/@angular/core/src/linker/view_type.js");
var import7 = __webpack_require__("./node_modules/@angular/core/src/change_detection/change_detection.js");
var import8 = __webpack_require__("./src/app/+selection/countries.service.ts");
var import9 = __webpack_require__("./node_modules/@angular/core/src/metadata/view.js");
var import10 = __webpack_require__("./node_modules/@angular/core/src/linker/component_factory.js");
var import11 = __webpack_require__("./node_modules/right-angled/src/core/selection/selection-service.js");
var import12 = __webpack_require__("./node_modules/right-angled/src/core/providers.js");
var import13 = __webpack_require__("./src/compiled/node_modules/right-angled/src/selection-directives/selection-area.directive.ngfactory.ts");
var import14 = __webpack_require__("./node_modules/@angular/core/src/linker/query_list.js");
var import15 = __webpack_require__("./src/compiled/node_modules/@angular/common/src/directives/ng_for.ngfactory.ts");
var import16 = __webpack_require__("./node_modules/@angular/core/src/linker/template_ref.js");
var import17 = __webpack_require__("./node_modules/@angular/core/src/change_detection/differs/iterable_differs.js");
var import18 = __webpack_require__("./node_modules/@angular/common/src/directives/ng_for.js");
var import19 = __webpack_require__("./node_modules/right-angled/src/selection-directives/selection-area.directive.js");
var import20 = __webpack_require__("./src/app/+selection/selection-events/country-details/country-details.component.ts");
var import21 = __webpack_require__("./src/compiled/node_modules/right-angled/src/selection-directives/selectable.directive.ngfactory.ts");
var import22 = __webpack_require__("./src/compiled/src/app/+selection/selection-events/country-details/country-details.component.ngfactory.ts");
var import23 = __webpack_require__("./node_modules/right-angled/src/selection-directives/selectable.directive.js");
var Wrapper_SelectionEventsComponent = (function () {
    function Wrapper_SelectionEventsComponent(p0) {
        this._changed = false;
        this.context = new import0.SelectionEventsComponent(p0);
    }
    Wrapper_SelectionEventsComponent.prototype.ngOnDetach = function (view, componentView, el) {
    };
    Wrapper_SelectionEventsComponent.prototype.ngOnDestroy = function () {
    };
    Wrapper_SelectionEventsComponent.prototype.ngDoCheck = function (view, el, throwOnChange) {
        var changed = this._changed;
        this._changed = false;
        return changed;
    };
    Wrapper_SelectionEventsComponent.prototype.checkHost = function (view, componentView, el, throwOnChange) {
    };
    Wrapper_SelectionEventsComponent.prototype.handleEvent = function (eventName, $event) {
        var result = true;
        return result;
    };
    Wrapper_SelectionEventsComponent.prototype.subscribe = function (view, _eventHandler) {
        this._eventHandler = _eventHandler;
    };
    return Wrapper_SelectionEventsComponent;
}());
exports.Wrapper_SelectionEventsComponent = Wrapper_SelectionEventsComponent;
var renderType_SelectionEventsComponent_Host = null;
var _View_SelectionEventsComponent_Host0 = (function (_super) {
    __extends(_View_SelectionEventsComponent_Host0, _super);
    function _View_SelectionEventsComponent_Host0(viewUtils, parentInjector, declarationEl) {
        _super.call(this, _View_SelectionEventsComponent_Host0, renderType_SelectionEventsComponent_Host, import6.ViewType.HOST, viewUtils, parentInjector, declarationEl, import7.ChangeDetectorStatus.CheckAlways);
    }
    _View_SelectionEventsComponent_Host0.prototype.createInternal = function (rootSelector) {
        this._el_0 = import4.selectOrCreateRenderHostElement(this.renderer, 'rt-demo-selection-events', import4.EMPTY_INLINE_ARRAY, rootSelector, null);
        this._appEl_0 = new import3.AppElement(0, null, this, this._el_0);
        this.compView_0 = viewFactory_SelectionEventsComponent0(this.viewUtils, this.injector(0), this._appEl_0);
        this._SelectionEventsComponent_0_4 = new Wrapper_SelectionEventsComponent(this.parentInjector.get(import8.CountriesService));
        this._appEl_0.initComponent(this._SelectionEventsComponent_0_4.context, this.compView_0);
        this.compView_0.create(this._SelectionEventsComponent_0_4.context, null);
        this.init(this._el_0, [this._el_0], null);
        return this._appEl_0;
    };
    _View_SelectionEventsComponent_Host0.prototype.injectorGetInternal = function (token, requestNodeIndex, notFoundResult) {
        if (((token === import0.SelectionEventsComponent) && (0 === requestNodeIndex))) {
            return this._SelectionEventsComponent_0_4.context;
        }
        return notFoundResult;
    };
    _View_SelectionEventsComponent_Host0.prototype.detectChangesInternal = function (throwOnChange) {
        this._SelectionEventsComponent_0_4.ngDoCheck(this, this._el_0, throwOnChange);
        this.compView_0.detectChanges(throwOnChange);
    };
    _View_SelectionEventsComponent_Host0.prototype.destroyInternal = function () {
        this.compView_0.destroy();
    };
    _View_SelectionEventsComponent_Host0.prototype.visitRootNodesInternal = function (cb, ctx) {
        cb(this._el_0, ctx);
    };
    return _View_SelectionEventsComponent_Host0;
}(import1.AppView));
function viewFactory_SelectionEventsComponent_Host0(viewUtils, parentInjector, declarationEl) {
    if ((renderType_SelectionEventsComponent_Host === null)) {
        (renderType_SelectionEventsComponent_Host = viewUtils.createRenderComponentType('', 0, import9.ViewEncapsulation.None, [], {}));
    }
    return new _View_SelectionEventsComponent_Host0(viewUtils, parentInjector, declarationEl);
}
exports.SelectionEventsComponentNgFactory = new import10.ComponentFactory('rt-demo-selection-events', viewFactory_SelectionEventsComponent_Host0, import0.SelectionEventsComponent);
var styles_SelectionEventsComponent = [];
var renderType_SelectionEventsComponent = null;
var _View_SelectionEventsComponent0 = (function (_super) {
    __extends(_View_SelectionEventsComponent0, _super);
    function _View_SelectionEventsComponent0(viewUtils, parentInjector, declarationEl) {
        _super.call(this, _View_SelectionEventsComponent0, renderType_SelectionEventsComponent, import6.ViewType.COMPONENT, viewUtils, parentInjector, declarationEl, import7.ChangeDetectorStatus.CheckAlways);
    }
    _View_SelectionEventsComponent0.prototype.createInternal = function (rootSelector) {
        var parentRenderNode = this.renderer.createViewRoot(this.declarationAppElement.nativeElement);
        this._el_0 = import4.createRenderElement(this.renderer, parentRenderNode, 'div', new import4.InlineArray4(4, 'class', 'row', 'rtSelectionArea', 'countries'), null);
        this._RtSelectionService_0_3 = new import11.RtSelectionService();
        this._RtSelectionEventsHelper_0_4 = new import12.RtSelectionEventsHelper(this._RtSelectionService_0_3);
        this._SelectionAreaDirective_0_5 = new import13.Wrapper_SelectionAreaDirective(this._RtSelectionService_0_3, this._RtSelectionEventsHelper_0_4);
        this._query_SelectableDirective_0_0 = new import14.QueryList();
        this._query_SelectionCheckboxForDirective_0_1 = new import14.QueryList();
        this._query_SelectionAreaDirective_0_2 = new import14.QueryList();
        this._text_1 = this.renderer.createText(this._el_0, '\n  ', null);
        this._anchor_2 = this.renderer.createTemplateAnchor(this._el_0, null);
        this._appEl_2 = new import3.AppElement(2, 0, this, this._anchor_2);
        this._TemplateRef_2_5 = new import16.TemplateRef_(this._appEl_2, viewFactory_SelectionEventsComponent1);
        this._NgFor_2_6 = new import15.Wrapper_NgFor(this._appEl_2.vcRef, this._TemplateRef_2_5, this.parentInjector.get(import17.IterableDiffers), this.ref);
        this._text_3 = this.renderer.createText(this._el_0, '\n', null);
        var disposable_0 = import4.subscribeToRenderElement(this, this._el_0, new import4.InlineArray8(6, 'itemSelected', null, 'itemDeselected', null, 'keydown', null), this.eventHandler(this.handleEvent_0));
        this._SelectionAreaDirective_0_5.subscribe(this, this.eventHandler(this.handleEvent_0), true, true, false);
        this.init(null, [
            this._el_0,
            this._text_1,
            this._anchor_2,
            this._text_3
        ], [disposable_0]);
        return null;
    };
    _View_SelectionEventsComponent0.prototype.injectorGetInternal = function (token, requestNodeIndex, notFoundResult) {
        if (((token === import16.TemplateRef) && (2 === requestNodeIndex))) {
            return this._TemplateRef_2_5;
        }
        if (((token === import18.NgFor) && (2 === requestNodeIndex))) {
            return this._NgFor_2_6.context;
        }
        if (((token === import11.RtSelectionService) && ((0 <= requestNodeIndex) && (requestNodeIndex <= 3)))) {
            return this._RtSelectionService_0_3;
        }
        if (((token === import12.RtSelectionEventsHelper) && ((0 <= requestNodeIndex) && (requestNodeIndex <= 3)))) {
            return this._RtSelectionEventsHelper_0_4;
        }
        if (((token === import19.SelectionAreaDirective) && ((0 <= requestNodeIndex) && (requestNodeIndex <= 3)))) {
            return this._SelectionAreaDirective_0_5.context;
        }
        return notFoundResult;
    };
    _View_SelectionEventsComponent0.prototype.detectChangesInternal = function (throwOnChange) {
        this._SelectionAreaDirective_0_5.ngDoCheck(this, this._el_0, throwOnChange);
        var currVal_2_0_0 = this.context.countries;
        this._NgFor_2_6.check_ngForOf(currVal_2_0_0, throwOnChange, false);
        this._NgFor_2_6.ngDoCheck(this, this._anchor_2, throwOnChange);
        this._appEl_2.detectChangesInNestedViews(throwOnChange);
        if (!throwOnChange) {
            if (this._query_SelectableDirective_0_0.dirty) {
                this._query_SelectableDirective_0_0.reset([this._appEl_2.mapNestedViews(_View_SelectionEventsComponent1, function (nestedView) {
                        return [nestedView._SelectableDirective_2_4.context];
                    })]);
                this._SelectionAreaDirective_0_5.context.selectableItems = this._query_SelectableDirective_0_0;
                this._query_SelectableDirective_0_0.notifyOnChanges();
            }
            if (this._query_SelectionCheckboxForDirective_0_1.dirty) {
                this._query_SelectionCheckboxForDirective_0_1.reset([]);
                this._SelectionAreaDirective_0_5.context.childSelectionCheckboxes = this._query_SelectionCheckboxForDirective_0_1;
                this._query_SelectionCheckboxForDirective_0_1.notifyOnChanges();
            }
            if (this._query_SelectionAreaDirective_0_2.dirty) {
                this._query_SelectionAreaDirective_0_2.reset([this._SelectionAreaDirective_0_5.context]);
                this._SelectionAreaDirective_0_5.context.childSelectionAreas = this._query_SelectionAreaDirective_0_2;
                this._query_SelectionAreaDirective_0_2.notifyOnChanges();
            }
            if ((this.numberOfChecks === 0)) {
                this._SelectionAreaDirective_0_5.context.ngAfterContentInit();
            }
        }
        this._SelectionAreaDirective_0_5.checkHost(this, this, this._el_0, throwOnChange);
    };
    _View_SelectionEventsComponent0.prototype.destroyInternal = function () {
        this._appEl_2.destroyNestedViews();
        this._SelectionAreaDirective_0_5.ngOnDestroy();
    };
    _View_SelectionEventsComponent0.prototype.handleEvent_0 = function (eventName, $event) {
        this.markPathToRootAsCheckOnce();
        var result = true;
        result = (this._SelectionAreaDirective_0_5.handleEvent(eventName, $event) && result);
        if ((eventName == 'itemSelected')) {
            var pd_sub_0 = (this.context.onItemSelected($event) !== false);
            result = (pd_sub_0 && result);
        }
        if ((eventName == 'itemDeselected')) {
            var pd_sub_1 = (this.context.onItemDeselected($event) !== false);
            result = (pd_sub_1 && result);
        }
        return result;
    };
    return _View_SelectionEventsComponent0;
}(import1.AppView));
function viewFactory_SelectionEventsComponent0(viewUtils, parentInjector, declarationEl) {
    if ((renderType_SelectionEventsComponent === null)) {
        (renderType_SelectionEventsComponent = viewUtils.createRenderComponentType('', 0, import9.ViewEncapsulation.None, styles_SelectionEventsComponent, {}));
    }
    return new _View_SelectionEventsComponent0(viewUtils, parentInjector, declarationEl);
}
exports.viewFactory_SelectionEventsComponent0 = viewFactory_SelectionEventsComponent0;
var _View_SelectionEventsComponent1 = (function (_super) {
    __extends(_View_SelectionEventsComponent1, _super);
    function _View_SelectionEventsComponent1(viewUtils, parentInjector, declarationEl) {
        _super.call(this, _View_SelectionEventsComponent1, renderType_SelectionEventsComponent, import6.ViewType.EMBEDDED, viewUtils, parentInjector, declarationEl, import7.ChangeDetectorStatus.CheckAlways);
    }
    _View_SelectionEventsComponent1.prototype.createInternal = function (rootSelector) {
        this._el_0 = import4.createRenderElement(this.renderer, null, 'div', new import4.InlineArray2(2, 'class', 'col-md-12'), null);
        this._text_1 = this.renderer.createText(this._el_0, '\n    ', null);
        this._el_2 = import4.createRenderElement(this.renderer, this._el_0, 'rt-demo-country-details', import4.EMPTY_INLINE_ARRAY, null);
        this._appEl_2 = new import3.AppElement(2, 0, this, this._el_2);
        this.compView_2 = import22.viewFactory_CountryDetailsComponent0(this.viewUtils, this.injector(2), this._appEl_2);
        this._SelectableDirective_2_4 = new import21.Wrapper_SelectableDirective(this.parent._RtSelectionEventsHelper_0_4);
        this._CountryDetailsComponent_2_5 = new import22.Wrapper_CountryDetailsComponent(this.parent.parentInjector.get(import8.CountriesService));
        this._appEl_2.initComponent(this._CountryDetailsComponent_2_5.context, this.compView_2);
        this._text_3 = this.renderer.createText(null, '\n    ', null);
        this.compView_2.create(this._CountryDetailsComponent_2_5.context, null);
        this._text_4 = this.renderer.createText(this._el_0, '\n  ', null);
        var disposable_0 = import4.subscribeToRenderElement(this, this._el_2, new import4.InlineArray8(6, 'itemSelected', null, 'itemDeselected', null, 'mouseup', null), this.eventHandler(this.handleEvent_2));
        this._SelectableDirective_2_4.subscribe(this, this.eventHandler(this.handleEvent_2), true, true, false);
        this.init(this._el_0, [
            this._el_0,
            this._text_1,
            this._el_2,
            this._text_3,
            this._text_4
        ], [disposable_0]);
        return null;
    };
    _View_SelectionEventsComponent1.prototype.injectorGetInternal = function (token, requestNodeIndex, notFoundResult) {
        if (((token === import23.SelectableDirective) && ((2 <= requestNodeIndex) && (requestNodeIndex <= 3)))) {
            return this._SelectableDirective_2_4.context;
        }
        if (((token === import20.CountryDetailsComponent) && ((2 <= requestNodeIndex) && (requestNodeIndex <= 3)))) {
            return this._CountryDetailsComponent_2_5.context;
        }
        return notFoundResult;
    };
    _View_SelectionEventsComponent1.prototype.detectChangesInternal = function (throwOnChange) {
        var currVal_2_0_0 = this.context.$implicit;
        this._SelectableDirective_2_4.check_item(currVal_2_0_0, throwOnChange, false);
        this._SelectableDirective_2_4.ngDoCheck(this, this._el_2, throwOnChange);
        var currVal_2_1_0 = this.context.$implicit;
        this._CountryDetailsComponent_2_5.check_country(currVal_2_1_0, throwOnChange, false);
        this._CountryDetailsComponent_2_5.ngDoCheck(this, this._el_2, throwOnChange);
        this.compView_2.detectChanges(throwOnChange);
    };
    _View_SelectionEventsComponent1.prototype.dirtyParentQueriesInternal = function () {
        this.parent._query_SelectableDirective_0_0.setDirty();
    };
    _View_SelectionEventsComponent1.prototype.destroyInternal = function () {
        this.compView_2.destroy();
        this._SelectableDirective_2_4.ngOnDestroy();
    };
    _View_SelectionEventsComponent1.prototype.visitRootNodesInternal = function (cb, ctx) {
        cb(this._el_0, ctx);
    };
    _View_SelectionEventsComponent1.prototype.handleEvent_2 = function (eventName, $event) {
        this.markPathToRootAsCheckOnce();
        var result = true;
        result = (this._SelectableDirective_2_4.handleEvent(eventName, $event) && result);
        if ((eventName == 'itemSelected')) {
            var pd_sub_0 = (this._CountryDetailsComponent_2_5.context.onSelected() !== false);
            result = (pd_sub_0 && result);
        }
        if ((eventName == 'itemDeselected')) {
            var pd_sub_1 = (this._CountryDetailsComponent_2_5.context.onDeselected() !== false);
            result = (pd_sub_1 && result);
        }
        return result;
    };
    return _View_SelectionEventsComponent1;
}(import1.AppView));
function viewFactory_SelectionEventsComponent1(viewUtils, parentInjector, declarationEl) {
    return new _View_SelectionEventsComponent1(viewUtils, parentInjector, declarationEl);
}


/***/ },

/***/ "./src/compiled/src/app/+selection/selection.component.css.shim.ts":
/***/ function(module, exports) {

"use strict";
/**
 * This file is generated by the Angular 2 template compiler.
 * Do not edit.
 */
/* tslint:disable */
"use strict";
exports.styles = ['[_nghost-%COMP%]     div[rtSelectionArea] div[rtSelectionArea]{padding:0 15px}[_nghost-%COMP%]     form{margin:15px}[_nghost-%COMP%]     .row{margin-right:-5px;margin-left:-5px}[_nghost-%COMP%]     [class*=col-]{padding-right:1px;padding-left:1px}[_nghost-%COMP%]     .item{background-color:rebeccapurple;padding:25px;color:#fff;text-align:center;cursor:pointer;margin:1px 0}[_nghost-%COMP%]     .item.selected{background-color:#039be5 !important}'];


/***/ },

/***/ "./src/compiled/src/app/+selection/selection.component.ngfactory.ts":
/***/ function(module, exports, __webpack_require__) {

"use strict";
/**
 * This file is generated by the Angular 2 template compiler.
 * Do not edit.
 */
/* tslint:disable */
"use strict";
var import0 = __webpack_require__("./src/app/+selection/selection.component.ts");
var import1 = __webpack_require__("./node_modules/@angular/core/src/linker/view.js");
var import3 = __webpack_require__("./node_modules/@angular/core/src/linker/element.js");
var import4 = __webpack_require__("./node_modules/@angular/core/src/linker/view_utils.js");
var import6 = __webpack_require__("./node_modules/@angular/core/src/linker/view_type.js");
var import7 = __webpack_require__("./node_modules/@angular/core/src/change_detection/change_detection.js");
var import8 = __webpack_require__("./node_modules/@angular/core/src/metadata/view.js");
var import9 = __webpack_require__("./node_modules/@angular/core/src/linker/component_factory.js");
var import10 = __webpack_require__("./src/compiled/src/app/+selection/selection.component.css.shim.ts");
var import11 = __webpack_require__("./src/app/shared/tab/tab-section.component.ts");
var import12 = __webpack_require__("./src/compiled/src/app/shared/tab/tab-section.component.ngfactory.ts");
var import13 = __webpack_require__("./src/app/shared/tab/code-tab.component.ts");
var import14 = __webpack_require__("./src/compiled/src/app/shared/tab/code-tab.component.ngfactory.ts");
var import15 = __webpack_require__("./src/app/shared/tab/sample-tab.component.ts");
var import16 = __webpack_require__("./src/compiled/src/app/shared/tab/sample-tab.component.ngfactory.ts");
var import17 = __webpack_require__("./src/app/+selection/basic-usage/basic-usage.component.ts");
var import18 = __webpack_require__("./src/compiled/src/app/+selection/basic-usage/basic-usage.component.ngfactory.ts");
var import19 = __webpack_require__("./src/app/+selection/options/options.component.ts");
var import20 = __webpack_require__("./src/compiled/src/app/+selection/options/options.component.ngfactory.ts");
var import21 = __webpack_require__("./src/app/+selection/selected-flag/selected-flag.component.ts");
var import22 = __webpack_require__("./src/compiled/src/app/+selection/selected-flag/selected-flag.component.ngfactory.ts");
var import23 = __webpack_require__("./src/compiled/node_modules/@angular/router/src/directives/router_link.ngfactory.ts");
var import24 = __webpack_require__("./src/app/+selection/selected-flag-data/selected-flag-data.component.ts");
var import25 = __webpack_require__("./src/compiled/src/app/+selection/selected-flag-data/selected-flag-data.component.ngfactory.ts");
var import26 = __webpack_require__("./src/app/+selection/selection-events/selection-events.component.ts");
var import27 = __webpack_require__("./src/compiled/src/app/+selection/selection-events/selection-events.component.ngfactory.ts");
var import28 = __webpack_require__("./src/app/+selection/service-injection/service-injection.component.ts");
var import29 = __webpack_require__("./src/compiled/src/app/+selection/service-injection/service-injection.component.ngfactory.ts");
var import30 = __webpack_require__("./src/app/+selection/service-view-child/service-view-child.component.ts");
var import31 = __webpack_require__("./src/compiled/src/app/+selection/service-view-child/service-view-child.component.ngfactory.ts");
var import32 = __webpack_require__("./src/app/+selection/select-all/select-all.component.ts");
var import33 = __webpack_require__("./src/compiled/src/app/+selection/select-all/select-all.component.ngfactory.ts");
var import34 = __webpack_require__("./src/app/+selection/selection-checkbox/selection-checkbox.component.ts");
var import35 = __webpack_require__("./src/compiled/src/app/+selection/selection-checkbox/selection-checkbox.component.ngfactory.ts");
var import36 = __webpack_require__("./src/app/+selection/custom-track-by/custom-track-by.component.ts");
var import37 = __webpack_require__("./src/compiled/src/app/+selection/custom-track-by/custom-track-by.component.ngfactory.ts");
var import38 = __webpack_require__("./node_modules/@angular/http/src/http.js");
var import39 = __webpack_require__("./node_modules/@angular/core/src/linker/element_ref.js");
var import40 = __webpack_require__("./src/app/+selection/countries.service.ts");
var import41 = __webpack_require__("./node_modules/@angular/router/src/router.js");
var import42 = __webpack_require__("./node_modules/@angular/router/src/router_state.js");
var import43 = __webpack_require__("./node_modules/@angular/common/src/location/location_strategy.js");
var import44 = __webpack_require__("./node_modules/@angular/router/src/directives/router_link.js");
var Wrapper_SelectionComponent = (function () {
    function Wrapper_SelectionComponent() {
        this._changed = false;
        this.context = new import0.SelectionComponent();
    }
    Wrapper_SelectionComponent.prototype.ngOnDetach = function (view, componentView, el) {
    };
    Wrapper_SelectionComponent.prototype.ngOnDestroy = function () {
    };
    Wrapper_SelectionComponent.prototype.ngDoCheck = function (view, el, throwOnChange) {
        var changed = this._changed;
        this._changed = false;
        return changed;
    };
    Wrapper_SelectionComponent.prototype.checkHost = function (view, componentView, el, throwOnChange) {
    };
    Wrapper_SelectionComponent.prototype.handleEvent = function (eventName, $event) {
        var result = true;
        return result;
    };
    Wrapper_SelectionComponent.prototype.subscribe = function (view, _eventHandler) {
        this._eventHandler = _eventHandler;
    };
    return Wrapper_SelectionComponent;
}());
exports.Wrapper_SelectionComponent = Wrapper_SelectionComponent;
var renderType_SelectionComponent_Host = null;
var _View_SelectionComponent_Host0 = (function (_super) {
    __extends(_View_SelectionComponent_Host0, _super);
    function _View_SelectionComponent_Host0(viewUtils, parentInjector, declarationEl) {
        _super.call(this, _View_SelectionComponent_Host0, renderType_SelectionComponent_Host, import6.ViewType.HOST, viewUtils, parentInjector, declarationEl, import7.ChangeDetectorStatus.CheckAlways);
    }
    _View_SelectionComponent_Host0.prototype.createInternal = function (rootSelector) {
        this._el_0 = import4.selectOrCreateRenderHostElement(this.renderer, 'ng-component', import4.EMPTY_INLINE_ARRAY, rootSelector, null);
        this._appEl_0 = new import3.AppElement(0, null, this, this._el_0);
        this.compView_0 = viewFactory_SelectionComponent0(this.viewUtils, this.injector(0), this._appEl_0);
        this._SelectionComponent_0_4 = new Wrapper_SelectionComponent();
        this._appEl_0.initComponent(this._SelectionComponent_0_4.context, this.compView_0);
        this.compView_0.create(this._SelectionComponent_0_4.context, null);
        this.init(this._el_0, [this._el_0], null);
        return this._appEl_0;
    };
    _View_SelectionComponent_Host0.prototype.injectorGetInternal = function (token, requestNodeIndex, notFoundResult) {
        if (((token === import0.SelectionComponent) && (0 === requestNodeIndex))) {
            return this._SelectionComponent_0_4.context;
        }
        return notFoundResult;
    };
    _View_SelectionComponent_Host0.prototype.detectChangesInternal = function (throwOnChange) {
        this._SelectionComponent_0_4.ngDoCheck(this, this._el_0, throwOnChange);
        this.compView_0.detectChanges(throwOnChange);
    };
    _View_SelectionComponent_Host0.prototype.destroyInternal = function () {
        this.compView_0.destroy();
    };
    _View_SelectionComponent_Host0.prototype.visitRootNodesInternal = function (cb, ctx) {
        cb(this._el_0, ctx);
    };
    return _View_SelectionComponent_Host0;
}(import1.AppView));
function viewFactory_SelectionComponent_Host0(viewUtils, parentInjector, declarationEl) {
    if ((renderType_SelectionComponent_Host === null)) {
        (renderType_SelectionComponent_Host = viewUtils.createRenderComponentType('', 0, import8.ViewEncapsulation.None, [], {}));
    }
    return new _View_SelectionComponent_Host0(viewUtils, parentInjector, declarationEl);
}
exports.SelectionComponentNgFactory = new import9.ComponentFactory('ng-component', viewFactory_SelectionComponent_Host0, import0.SelectionComponent);
var styles_SelectionComponent = [import10.styles];
var renderType_SelectionComponent = null;
var _View_SelectionComponent0 = (function (_super) {
    __extends(_View_SelectionComponent0, _super);
    function _View_SelectionComponent0(viewUtils, parentInjector, declarationEl) {
        _super.call(this, _View_SelectionComponent0, renderType_SelectionComponent, import6.ViewType.COMPONENT, viewUtils, parentInjector, declarationEl, import7.ChangeDetectorStatus.CheckAlways);
        this._arr_838 = import4.pureProxy1(function (p0) {
            return [p0];
        });
    }
    _View_SelectionComponent0.prototype.createInternal = function (rootSelector) {
        var parentRenderNode = this.renderer.createViewRoot(this.declarationAppElement.nativeElement);
        this._el_0 = import4.createRenderElement(this.renderer, parentRenderNode, 'h2', import4.EMPTY_INLINE_ARRAY, null);
        this._text_1 = this.renderer.createText(this._el_0, 'Selection', null);
        this._text_2 = this.renderer.createText(parentRenderNode, '\n', null);
        this._el_3 = import4.createRenderElement(this.renderer, parentRenderNode, 'section', import4.EMPTY_INLINE_ARRAY, null);
        this._text_4 = this.renderer.createText(this._el_3, '\n	', null);
        this._el_5 = import4.createRenderElement(this.renderer, this._el_3, 'h3', import4.EMPTY_INLINE_ARRAY, null);
        this._text_6 = this.renderer.createText(this._el_5, 'Table of contents', null);
        this._text_7 = this.renderer.createText(this._el_3, '\n	', null);
        this._el_8 = import4.createRenderElement(this.renderer, this._el_3, 'ul', new import4.InlineArray2(2, 'class', 'agenda'), null);
        this._text_9 = this.renderer.createText(this._el_8, '\n		', null);
        this._el_10 = import4.createRenderElement(this.renderer, this._el_8, 'li', import4.EMPTY_INLINE_ARRAY, null);
        this._el_11 = import4.createRenderElement(this.renderer, this._el_10, 'a', new import4.InlineArray2(2, 'href', 'selection#common-idea'), null);
        this._text_12 = this.renderer.createText(this._el_11, 'Общая идея', null);
        this._text_13 = this.renderer.createText(this._el_8, '\n		', null);
        this._el_14 = import4.createRenderElement(this.renderer, this._el_8, 'li', import4.EMPTY_INLINE_ARRAY, null);
        this._el_15 = import4.createRenderElement(this.renderer, this._el_14, 'a', new import4.InlineArray2(2, 'href', 'selection#bootstrap'), null);
        this._text_16 = this.renderer.createText(this._el_15, 'Как подключить', null);
        this._text_17 = this.renderer.createText(this._el_8, '\n		', null);
        this._el_18 = import4.createRenderElement(this.renderer, this._el_8, 'li', import4.EMPTY_INLINE_ARRAY, null);
        this._el_19 = import4.createRenderElement(this.renderer, this._el_18, 'a', new import4.InlineArray2(2, 'href', 'selection#basic-use'), null);
        this._text_20 = this.renderer.createText(this._el_19, 'Простейший пример', null);
        this._text_21 = this.renderer.createText(this._el_8, '\n		', null);
        this._el_22 = import4.createRenderElement(this.renderer, this._el_8, 'li', import4.EMPTY_INLINE_ARRAY, null);
        this._el_23 = import4.createRenderElement(this.renderer, this._el_22, 'a', new import4.InlineArray2(2, 'href', 'selection#additional-options'), null);
        this._text_24 = this.renderer.createText(this._el_23, 'Дополнительные опции', null);
        this._text_25 = this.renderer.createText(this._el_8, '\n		', null);
        this._el_26 = import4.createRenderElement(this.renderer, this._el_8, 'li', import4.EMPTY_INLINE_ARRAY, null);
        this._el_27 = import4.createRenderElement(this.renderer, this._el_26, 'a', new import4.InlineArray2(2, 'href', 'selection#handle-selection'), null);
        this._text_28 = this.renderer.createText(this._el_27, 'Взаимодействие с selection', null);
        this._text_29 = this.renderer.createText(this._el_26, '\n			', null);
        this._el_30 = import4.createRenderElement(this.renderer, this._el_26, 'ul', import4.EMPTY_INLINE_ARRAY, null);
        this._text_31 = this.renderer.createText(this._el_30, '\n				', null);
        this._el_32 = import4.createRenderElement(this.renderer, this._el_30, 'li', import4.EMPTY_INLINE_ARRAY, null);
        this._el_33 = import4.createRenderElement(this.renderer, this._el_32, 'a', new import4.InlineArray2(2, 'href', 'selection#handle-selection-selected'), null);
        this._text_34 = this.renderer.createText(this._el_33, 'Флаг "selected"', null);
        this._text_35 = this.renderer.createText(this._el_30, '\n				', null);
        this._el_36 = import4.createRenderElement(this.renderer, this._el_30, 'li', import4.EMPTY_INLINE_ARRAY, null);
        this._el_37 = import4.createRenderElement(this.renderer, this._el_36, 'a', new import4.InlineArray2(2, 'href', 'selection#handle-selection-events'), null);
        this._text_38 = this.renderer.createText(this._el_37, 'События', null);
        this._text_39 = this.renderer.createText(this._el_30, '\n				', null);
        this._el_40 = import4.createRenderElement(this.renderer, this._el_30, 'li', import4.EMPTY_INLINE_ARRAY, null);
        this._el_41 = import4.createRenderElement(this.renderer, this._el_40, 'a', new import4.InlineArray2(2, 'href', 'selection#selection-service'), null);
        this._text_42 = this.renderer.createText(this._el_41, 'Работа с ', null);
        this._el_43 = import4.createRenderElement(this.renderer, this._el_41, 'code', import4.EMPTY_INLINE_ARRAY, null);
        this._text_44 = this.renderer.createText(this._el_43, 'RtSelectionService', null);
        this._text_45 = this.renderer.createText(this._el_30, '\n				', null);
        this._el_46 = import4.createRenderElement(this.renderer, this._el_30, 'li', import4.EMPTY_INLINE_ARRAY, null);
        this._el_47 = import4.createRenderElement(this.renderer, this._el_46, 'a', new import4.InlineArray2(2, 'href', 'selection#additional-methods'), null);
        this._text_48 = this.renderer.createText(this._el_47, 'Работа с ', null);
        this._el_49 = import4.createRenderElement(this.renderer, this._el_47, 'code', import4.EMPTY_INLINE_ARRAY, null);
        this._text_50 = this.renderer.createText(this._el_49, 'rtSelectionArea', null);
        this._text_51 = this.renderer.createText(this._el_47, ' в шаблоне', null);
        this._text_52 = this.renderer.createText(this._el_30, '\n			', null);
        this._text_53 = this.renderer.createText(this._el_26, '\n		', null);
        this._text_54 = this.renderer.createText(this._el_8, '\n		', null);
        this._el_55 = import4.createRenderElement(this.renderer, this._el_8, 'li', import4.EMPTY_INLINE_ARRAY, null);
        this._el_56 = import4.createRenderElement(this.renderer, this._el_55, 'a', new import4.InlineArray2(2, 'href', 'selection#additional-directives-checkboxes'), null);
        this._text_57 = this.renderer.createText(this._el_56, 'Директива ', null);
        this._el_58 = import4.createRenderElement(this.renderer, this._el_56, 'code', import4.EMPTY_INLINE_ARRAY, null);
        this._text_59 = this.renderer.createText(this._el_58, 'rtSelectionCheckboxFor', null);
        this._text_60 = this.renderer.createText(this._el_8, '\n		', null);
        this._el_61 = import4.createRenderElement(this.renderer, this._el_8, 'li', import4.EMPTY_INLINE_ARRAY, null);
        this._el_62 = import4.createRenderElement(this.renderer, this._el_61, 'a', new import4.InlineArray2(2, 'href', 'selection#additional-settings-trackBy'), null);
        this._el_63 = import4.createRenderElement(this.renderer, this._el_62, 'code', import4.EMPTY_INLINE_ARRAY, null);
        this._text_64 = this.renderer.createText(this._el_63, 'trackBy', null);
        this._text_65 = this.renderer.createText(this._el_62, ' function', null);
        this._text_66 = this.renderer.createText(this._el_8, '\n		', null);
        this._el_67 = import4.createRenderElement(this.renderer, this._el_8, 'li', import4.EMPTY_INLINE_ARRAY, null);
        this._el_68 = import4.createRenderElement(this.renderer, this._el_67, 'a', new import4.InlineArray2(2, 'href', 'selection#prevent-stop-events'), null);
        this._text_69 = this.renderer.createText(this._el_68, 'Параметры ', null);
        this._el_70 = import4.createRenderElement(this.renderer, this._el_68, 'code', import4.EMPTY_INLINE_ARRAY, null);
        this._text_71 = this.renderer.createText(this._el_70, 'preventEventsDefaults', null);
        this._text_72 = this.renderer.createText(this._el_68, ' и ', null);
        this._el_73 = import4.createRenderElement(this.renderer, this._el_68, 'code', import4.EMPTY_INLINE_ARRAY, null);
        this._text_74 = this.renderer.createText(this._el_73, 'stopEventsPropagation', null);
        this._text_75 = this.renderer.createText(this._el_8, '\n	', null);
        this._text_76 = this.renderer.createText(this._el_3, '\n', null);
        this._text_77 = this.renderer.createText(parentRenderNode, '\n', null);
        this._el_78 = import4.createRenderElement(this.renderer, parentRenderNode, 'section', new import4.InlineArray2(2, 'id', 'common-idea'), null);
        this._text_79 = this.renderer.createText(this._el_78, '\n	', null);
        this._el_80 = import4.createRenderElement(this.renderer, this._el_78, 'h3', import4.EMPTY_INLINE_ARRAY, null);
        this._text_81 = this.renderer.createText(this._el_80, 'Общая идея', null);
        this._text_82 = this.renderer.createText(this._el_78, '\n	', null);
        this._el_83 = import4.createRenderElement(this.renderer, this._el_78, 'p', import4.EMPTY_INLINE_ARRAY, null);
        this._text_84 = this.renderer.createText(this._el_83, '\n		Функционал selection позволяет реализовать на UI выбор элементов из произвольного набора данных. Также, при помощи selection\n		можно легко реализовать такие сценарии как accordion, группированные списки, отображение master-details, inline edit и\n		т.д.\n	', null);
        this._text_85 = this.renderer.createText(this._el_78, '\n', null);
        this._text_86 = this.renderer.createText(parentRenderNode, '\n', null);
        this._el_87 = import4.createRenderElement(this.renderer, parentRenderNode, 'section', new import4.InlineArray2(2, 'id', 'bootstrap'), null);
        this._text_88 = this.renderer.createText(this._el_87, '\n	', null);
        this._el_89 = import4.createRenderElement(this.renderer, this._el_87, 'h3', import4.EMPTY_INLINE_ARRAY, null);
        this._text_90 = this.renderer.createText(this._el_89, 'Как подключить', null);
        this._text_91 = this.renderer.createText(this._el_87, '\n	', null);
        this._el_92 = import4.createRenderElement(this.renderer, this._el_87, 'p', import4.EMPTY_INLINE_ARRAY, null);
        this._text_93 = this.renderer.createText(this._el_92, 'Чтобы подключить функционал selection, импортируйте модуль ', null);
        this._el_94 = import4.createRenderElement(this.renderer, this._el_92, 'code', import4.EMPTY_INLINE_ARRAY, null);
        this._text_95 = this.renderer.createText(this._el_94, 'RtSelectionModule', null);
        this._text_96 = this.renderer.createText(this._el_92, ' из библиотеки ', null);
        this._el_97 = import4.createRenderElement(this.renderer, this._el_92, 'code', import4.EMPTY_INLINE_ARRAY, null);
        this._text_98 = this.renderer.createText(this._el_97, 'right-angled', null);
        this._text_99 = this.renderer.createText(this._el_92, '.\n		Также можно импортировать модуль ', null);
        this._el_100 = import4.createRenderElement(this.renderer, this._el_92, 'code', import4.EMPTY_INLINE_ARRAY, null);
        this._text_101 = this.renderer.createText(this._el_100, 'RtModule', null);
        this._text_102 = this.renderer.createText(this._el_92, ', включающий в себя функционал всей библиотеки ', null);
        this._el_103 = import4.createRenderElement(this.renderer, this._el_92, 'code', import4.EMPTY_INLINE_ARRAY, null);
        this._text_104 = this.renderer.createText(this._el_103, 'right-angled', null);
        this._text_105 = this.renderer.createText(this._el_92, '		целиком.\n	', null);
        this._text_106 = this.renderer.createText(this._el_87, '\n	', null);
        this._el_107 = import4.createRenderElement(this.renderer, this._el_87, 'rt-demo-tab-section', import4.EMPTY_INLINE_ARRAY, null);
        this._appEl_107 = new import3.AppElement(107, 87, this, this._el_107);
        this.compView_107 = import12.viewFactory_TabSectionComponent0(this.viewUtils, this.injector(107), this._appEl_107);
        this._TabSectionComponent_107_4 = new import12.Wrapper_TabSectionComponent();
        this._appEl_107.initComponent(this._TabSectionComponent_107_4.context, this.compView_107);
        this._text_108 = this.renderer.createText(null, '\n		', null);
        this._el_109 = import4.createRenderElement(this.renderer, null, 'rt-demo-code-tab', new import4.InlineArray2(2, 'url', '%2Bselection/bootstrap/app.module.tsfake'), null);
        this._appEl_109 = new import3.AppElement(109, 107, this, this._el_109);
        this.compView_109 = import14.viewFactory_CodeTabComponent0(this.viewUtils, this.injector(109), this._appEl_109);
        this._CodeTabComponent_109_4 = new import14.Wrapper_CodeTabComponent(this._TabSectionComponent_107_4.context, this.parentInjector.get(import38.Http), new import39.ElementRef(this._el_109));
        this._appEl_109.initComponent(this._CodeTabComponent_109_4.context, this.compView_109);
        this._text_110 = this.renderer.createText(null, '\n		', null);
        this.compView_109.create(this._CodeTabComponent_109_4.context, null);
        this._text_111 = this.renderer.createText(null, '\n	', null);
        this.compView_107.create(this._TabSectionComponent_107_4.context, null);
        this._text_112 = this.renderer.createText(this._el_87, '\n', null);
        this._text_113 = this.renderer.createText(parentRenderNode, '\n', null);
        this._el_114 = import4.createRenderElement(this.renderer, parentRenderNode, 'section', new import4.InlineArray2(2, 'id', 'basic-use'), null);
        this._text_115 = this.renderer.createText(this._el_114, '\n\n	', null);
        this._el_116 = import4.createRenderElement(this.renderer, this._el_114, 'h3', import4.EMPTY_INLINE_ARRAY, null);
        this._text_117 = this.renderer.createText(this._el_116, 'Простейший пример', null);
        this._text_118 = this.renderer.createText(this._el_114, '\n	', null);
        this._el_119 = import4.createRenderElement(this.renderer, this._el_114, 'p', import4.EMPTY_INLINE_ARRAY, null);
        this._text_120 = this.renderer.createText(this._el_119, '\n		Общая идея заключается в пометке HTML элемента, представляющего собой область выбора, директивой ', null);
        this._el_121 = import4.createRenderElement(this.renderer, this._el_119, 'code', import4.EMPTY_INLINE_ARRAY, null);
        this._text_122 = this.renderer.createText(this._el_121, 'rtSelectionArea', null);
        this._text_123 = this.renderer.createText(this._el_119, '.\n		Элементы внутри данной области, помеченные директивой ', null);
        this._el_124 = import4.createRenderElement(this.renderer, this._el_119, 'code', import4.EMPTY_INLINE_ARRAY, null);
        this._text_125 = this.renderer.createText(this._el_124, 'rtSelectable', null);
        this._text_126 = this.renderer.createText(this._el_119, ', становятся элементами выбора. В коде компонента,\n		как правило, никаких специфичных действий не требуется, все делается в шаблоне. Для работы с selection доступны следующие\n		команды:\n	', null);
        this._text_127 = this.renderer.createText(this._el_114, '\n	', null);
        this._el_128 = import4.createRenderElement(this.renderer, this._el_114, 'ul', new import4.InlineArray2(2, 'class', 'bulleted'), null);
        this._text_129 = this.renderer.createText(this._el_128, '\n		', null);
        this._el_130 = import4.createRenderElement(this.renderer, this._el_128, 'li', import4.EMPTY_INLINE_ARRAY, null);
        this._text_131 = this.renderer.createText(this._el_130, 'Клик мышью выбирает кликнутый элемент сбрасывая предыдущий выбор.', null);
        this._text_132 = this.renderer.createText(this._el_128, '\n		', null);
        this._el_133 = import4.createRenderElement(this.renderer, this._el_128, 'li', import4.EMPTY_INLINE_ARRAY, null);
        this._text_134 = this.renderer.createText(this._el_133, 'Клик мышью с зажатой клавишей ', null);
        this._el_135 = import4.createRenderElement(this.renderer, this._el_133, 'code', import4.EMPTY_INLINE_ARRAY, null);
        this._text_136 = this.renderer.createText(this._el_135, 'Ctrl', null);
        this._text_137 = this.renderer.createText(this._el_133, ' выбирает кликнутый элемент, сохраняя предыдущий выбор.', null);
        this._text_138 = this.renderer.createText(this._el_128, '\n		', null);
        this._el_139 = import4.createRenderElement(this.renderer, this._el_128, 'li', import4.EMPTY_INLINE_ARRAY, null);
        this._text_140 = this.renderer.createText(this._el_139, 'Клик мышью с зажатой клавишей ', null);
        this._el_141 = import4.createRenderElement(this.renderer, this._el_139, 'code', import4.EMPTY_INLINE_ARRAY, null);
        this._text_142 = this.renderer.createText(this._el_141, 'Shift', null);
        this._text_143 = this.renderer.createText(this._el_139, ' выбирает последовательность элементов от последнего выбранного до кликнутого.\n		', null);
        this._text_144 = this.renderer.createText(this._el_128, '\n		', null);
        this._el_145 = import4.createRenderElement(this.renderer, this._el_128, 'li', import4.EMPTY_INLINE_ARRAY, null);
        this._text_146 = this.renderer.createText(this._el_145, 'Нажатие клавиши ', null);
        this._el_147 = import4.createRenderElement(this.renderer, this._el_145, 'code', import4.EMPTY_INLINE_ARRAY, null);
        this._text_148 = this.renderer.createText(this._el_147, '↑', null);
        this._text_149 = this.renderer.createText(this._el_145, ' выбирает предыдущий элемент.', null);
        this._text_150 = this.renderer.createText(this._el_128, '\n		', null);
        this._el_151 = import4.createRenderElement(this.renderer, this._el_128, 'li', import4.EMPTY_INLINE_ARRAY, null);
        this._text_152 = this.renderer.createText(this._el_151, 'Нажатие клавиши ', null);
        this._el_153 = import4.createRenderElement(this.renderer, this._el_151, 'code', import4.EMPTY_INLINE_ARRAY, null);
        this._text_154 = this.renderer.createText(this._el_153, '↓', null);
        this._text_155 = this.renderer.createText(this._el_151, ' выбирает следующий элемент.', null);
        this._text_156 = this.renderer.createText(this._el_128, '\n		', null);
        this._el_157 = import4.createRenderElement(this.renderer, this._el_128, 'li', import4.EMPTY_INLINE_ARRAY, null);
        this._text_158 = this.renderer.createText(this._el_157, 'Нажатие клавиш ', null);
        this._el_159 = import4.createRenderElement(this.renderer, this._el_157, 'code', import4.EMPTY_INLINE_ARRAY, null);
        this._text_160 = this.renderer.createText(this._el_159, 'Ctrl + ↑', null);
        this._text_161 = this.renderer.createText(this._el_157, ' выбирает первый элемент в списке.', null);
        this._text_162 = this.renderer.createText(this._el_128, '\n		', null);
        this._el_163 = import4.createRenderElement(this.renderer, this._el_128, 'li', import4.EMPTY_INLINE_ARRAY, null);
        this._text_164 = this.renderer.createText(this._el_163, 'Нажатие клавиш ', null);
        this._el_165 = import4.createRenderElement(this.renderer, this._el_163, 'code', import4.EMPTY_INLINE_ARRAY, null);
        this._text_166 = this.renderer.createText(this._el_165, 'Ctrl + ↓', null);
        this._text_167 = this.renderer.createText(this._el_163, ' выбирает последний элемент в списке.', null);
        this._text_168 = this.renderer.createText(this._el_128, '\n		', null);
        this._el_169 = import4.createRenderElement(this.renderer, this._el_128, 'li', import4.EMPTY_INLINE_ARRAY, null);
        this._text_170 = this.renderer.createText(this._el_169, 'Нажатие клавиш ', null);
        this._el_171 = import4.createRenderElement(this.renderer, this._el_169, 'code', import4.EMPTY_INLINE_ARRAY, null);
        this._text_172 = this.renderer.createText(this._el_171, 'Ctrl + A', null);
        this._text_173 = this.renderer.createText(this._el_169, ' выбирает все элементы списка.', null);
        this._text_174 = this.renderer.createText(this._el_128, '\n		', null);
        this._el_175 = import4.createRenderElement(this.renderer, this._el_128, 'li', import4.EMPTY_INLINE_ARRAY, null);
        this._text_176 = this.renderer.createText(this._el_175, 'Нажатие клавиши ', null);
        this._el_177 = import4.createRenderElement(this.renderer, this._el_175, 'code', import4.EMPTY_INLINE_ARRAY, null);
        this._text_178 = this.renderer.createText(this._el_177, 'Tab', null);
        this._text_179 = this.renderer.createText(this._el_175, ' и ', null);
        this._el_180 = import4.createRenderElement(this.renderer, this._el_175, 'code', import4.EMPTY_INLINE_ARRAY, null);
        this._text_181 = this.renderer.createText(this._el_180, 'Shift + Tab', null);
        this._text_182 = this.renderer.createText(this._el_175, ' перемещает вас по списку на элемент вверх или вниз.\n		', null);
        this._text_183 = this.renderer.createText(this._el_128, '\n	', null);
        this._text_184 = this.renderer.createText(this._el_114, '\n	', null);
        this._el_185 = import4.createRenderElement(this.renderer, this._el_114, 'rt-demo-tab-section', import4.EMPTY_INLINE_ARRAY, null);
        this._appEl_185 = new import3.AppElement(185, 114, this, this._el_185);
        this.compView_185 = import12.viewFactory_TabSectionComponent0(this.viewUtils, this.injector(185), this._appEl_185);
        this._TabSectionComponent_185_4 = new import12.Wrapper_TabSectionComponent();
        this._appEl_185.initComponent(this._TabSectionComponent_185_4.context, this.compView_185);
        this._text_186 = this.renderer.createText(null, '\n		', null);
        this._el_187 = import4.createRenderElement(this.renderer, null, 'rt-demo-sample-tab', import4.EMPTY_INLINE_ARRAY, null);
        this._appEl_187 = new import3.AppElement(187, 185, this, this._el_187);
        this.compView_187 = import16.viewFactory_SampleTabComponent0(this.viewUtils, this.injector(187), this._appEl_187);
        this._SampleTabComponent_187_4 = new import16.Wrapper_SampleTabComponent(this._TabSectionComponent_185_4.context);
        this._appEl_187.initComponent(this._SampleTabComponent_187_4.context, this.compView_187);
        this._text_188 = this.renderer.createText(null, '\n			', null);
        this._el_189 = import4.createRenderElement(this.renderer, null, 'rt-demo-basic-usage', import4.EMPTY_INLINE_ARRAY, null);
        this._appEl_189 = new import3.AppElement(189, 187, this, this._el_189);
        this.compView_189 = import18.viewFactory_BasicUsageComponent0(this.viewUtils, this.injector(189), this._appEl_189);
        this._BasicUsageComponent_189_4 = new import18.Wrapper_BasicUsageComponent(this.parentInjector.get(import40.CountriesService));
        this._appEl_189.initComponent(this._BasicUsageComponent_189_4.context, this.compView_189);
        this.compView_189.create(this._BasicUsageComponent_189_4.context, null);
        this._text_190 = this.renderer.createText(null, '\n		', null);
        this.compView_187.create(this._SampleTabComponent_187_4.context, null);
        this._text_191 = this.renderer.createText(null, '\n		', null);
        this._el_192 = import4.createRenderElement(this.renderer, null, 'rt-demo-code-tab', new import4.InlineArray2(2, 'url', '%2Bselection/basic-usage/basic-usage.component.html'), null);
        this._appEl_192 = new import3.AppElement(192, 185, this, this._el_192);
        this.compView_192 = import14.viewFactory_CodeTabComponent0(this.viewUtils, this.injector(192), this._appEl_192);
        this._CodeTabComponent_192_4 = new import14.Wrapper_CodeTabComponent(this._TabSectionComponent_185_4.context, this.parentInjector.get(import38.Http), new import39.ElementRef(this._el_192));
        this._appEl_192.initComponent(this._CodeTabComponent_192_4.context, this.compView_192);
        this._text_193 = this.renderer.createText(null, '\n		', null);
        this.compView_192.create(this._CodeTabComponent_192_4.context, null);
        this._text_194 = this.renderer.createText(null, '\n		', null);
        this._el_195 = import4.createRenderElement(this.renderer, null, 'rt-demo-code-tab', new import4.InlineArray2(2, 'url', '%2Bselection/basic-usage/basic-usage.component.ts'), null);
        this._appEl_195 = new import3.AppElement(195, 185, this, this._el_195);
        this.compView_195 = import14.viewFactory_CodeTabComponent0(this.viewUtils, this.injector(195), this._appEl_195);
        this._CodeTabComponent_195_4 = new import14.Wrapper_CodeTabComponent(this._TabSectionComponent_185_4.context, this.parentInjector.get(import38.Http), new import39.ElementRef(this._el_195));
        this._appEl_195.initComponent(this._CodeTabComponent_195_4.context, this.compView_195);
        this._text_196 = this.renderer.createText(null, '\n		', null);
        this.compView_195.create(this._CodeTabComponent_195_4.context, null);
        this._text_197 = this.renderer.createText(null, '\n	', null);
        this.compView_185.create(this._TabSectionComponent_185_4.context, null);
        this._text_198 = this.renderer.createText(this._el_114, '\n', null);
        this._text_199 = this.renderer.createText(parentRenderNode, '\n', null);
        this._el_200 = import4.createRenderElement(this.renderer, parentRenderNode, 'section', new import4.InlineArray2(2, 'id', 'additional-options'), null);
        this._text_201 = this.renderer.createText(this._el_200, '\n	', null);
        this._el_202 = import4.createRenderElement(this.renderer, this._el_200, 'h3', import4.EMPTY_INLINE_ARRAY, null);
        this._text_203 = this.renderer.createText(this._el_202, 'Дополнительные опции', null);
        this._text_204 = this.renderer.createText(this._el_200, '\n	', null);
        this._el_205 = import4.createRenderElement(this.renderer, this._el_200, 'p', import4.EMPTY_INLINE_ARRAY, null);
        this._text_206 = this.renderer.createText(this._el_205, '\n		Директива ', null);
        this._el_207 = import4.createRenderElement(this.renderer, this._el_205, 'code', import4.EMPTY_INLINE_ARRAY, null);
        this._text_208 = this.renderer.createText(this._el_207, 'rtSelectionArea', null);
        this._text_209 = this.renderer.createText(this._el_205, ' содержит множество рубильников, включая и выключая которые мы можем тонко настраивать\n		работу selection. Ниже приведен их список и пример, демонстрирующий их работу. Значения по умолчанию в примере аналогичны\n		значениям по умолчанию в директиве ', null);
        this._el_210 = import4.createRenderElement(this.renderer, this._el_205, 'code', import4.EMPTY_INLINE_ARRAY, null);
        this._text_211 = this.renderer.createText(this._el_210, 'rtSelectionArea', null);
        this._text_212 = this.renderer.createText(this._el_205, '.\n	', null);
        this._text_213 = this.renderer.createText(this._el_200, '\n	', null);
        this._el_214 = import4.createRenderElement(this.renderer, this._el_200, 'ul', new import4.InlineArray2(2, 'class', 'bulleted'), null);
        this._text_215 = this.renderer.createText(this._el_214, '\n		', null);
        this._el_216 = import4.createRenderElement(this.renderer, this._el_214, 'li', import4.EMPTY_INLINE_ARRAY, null);
        this._el_217 = import4.createRenderElement(this.renderer, this._el_216, 'code', import4.EMPTY_INLINE_ARRAY, null);
        this._text_218 = this.renderer.createText(this._el_217, 'horizontal', null);
        this._text_219 = this.renderer.createText(this._el_216, ' - если ', null);
        this._el_220 = import4.createRenderElement(this.renderer, this._el_216, 'code', import4.EMPTY_INLINE_ARRAY, null);
        this._text_221 = this.renderer.createText(this._el_220, 'true', null);
        this._text_222 = this.renderer.createText(this._el_216, ', обработчики selection начинают реагировать на стрелки на стрелки "влево-вправо",\n			вместо стрелок "вверх-вниз".', null);
        this._text_223 = this.renderer.createText(this._el_214, '\n		', null);
        this._el_224 = import4.createRenderElement(this.renderer, this._el_214, 'li', import4.EMPTY_INLINE_ARRAY, null);
        this._el_225 = import4.createRenderElement(this.renderer, this._el_224, 'code', import4.EMPTY_INLINE_ARRAY, null);
        this._text_226 = this.renderer.createText(this._el_225, 'toggleOnly', null);
        this._text_227 = this.renderer.createText(this._el_224, ' - если включить данную опцию, то снять selection с элемента можно только повторно кликнув по нему.\n			Имеет смысл только при включенной настройке ', null);
        this._el_228 = import4.createRenderElement(this.renderer, this._el_224, 'code', import4.EMPTY_INLINE_ARRAY, null);
        this._text_229 = this.renderer.createText(this._el_228, 'multiple', null);
        this._text_230 = this.renderer.createText(this._el_224, '.', null);
        this._text_231 = this.renderer.createText(this._el_214, '\n		', null);
        this._el_232 = import4.createRenderElement(this.renderer, this._el_214, 'li', import4.EMPTY_INLINE_ARRAY, null);
        this._el_233 = import4.createRenderElement(this.renderer, this._el_232, 'code', import4.EMPTY_INLINE_ARRAY, null);
        this._text_234 = this.renderer.createText(this._el_233, 'multiple', null);
        this._text_235 = this.renderer.createText(this._el_232, ' - если ', null);
        this._el_236 = import4.createRenderElement(this.renderer, this._el_232, 'code', import4.EMPTY_INLINE_ARRAY, null);
        this._text_237 = this.renderer.createText(this._el_236, 'true', null);
        this._text_238 = this.renderer.createText(this._el_232, ', то можно выбрать несколько элементов одновременно.', null);
        this._text_239 = this.renderer.createText(this._el_214, '\n		', null);
        this._el_240 = import4.createRenderElement(this.renderer, this._el_214, 'li', import4.EMPTY_INLINE_ARRAY, null);
        this._el_241 = import4.createRenderElement(this.renderer, this._el_240, 'code', import4.EMPTY_INLINE_ARRAY, null);
        this._text_242 = this.renderer.createText(this._el_241, 'autoSelectFirst', null);
        this._text_243 = this.renderer.createText(this._el_240, ' - если ', null);
        this._el_244 = import4.createRenderElement(this.renderer, this._el_240, 'code', import4.EMPTY_INLINE_ARRAY, null);
        this._text_245 = this.renderer.createText(this._el_244, 'true', null);
        this._text_246 = this.renderer.createText(this._el_240, ', то при каждой перезагрузке данных, если ничего не выбрано, первый\n			элемент будет выбираться автоматически.\n		', null);
        this._text_247 = this.renderer.createText(this._el_214, '\n	', null);
        this._text_248 = this.renderer.createText(this._el_200, '\n\n	', null);
        this._el_249 = import4.createRenderElement(this.renderer, this._el_200, 'rt-demo-tab-section', import4.EMPTY_INLINE_ARRAY, null);
        this._appEl_249 = new import3.AppElement(249, 200, this, this._el_249);
        this.compView_249 = import12.viewFactory_TabSectionComponent0(this.viewUtils, this.injector(249), this._appEl_249);
        this._TabSectionComponent_249_4 = new import12.Wrapper_TabSectionComponent();
        this._appEl_249.initComponent(this._TabSectionComponent_249_4.context, this.compView_249);
        this._text_250 = this.renderer.createText(null, '\n		', null);
        this._el_251 = import4.createRenderElement(this.renderer, null, 'rt-demo-sample-tab', import4.EMPTY_INLINE_ARRAY, null);
        this._appEl_251 = new import3.AppElement(251, 249, this, this._el_251);
        this.compView_251 = import16.viewFactory_SampleTabComponent0(this.viewUtils, this.injector(251), this._appEl_251);
        this._SampleTabComponent_251_4 = new import16.Wrapper_SampleTabComponent(this._TabSectionComponent_249_4.context);
        this._appEl_251.initComponent(this._SampleTabComponent_251_4.context, this.compView_251);
        this._text_252 = this.renderer.createText(null, '\n			', null);
        this._el_253 = import4.createRenderElement(this.renderer, null, 'rt-demo-options', import4.EMPTY_INLINE_ARRAY, null);
        this._appEl_253 = new import3.AppElement(253, 251, this, this._el_253);
        this.compView_253 = import20.viewFactory_OptionsComponent0(this.viewUtils, this.injector(253), this._appEl_253);
        this._OptionsComponent_253_4 = new import20.Wrapper_OptionsComponent(this.parentInjector.get(import40.CountriesService));
        this._appEl_253.initComponent(this._OptionsComponent_253_4.context, this.compView_253);
        this.compView_253.create(this._OptionsComponent_253_4.context, null);
        this._text_254 = this.renderer.createText(null, '\n		', null);
        this.compView_251.create(this._SampleTabComponent_251_4.context, null);
        this._text_255 = this.renderer.createText(null, '\n		', null);
        this._el_256 = import4.createRenderElement(this.renderer, null, 'rt-demo-code-tab', new import4.InlineArray2(2, 'url', '%2Bselection/options/options.component.html'), null);
        this._appEl_256 = new import3.AppElement(256, 249, this, this._el_256);
        this.compView_256 = import14.viewFactory_CodeTabComponent0(this.viewUtils, this.injector(256), this._appEl_256);
        this._CodeTabComponent_256_4 = new import14.Wrapper_CodeTabComponent(this._TabSectionComponent_249_4.context, this.parentInjector.get(import38.Http), new import39.ElementRef(this._el_256));
        this._appEl_256.initComponent(this._CodeTabComponent_256_4.context, this.compView_256);
        this._text_257 = this.renderer.createText(null, '\n		', null);
        this.compView_256.create(this._CodeTabComponent_256_4.context, null);
        this._text_258 = this.renderer.createText(null, '\n		', null);
        this._el_259 = import4.createRenderElement(this.renderer, null, 'rt-demo-code-tab', new import4.InlineArray2(2, 'url', '%2Bselection/options/options.component.ts'), null);
        this._appEl_259 = new import3.AppElement(259, 249, this, this._el_259);
        this.compView_259 = import14.viewFactory_CodeTabComponent0(this.viewUtils, this.injector(259), this._appEl_259);
        this._CodeTabComponent_259_4 = new import14.Wrapper_CodeTabComponent(this._TabSectionComponent_249_4.context, this.parentInjector.get(import38.Http), new import39.ElementRef(this._el_259));
        this._appEl_259.initComponent(this._CodeTabComponent_259_4.context, this.compView_259);
        this._text_260 = this.renderer.createText(null, '\n		', null);
        this.compView_259.create(this._CodeTabComponent_259_4.context, null);
        this._text_261 = this.renderer.createText(null, '\n	', null);
        this.compView_249.create(this._TabSectionComponent_249_4.context, null);
        this._text_262 = this.renderer.createText(this._el_200, '\n', null);
        this._text_263 = this.renderer.createText(parentRenderNode, '\n', null);
        this._el_264 = import4.createRenderElement(this.renderer, parentRenderNode, 'section', new import4.InlineArray2(2, 'id', 'handle-selection'), null);
        this._text_265 = this.renderer.createText(this._el_264, '\n	', null);
        this._el_266 = import4.createRenderElement(this.renderer, this._el_264, 'h3', import4.EMPTY_INLINE_ARRAY, null);
        this._text_267 = this.renderer.createText(this._el_266, 'Взаимодействие с selection', null);
        this._text_268 = this.renderer.createText(this._el_264, '\n	', null);
        this._el_269 = import4.createRenderElement(this.renderer, this._el_264, 'p', import4.EMPTY_INLINE_ARRAY, null);
        this._text_270 = this.renderer.createText(this._el_269, '\n		Для того, чтобы selection имел смысл, нужен способ выполнять определенные действия в зависимости от того, выбран или нет\n		определенный элемент. Для выполнения таких действий есть следующие опции:\n	', null);
        this._text_271 = this.renderer.createText(this._el_264, '\n	', null);
        this._el_272 = import4.createRenderElement(this.renderer, this._el_264, 'section', new import4.InlineArray2(2, 'id', 'handle-selection-selected'), null);
        this._text_273 = this.renderer.createText(this._el_272, '\n		', null);
        this._el_274 = import4.createRenderElement(this.renderer, this._el_272, 'h4', import4.EMPTY_INLINE_ARRAY, null);
        this._text_275 = this.renderer.createText(this._el_274, 'Флаг "selected"', null);
        this._text_276 = this.renderer.createText(this._el_272, '\n		', null);
        this._el_277 = import4.createRenderElement(this.renderer, this._el_272, 'p', import4.EMPTY_INLINE_ARRAY, null);
        this._text_278 = this.renderer.createText(this._el_277, '\n			Директива ', null);
        this._el_279 = import4.createRenderElement(this.renderer, this._el_277, 'code', import4.EMPTY_INLINE_ARRAY, null);
        this._text_280 = this.renderer.createText(this._el_279, 'rtSelectable', null);
        this._text_281 = this.renderer.createText(this._el_277, ' содержит флаг ', null);
        this._el_282 = import4.createRenderElement(this.renderer, this._el_277, 'code', import4.EMPTY_INLINE_ARRAY, null);
        this._text_283 = this.renderer.createText(this._el_282, 'selected', null);
        this._text_284 = this.renderer.createText(this._el_277, ', ссылаясь на который можно реагировать на изменения\n			состояния элемента. Пример такого подхода вы уже увидели в демо выше, где на основе значения этого флага выставляется\n			класс\n			', null);
        this._el_285 = import4.createRenderElement(this.renderer, this._el_277, 'code', import4.EMPTY_INLINE_ARRAY, null);
        this._text_286 = this.renderer.createText(this._el_285, 'selected', null);
        this._text_287 = this.renderer.createText(this._el_277, ', подсвечивающий выбранные элементы. Ниже показан чуть более интересный пример - реализация inline-редактирования\n			на основе флага selected.\n		', null);
        this._text_288 = this.renderer.createText(this._el_272, '\n		', null);
        this._el_289 = import4.createRenderElement(this.renderer, this._el_272, 'rt-demo-tab-section', import4.EMPTY_INLINE_ARRAY, null);
        this._appEl_289 = new import3.AppElement(289, 272, this, this._el_289);
        this.compView_289 = import12.viewFactory_TabSectionComponent0(this.viewUtils, this.injector(289), this._appEl_289);
        this._TabSectionComponent_289_4 = new import12.Wrapper_TabSectionComponent();
        this._appEl_289.initComponent(this._TabSectionComponent_289_4.context, this.compView_289);
        this._text_290 = this.renderer.createText(null, '\n			', null);
        this._el_291 = import4.createRenderElement(this.renderer, null, 'rt-demo-sample-tab', import4.EMPTY_INLINE_ARRAY, null);
        this._appEl_291 = new import3.AppElement(291, 289, this, this._el_291);
        this.compView_291 = import16.viewFactory_SampleTabComponent0(this.viewUtils, this.injector(291), this._appEl_291);
        this._SampleTabComponent_291_4 = new import16.Wrapper_SampleTabComponent(this._TabSectionComponent_289_4.context);
        this._appEl_291.initComponent(this._SampleTabComponent_291_4.context, this.compView_291);
        this._text_292 = this.renderer.createText(null, '\n				', null);
        this._el_293 = import4.createRenderElement(this.renderer, null, 'rt-demo-selected-flag', import4.EMPTY_INLINE_ARRAY, null);
        this._appEl_293 = new import3.AppElement(293, 291, this, this._el_293);
        this.compView_293 = import22.viewFactory_SelectedFlagComponent0(this.viewUtils, this.injector(293), this._appEl_293);
        this._SelectedFlagComponent_293_4 = new import22.Wrapper_SelectedFlagComponent(this.parentInjector.get(import40.CountriesService));
        this._appEl_293.initComponent(this._SelectedFlagComponent_293_4.context, this.compView_293);
        this.compView_293.create(this._SelectedFlagComponent_293_4.context, null);
        this._text_294 = this.renderer.createText(null, '\n			', null);
        this.compView_291.create(this._SampleTabComponent_291_4.context, null);
        this._text_295 = this.renderer.createText(null, '\n			', null);
        this._el_296 = import4.createRenderElement(this.renderer, null, 'rt-demo-code-tab', new import4.InlineArray2(2, 'url', '%2Bselection/selected-flag/selected-flag.component.html'), null);
        this._appEl_296 = new import3.AppElement(296, 289, this, this._el_296);
        this.compView_296 = import14.viewFactory_CodeTabComponent0(this.viewUtils, this.injector(296), this._appEl_296);
        this._CodeTabComponent_296_4 = new import14.Wrapper_CodeTabComponent(this._TabSectionComponent_289_4.context, this.parentInjector.get(import38.Http), new import39.ElementRef(this._el_296));
        this._appEl_296.initComponent(this._CodeTabComponent_296_4.context, this.compView_296);
        this._text_297 = this.renderer.createText(null, '\n			', null);
        this.compView_296.create(this._CodeTabComponent_296_4.context, null);
        this._text_298 = this.renderer.createText(null, '\n			', null);
        this._el_299 = import4.createRenderElement(this.renderer, null, 'rt-demo-code-tab', new import4.InlineArray2(2, 'url', '%2Bselection/selected-flag/selected-flag.component.ts'), null);
        this._appEl_299 = new import3.AppElement(299, 289, this, this._el_299);
        this.compView_299 = import14.viewFactory_CodeTabComponent0(this.viewUtils, this.injector(299), this._appEl_299);
        this._CodeTabComponent_299_4 = new import14.Wrapper_CodeTabComponent(this._TabSectionComponent_289_4.context, this.parentInjector.get(import38.Http), new import39.ElementRef(this._el_299));
        this._appEl_299.initComponent(this._CodeTabComponent_299_4.context, this.compView_299);
        this._text_300 = this.renderer.createText(null, '\n			', null);
        this.compView_299.create(this._CodeTabComponent_299_4.context, null);
        this._text_301 = this.renderer.createText(null, '\n		', null);
        this.compView_289.create(this._TabSectionComponent_289_4.context, null);
        this._text_302 = this.renderer.createText(this._el_272, '\n\n		', null);
        this._el_303 = import4.createRenderElement(this.renderer, this._el_272, 'aside', import4.EMPTY_INLINE_ARRAY, null);
        this._text_304 = this.renderer.createText(this._el_303, '\n			', null);
        this._el_305 = import4.createRenderElement(this.renderer, this._el_303, 'p', import4.EMPTY_INLINE_ARRAY, null);
        this._text_306 = this.renderer.createText(this._el_305, '\n				В данном примере мы используем ', null);
        this._el_307 = import4.createRenderElement(this.renderer, this._el_305, 'a', new import4.InlineArray2(2, 'href', '#'), null);
        this._RouterLinkWithHref_307_3 = new import23.Wrapper_RouterLinkWithHref(this.parentInjector.get(import41.Router), this.parentInjector.get(import42.ActivatedRoute), this.parentInjector.get(import43.LocationStrategy));
        this._text_308 = this.renderer.createText(this._el_307, 'вспомогательные директивы', null);
        this._text_309 = this.renderer.createText(this._el_305, '\n				', null);
        this._el_310 = import4.createRenderElement(this.renderer, this._el_305, 'code', import4.EMPTY_INLINE_ARRAY, null);
        this._text_311 = this.renderer.createText(this._el_310, 'rtFocusOnRender', null);
        this._text_312 = this.renderer.createText(this._el_305, ' и\n				', null);
        this._el_313 = import4.createRenderElement(this.renderer, this._el_305, 'code', import4.EMPTY_INLINE_ARRAY, null);
        this._text_314 = this.renderer.createText(this._el_313, 'rtStopEvents', null);
        this._text_315 = this.renderer.createText(this._el_305, ' для автоматической установки фокуса в элементе ', null);
        this._el_316 = import4.createRenderElement(this.renderer, this._el_305, 'code', import4.EMPTY_INLINE_ARRAY, null);
        this._text_317 = this.renderer.createText(this._el_316, 'input', null);
        this._text_318 = this.renderer.createText(this._el_305, ' и чтобы предотвратить bubbling\n				события\n				', null);
        this._el_319 = import4.createRenderElement(this.renderer, this._el_305, 'code', import4.EMPTY_INLINE_ARRAY, null);
        this._text_320 = this.renderer.createText(this._el_319, 'mouseup', null);
        this._text_321 = this.renderer.createText(this._el_305, ', который будет приводить к deselect-у строки.\n			', null);
        this._text_322 = this.renderer.createText(this._el_303, '\n		', null);
        this._text_323 = this.renderer.createText(this._el_272, '\n\n		', null);
        this._el_324 = import4.createRenderElement(this.renderer, this._el_272, 'p', import4.EMPTY_INLINE_ARRAY, null);
        this._text_325 = this.renderer.createText(this._el_324, '\n			Вы так же можете объявить свойство ', null);
        this._el_326 = import4.createRenderElement(this.renderer, this._el_324, 'code', import4.EMPTY_INLINE_ARRAY, null);
        this._text_327 = this.renderer.createText(this._el_326, 'selected', null);
        this._text_328 = this.renderer.createText(this._el_324, ' непосредственно в вашем элементе данных. В таком случае, selection\n			будет обновлять значение в зависимости от текущего состояния selection.\n		', null);
        this._text_329 = this.renderer.createText(this._el_272, '\n		', null);
        this._el_330 = import4.createRenderElement(this.renderer, this._el_272, 'rt-demo-tab-section', import4.EMPTY_INLINE_ARRAY, null);
        this._appEl_330 = new import3.AppElement(330, 272, this, this._el_330);
        this.compView_330 = import12.viewFactory_TabSectionComponent0(this.viewUtils, this.injector(330), this._appEl_330);
        this._TabSectionComponent_330_4 = new import12.Wrapper_TabSectionComponent();
        this._appEl_330.initComponent(this._TabSectionComponent_330_4.context, this.compView_330);
        this._text_331 = this.renderer.createText(null, '\n			', null);
        this._el_332 = import4.createRenderElement(this.renderer, null, 'rt-demo-sample-tab', import4.EMPTY_INLINE_ARRAY, null);
        this._appEl_332 = new import3.AppElement(332, 330, this, this._el_332);
        this.compView_332 = import16.viewFactory_SampleTabComponent0(this.viewUtils, this.injector(332), this._appEl_332);
        this._SampleTabComponent_332_4 = new import16.Wrapper_SampleTabComponent(this._TabSectionComponent_330_4.context);
        this._appEl_332.initComponent(this._SampleTabComponent_332_4.context, this.compView_332);
        this._text_333 = this.renderer.createText(null, '\n				', null);
        this._el_334 = import4.createRenderElement(this.renderer, null, 'rt-demo-selected-flag-data', import4.EMPTY_INLINE_ARRAY, null);
        this._appEl_334 = new import3.AppElement(334, 332, this, this._el_334);
        this.compView_334 = import25.viewFactory_SelectedFlagDataComponent0(this.viewUtils, this.injector(334), this._appEl_334);
        this._SelectedFlagDataComponent_334_4 = new import25.Wrapper_SelectedFlagDataComponent(this.parentInjector.get(import40.CountriesService));
        this._appEl_334.initComponent(this._SelectedFlagDataComponent_334_4.context, this.compView_334);
        this.compView_334.create(this._SelectedFlagDataComponent_334_4.context, null);
        this._text_335 = this.renderer.createText(null, '\n			', null);
        this.compView_332.create(this._SampleTabComponent_332_4.context, null);
        this._text_336 = this.renderer.createText(null, '\n			', null);
        this._el_337 = import4.createRenderElement(this.renderer, null, 'rt-demo-code-tab', new import4.InlineArray2(2, 'url', '%2Bselection/selected-flag-data/selected-flag-data.component.html'), null);
        this._appEl_337 = new import3.AppElement(337, 330, this, this._el_337);
        this.compView_337 = import14.viewFactory_CodeTabComponent0(this.viewUtils, this.injector(337), this._appEl_337);
        this._CodeTabComponent_337_4 = new import14.Wrapper_CodeTabComponent(this._TabSectionComponent_330_4.context, this.parentInjector.get(import38.Http), new import39.ElementRef(this._el_337));
        this._appEl_337.initComponent(this._CodeTabComponent_337_4.context, this.compView_337);
        this._text_338 = this.renderer.createText(null, '\n			', null);
        this.compView_337.create(this._CodeTabComponent_337_4.context, null);
        this._text_339 = this.renderer.createText(null, '\n			', null);
        this._el_340 = import4.createRenderElement(this.renderer, null, 'rt-demo-code-tab', new import4.InlineArray2(2, 'url', '%2Bselection/selected-flag-data/selected-flag-data.component.ts'), null);
        this._appEl_340 = new import3.AppElement(340, 330, this, this._el_340);
        this.compView_340 = import14.viewFactory_CodeTabComponent0(this.viewUtils, this.injector(340), this._appEl_340);
        this._CodeTabComponent_340_4 = new import14.Wrapper_CodeTabComponent(this._TabSectionComponent_330_4.context, this.parentInjector.get(import38.Http), new import39.ElementRef(this._el_340));
        this._appEl_340.initComponent(this._CodeTabComponent_340_4.context, this.compView_340);
        this._text_341 = this.renderer.createText(null, '\n			', null);
        this.compView_340.create(this._CodeTabComponent_340_4.context, null);
        this._text_342 = this.renderer.createText(null, '\n		', null);
        this.compView_330.create(this._TabSectionComponent_330_4.context, null);
        this._text_343 = this.renderer.createText(this._el_272, '\n\n	', null);
        this._text_344 = this.renderer.createText(this._el_264, '\n	', null);
        this._el_345 = import4.createRenderElement(this.renderer, this._el_264, 'section', new import4.InlineArray2(2, 'id', 'handle-selection-events'), null);
        this._text_346 = this.renderer.createText(this._el_345, '\n		', null);
        this._el_347 = import4.createRenderElement(this.renderer, this._el_345, 'h4', import4.EMPTY_INLINE_ARRAY, null);
        this._text_348 = this.renderer.createText(this._el_347, 'События', null);
        this._text_349 = this.renderer.createText(this._el_345, '\n		', null);
        this._el_350 = import4.createRenderElement(this.renderer, this._el_345, 'p', import4.EMPTY_INLINE_ARRAY, null);
        this._text_351 = this.renderer.createText(this._el_350, '\n			Вторым способом обработки selection являются события. По сути это и есть основной способ, первый же используется преимущественно\n			как shorthand для отображения состояния selection на UI.\n		', null);
        this._text_352 = this.renderer.createText(this._el_345, '\n		', null);
        this._el_353 = import4.createRenderElement(this.renderer, this._el_345, 'p', import4.EMPTY_INLINE_ARRAY, null);
        this._text_354 = this.renderer.createText(this._el_353, '\n			У нас есть три события, на которые мы можем подписаться: ', null);
        this._el_355 = import4.createRenderElement(this.renderer, this._el_353, 'code', import4.EMPTY_INLINE_ARRAY, null);
        this._text_356 = this.renderer.createText(this._el_355, 'itemSelected', null);
        this._text_357 = this.renderer.createText(this._el_353, ', ', null);
        this._el_358 = import4.createRenderElement(this.renderer, this._el_353, 'code', import4.EMPTY_INLINE_ARRAY, null);
        this._text_359 = this.renderer.createText(this._el_358, 'itemDeselected', null);
        this._text_360 = this.renderer.createText(this._el_353, ' и ', null);
        this._el_361 = import4.createRenderElement(this.renderer, this._el_353, 'code', import4.EMPTY_INLINE_ARRAY, null);
        this._text_362 = this.renderer.createText(this._el_361, 'selectionChanged', null);
        this._text_363 = this.renderer.createText(this._el_353, '.\n			Обработчики которых получают параметр, реализующий контракт ', null);
        this._el_364 = import4.createRenderElement(this.renderer, this._el_353, 'code', import4.EMPTY_INLINE_ARRAY, null);
        this._text_365 = this.renderer.createText(this._el_364, 'RtSelectionEvent', null);
        this._text_366 = this.renderer.createText(this._el_353, ' из библиотеки ', null);
        this._el_367 = import4.createRenderElement(this.renderer, this._el_353, 'code', import4.EMPTY_INLINE_ARRAY, null);
        this._text_368 = this.renderer.createText(this._el_367, 'right-angled', null);
        this._text_369 = this.renderer.createText(this._el_353, '.\n		', null);
        this._text_370 = this.renderer.createText(this._el_345, '\n		', null);
        this._el_371 = import4.createRenderElement(this.renderer, this._el_345, 'p', import4.EMPTY_INLINE_ARRAY, null);
        this._text_372 = this.renderer.createText(this._el_371, '\n			События генерируются как директивами элементов выбора (', null);
        this._el_373 = import4.createRenderElement(this.renderer, this._el_371, 'code', import4.EMPTY_INLINE_ARRAY, null);
        this._text_374 = this.renderer.createText(this._el_373, 'rtSelectable', null);
        this._text_375 = this.renderer.createText(this._el_371, ', ', null);
        this._el_376 = import4.createRenderElement(this.renderer, this._el_371, 'code', import4.EMPTY_INLINE_ARRAY, null);
        this._text_377 = this.renderer.createText(this._el_376, 'rtSelectionCheckboxFor', null);
        this._text_378 = this.renderer.createText(this._el_371, '),\n			так и всей ', null);
        this._el_379 = import4.createRenderElement(this.renderer, this._el_371, 'code', import4.EMPTY_INLINE_ARRAY, null);
        this._text_380 = this.renderer.createText(this._el_379, 'rtSelectionArea', null);
        this._text_381 = this.renderer.createText(this._el_371, '.\n		', null);
        this._text_382 = this.renderer.createText(this._el_345, '\n		', null);
        this._el_383 = import4.createRenderElement(this.renderer, this._el_345, 'p', import4.EMPTY_INLINE_ARRAY, null);
        this._text_384 = this.renderer.createText(this._el_383, '\n			Ниже вы можете увидеть пример, в котором обработчики ', null);
        this._el_385 = import4.createRenderElement(this.renderer, this._el_383, 'code', import4.EMPTY_INLINE_ARRAY, null);
        this._text_386 = this.renderer.createText(this._el_385, 'itemSelected', null);
        this._text_387 = this.renderer.createText(this._el_383, ' и ', null);
        this._el_388 = import4.createRenderElement(this.renderer, this._el_383, 'code', import4.EMPTY_INLINE_ARRAY, null);
        this._text_389 = this.renderer.createText(this._el_388, 'itemDeselected', null);
        this._text_390 = this.renderer.createText(this._el_383, ' уровня\n			', null);
        this._el_391 = import4.createRenderElement(this.renderer, this._el_383, 'code', import4.EMPTY_INLINE_ARRAY, null);
        this._text_392 = this.renderer.createText(this._el_391, 'rtSelectionArea', null);
        this._text_393 = this.renderer.createText(this._el_383, ' выводят на UI уведомления о том, что элемент был выбран. Обработчик уровня элемента, в свою\n			очередь обращается к сервису ', null);
        this._el_394 = import4.createRenderElement(this.renderer, this._el_383, 'a', new import4.InlineArray4(4, 'href', 'https://restcountries.eu', 'target', '_blank'), null);
        this._text_395 = this.renderer.createText(this._el_394, 'restcountries.eu', null);
        this._text_396 = this.renderer.createText(this._el_383, ' и отображает полученную\n			из него информацию о стране.\n		', null);
        this._text_397 = this.renderer.createText(this._el_345, '\n		', null);
        this._el_398 = import4.createRenderElement(this.renderer, this._el_345, 'rt-demo-tab-section', import4.EMPTY_INLINE_ARRAY, null);
        this._appEl_398 = new import3.AppElement(398, 345, this, this._el_398);
        this.compView_398 = import12.viewFactory_TabSectionComponent0(this.viewUtils, this.injector(398), this._appEl_398);
        this._TabSectionComponent_398_4 = new import12.Wrapper_TabSectionComponent();
        this._appEl_398.initComponent(this._TabSectionComponent_398_4.context, this.compView_398);
        this._text_399 = this.renderer.createText(null, '\n			', null);
        this._el_400 = import4.createRenderElement(this.renderer, null, 'rt-demo-sample-tab', import4.EMPTY_INLINE_ARRAY, null);
        this._appEl_400 = new import3.AppElement(400, 398, this, this._el_400);
        this.compView_400 = import16.viewFactory_SampleTabComponent0(this.viewUtils, this.injector(400), this._appEl_400);
        this._SampleTabComponent_400_4 = new import16.Wrapper_SampleTabComponent(this._TabSectionComponent_398_4.context);
        this._appEl_400.initComponent(this._SampleTabComponent_400_4.context, this.compView_400);
        this._text_401 = this.renderer.createText(null, '\n				', null);
        this._el_402 = import4.createRenderElement(this.renderer, null, 'rt-demo-selection-events', import4.EMPTY_INLINE_ARRAY, null);
        this._appEl_402 = new import3.AppElement(402, 400, this, this._el_402);
        this.compView_402 = import27.viewFactory_SelectionEventsComponent0(this.viewUtils, this.injector(402), this._appEl_402);
        this._SelectionEventsComponent_402_4 = new import27.Wrapper_SelectionEventsComponent(this.parentInjector.get(import40.CountriesService));
        this._appEl_402.initComponent(this._SelectionEventsComponent_402_4.context, this.compView_402);
        this.compView_402.create(this._SelectionEventsComponent_402_4.context, null);
        this._text_403 = this.renderer.createText(null, '\n			', null);
        this.compView_400.create(this._SampleTabComponent_400_4.context, null);
        this._text_404 = this.renderer.createText(null, '\n			', null);
        this._el_405 = import4.createRenderElement(this.renderer, null, 'rt-demo-code-tab', new import4.InlineArray2(2, 'url', '%2Bselection/selection-events/selection-events.component.html'), null);
        this._appEl_405 = new import3.AppElement(405, 398, this, this._el_405);
        this.compView_405 = import14.viewFactory_CodeTabComponent0(this.viewUtils, this.injector(405), this._appEl_405);
        this._CodeTabComponent_405_4 = new import14.Wrapper_CodeTabComponent(this._TabSectionComponent_398_4.context, this.parentInjector.get(import38.Http), new import39.ElementRef(this._el_405));
        this._appEl_405.initComponent(this._CodeTabComponent_405_4.context, this.compView_405);
        this._text_406 = this.renderer.createText(null, '\n			', null);
        this.compView_405.create(this._CodeTabComponent_405_4.context, null);
        this._text_407 = this.renderer.createText(null, '\n			', null);
        this._el_408 = import4.createRenderElement(this.renderer, null, 'rt-demo-code-tab', new import4.InlineArray2(2, 'url', '%2Bselection/selection-events/selection-events.component.ts'), null);
        this._appEl_408 = new import3.AppElement(408, 398, this, this._el_408);
        this.compView_408 = import14.viewFactory_CodeTabComponent0(this.viewUtils, this.injector(408), this._appEl_408);
        this._CodeTabComponent_408_4 = new import14.Wrapper_CodeTabComponent(this._TabSectionComponent_398_4.context, this.parentInjector.get(import38.Http), new import39.ElementRef(this._el_408));
        this._appEl_408.initComponent(this._CodeTabComponent_408_4.context, this.compView_408);
        this._text_409 = this.renderer.createText(null, '\n			', null);
        this.compView_408.create(this._CodeTabComponent_408_4.context, null);
        this._text_410 = this.renderer.createText(null, '\n			', null);
        this._el_411 = import4.createRenderElement(this.renderer, null, 'rt-demo-code-tab', new import4.InlineArray2(2, 'url', 'core/selection/selection-event.ts'), null);
        this._appEl_411 = new import3.AppElement(411, 398, this, this._el_411);
        this.compView_411 = import14.viewFactory_CodeTabComponent0(this.viewUtils, this.injector(411), this._appEl_411);
        this._CodeTabComponent_411_4 = new import14.Wrapper_CodeTabComponent(this._TabSectionComponent_398_4.context, this.parentInjector.get(import38.Http), new import39.ElementRef(this._el_411));
        this._appEl_411.initComponent(this._CodeTabComponent_411_4.context, this.compView_411);
        this._text_412 = this.renderer.createText(null, '\n			', null);
        this.compView_411.create(this._CodeTabComponent_411_4.context, null);
        this._text_413 = this.renderer.createText(null, '\n		', null);
        this.compView_398.create(this._TabSectionComponent_398_4.context, null);
        this._text_414 = this.renderer.createText(this._el_345, '\n	', null);
        this._text_415 = this.renderer.createText(this._el_264, '\n\n	', null);
        this._el_416 = import4.createRenderElement(this.renderer, this._el_264, 'section', new import4.InlineArray2(2, 'id', 'selection-service'), null);
        this._text_417 = this.renderer.createText(this._el_416, '\n		', null);
        this._el_418 = import4.createRenderElement(this.renderer, this._el_416, 'h4', import4.EMPTY_INLINE_ARRAY, null);
        this._text_419 = this.renderer.createText(this._el_418, 'Работа с ', null);
        this._el_420 = import4.createRenderElement(this.renderer, this._el_418, 'code', import4.EMPTY_INLINE_ARRAY, null);
        this._text_421 = this.renderer.createText(this._el_420, 'RtSelectionService', null);
        this._text_422 = this.renderer.createText(this._el_416, '\n		', null);
        this._el_423 = import4.createRenderElement(this.renderer, this._el_416, 'p', import4.EMPTY_INLINE_ARRAY, null);
        this._text_424 = this.renderer.createText(this._el_423, '\n			Данный подход наиболее гибок, поскольку дает доступ ко множеству методов работы с selection. Полный контракт работы с selection\n			вы можете посмотреть ', null);
        this._el_425 = import4.createRenderElement(this.renderer, this._el_423, 'a', new import4.InlineArray4(4, 'href', 'http://fshchudlo.github.io/e2e4/interfaces/selectionservice.html', 'target', '_blank'), null);
        this._text_426 = this.renderer.createText(this._el_425, 'здесь', null);
        this._text_427 = this.renderer.createText(this._el_423, '.\n		', null);
        this._text_428 = this.renderer.createText(this._el_416, '\n		', null);
        this._el_429 = import4.createRenderElement(this.renderer, this._el_416, 'p', import4.EMPTY_INLINE_ARRAY, null);
        this._text_430 = this.renderer.createText(this._el_429, '\n			Сервис ', null);
        this._el_431 = import4.createRenderElement(this.renderer, this._el_429, 'code', import4.EMPTY_INLINE_ARRAY, null);
        this._text_432 = this.renderer.createText(this._el_431, 'RtSelectionService', null);
        this._text_433 = this.renderer.createText(this._el_429, ' указан в коллекции ', null);
        this._el_434 = import4.createRenderElement(this.renderer, this._el_429, 'a', new import4.InlineArray4(4, 'href', 'https://angular.io/docs/ts/latest/api/core/index/Component-decorator.html', 'target', '_blank'), null);
        this._text_435 = this.renderer.createText(this._el_434, 'providers', null);
        this._text_436 = this.renderer.createText(this._el_429, '			для ', null);
        this._el_437 = import4.createRenderElement(this.renderer, this._el_429, 'code', import4.EMPTY_INLINE_ARRAY, null);
        this._text_438 = this.renderer.createText(this._el_437, 'rtSelectionArea', null);
        this._text_439 = this.renderer.createText(this._el_429, '. Поэтому, способ доступа к ', null);
        this._el_440 = import4.createRenderElement(this.renderer, this._el_429, 'code', import4.EMPTY_INLINE_ARRAY, null);
        this._text_441 = this.renderer.createText(this._el_440, 'SelectionService', null);
        this._text_442 = this.renderer.createText(this._el_429, ' в вашем компоненте зависит от\n			того, где в иерархии компонентов ваш компонент располагается. Если он расположен внутри компонента\n			', null);
        this._el_443 = import4.createRenderElement(this.renderer, this._el_429, 'code', import4.EMPTY_INLINE_ARRAY, null);
        this._text_444 = this.renderer.createText(this._el_443, 'rtSelectionArea', null);
        this._text_445 = this.renderer.createText(this._el_429, ', то вам достаточно указать данный сервис в качестве параметра конструктора вашего компонента.\n		', null);
        this._text_446 = this.renderer.createText(this._el_416, '\n		', null);
        this._el_447 = import4.createRenderElement(this.renderer, this._el_416, 'p', import4.EMPTY_INLINE_ARRAY, null);
        this._text_448 = this.renderer.createText(this._el_447, '\n			В примере ниже мы реализуем кастомную кнопку, в которую инжектим сервис ', null);
        this._el_449 = import4.createRenderElement(this.renderer, this._el_447, 'code', import4.EMPTY_INLINE_ARRAY, null);
        this._text_450 = this.renderer.createText(this._el_449, 'RtSelectionService', null);
        this._text_451 = this.renderer.createText(this._el_447, ' и при клике на\n			кнопку вызываем метод ', null);
        this._el_452 = import4.createRenderElement(this.renderer, this._el_447, 'code', import4.EMPTY_INLINE_ARRAY, null);
        this._text_453 = this.renderer.createText(this._el_452, 'getSelectedElements', null);
        this._text_454 = this.renderer.createText(this._el_447, ', чтобы получить набор выбранных элементов и показать во всплывающем\n			окне.\n		', null);
        this._text_455 = this.renderer.createText(this._el_416, '\n		', null);
        this._el_456 = import4.createRenderElement(this.renderer, this._el_416, 'rt-demo-tab-section', import4.EMPTY_INLINE_ARRAY, null);
        this._appEl_456 = new import3.AppElement(456, 416, this, this._el_456);
        this.compView_456 = import12.viewFactory_TabSectionComponent0(this.viewUtils, this.injector(456), this._appEl_456);
        this._TabSectionComponent_456_4 = new import12.Wrapper_TabSectionComponent();
        this._appEl_456.initComponent(this._TabSectionComponent_456_4.context, this.compView_456);
        this._text_457 = this.renderer.createText(null, '\n			', null);
        this._el_458 = import4.createRenderElement(this.renderer, null, 'rt-demo-sample-tab', import4.EMPTY_INLINE_ARRAY, null);
        this._appEl_458 = new import3.AppElement(458, 456, this, this._el_458);
        this.compView_458 = import16.viewFactory_SampleTabComponent0(this.viewUtils, this.injector(458), this._appEl_458);
        this._SampleTabComponent_458_4 = new import16.Wrapper_SampleTabComponent(this._TabSectionComponent_456_4.context);
        this._appEl_458.initComponent(this._SampleTabComponent_458_4.context, this.compView_458);
        this._text_459 = this.renderer.createText(null, '\n				', null);
        this._el_460 = import4.createRenderElement(this.renderer, null, 'rt-demo-service-injection', import4.EMPTY_INLINE_ARRAY, null);
        this._appEl_460 = new import3.AppElement(460, 458, this, this._el_460);
        this.compView_460 = import29.viewFactory_ServiceInjectionComponent0(this.viewUtils, this.injector(460), this._appEl_460);
        this._ServiceInjectionComponent_460_4 = new import29.Wrapper_ServiceInjectionComponent(this.parentInjector.get(import40.CountriesService));
        this._appEl_460.initComponent(this._ServiceInjectionComponent_460_4.context, this.compView_460);
        this.compView_460.create(this._ServiceInjectionComponent_460_4.context, null);
        this._text_461 = this.renderer.createText(null, '\n			', null);
        this.compView_458.create(this._SampleTabComponent_458_4.context, null);
        this._text_462 = this.renderer.createText(null, '\n			', null);
        this._el_463 = import4.createRenderElement(this.renderer, null, 'rt-demo-code-tab', new import4.InlineArray2(2, 'url', '%2Bselection/service-injection/service-injection.component.html'), null);
        this._appEl_463 = new import3.AppElement(463, 456, this, this._el_463);
        this.compView_463 = import14.viewFactory_CodeTabComponent0(this.viewUtils, this.injector(463), this._appEl_463);
        this._CodeTabComponent_463_4 = new import14.Wrapper_CodeTabComponent(this._TabSectionComponent_456_4.context, this.parentInjector.get(import38.Http), new import39.ElementRef(this._el_463));
        this._appEl_463.initComponent(this._CodeTabComponent_463_4.context, this.compView_463);
        this._text_464 = this.renderer.createText(null, '\n			', null);
        this.compView_463.create(this._CodeTabComponent_463_4.context, null);
        this._text_465 = this.renderer.createText(null, '\n			', null);
        this._el_466 = import4.createRenderElement(this.renderer, null, 'rt-demo-code-tab', new import4.InlineArray2(2, 'url', '%2Bselection/service-injection/service-injection.component.ts'), null);
        this._appEl_466 = new import3.AppElement(466, 456, this, this._el_466);
        this.compView_466 = import14.viewFactory_CodeTabComponent0(this.viewUtils, this.injector(466), this._appEl_466);
        this._CodeTabComponent_466_4 = new import14.Wrapper_CodeTabComponent(this._TabSectionComponent_456_4.context, this.parentInjector.get(import38.Http), new import39.ElementRef(this._el_466));
        this._appEl_466.initComponent(this._CodeTabComponent_466_4.context, this.compView_466);
        this._text_467 = this.renderer.createText(null, '\n			', null);
        this.compView_466.create(this._CodeTabComponent_466_4.context, null);
        this._text_468 = this.renderer.createText(null, '\n			', null);
        this._el_469 = import4.createRenderElement(this.renderer, null, 'rt-demo-code-tab', new import4.InlineArray2(2, 'url', '%2Bselection/service-injection/nested-button.component.ts'), null);
        this._appEl_469 = new import3.AppElement(469, 456, this, this._el_469);
        this.compView_469 = import14.viewFactory_CodeTabComponent0(this.viewUtils, this.injector(469), this._appEl_469);
        this._CodeTabComponent_469_4 = new import14.Wrapper_CodeTabComponent(this._TabSectionComponent_456_4.context, this.parentInjector.get(import38.Http), new import39.ElementRef(this._el_469));
        this._appEl_469.initComponent(this._CodeTabComponent_469_4.context, this.compView_469);
        this._text_470 = this.renderer.createText(null, '\n			', null);
        this.compView_469.create(this._CodeTabComponent_469_4.context, null);
        this._text_471 = this.renderer.createText(null, '\n		', null);
        this.compView_456.create(this._TabSectionComponent_456_4.context, null);
        this._text_472 = this.renderer.createText(this._el_416, '\n\n		', null);
        this._el_473 = import4.createRenderElement(this.renderer, this._el_416, 'p', import4.EMPTY_INLINE_ARRAY, null);
        this._text_474 = this.renderer.createText(this._el_473, '\n			Если компонент, которому необходимо получить доступ к ', null);
        this._el_475 = import4.createRenderElement(this.renderer, this._el_473, 'code', import4.EMPTY_INLINE_ARRAY, null);
        this._text_476 = this.renderer.createText(this._el_475, 'RtSelectionService', null);
        this._text_477 = this.renderer.createText(this._el_473, ', является родителем для ', null);
        this._el_478 = import4.createRenderElement(this.renderer, this._el_473, 'code', import4.EMPTY_INLINE_ARRAY, null);
        this._text_479 = this.renderer.createText(this._el_478, 'rtSelectionArea', null);
        this._text_480 = this.renderer.createText(this._el_473, ',\n			то вы можете получить ссылку на ', null);
        this._el_481 = import4.createRenderElement(this.renderer, this._el_473, 'code', import4.EMPTY_INLINE_ARRAY, null);
        this._text_482 = this.renderer.createText(this._el_481, 'rtSelectionArea', null);
        this._text_483 = this.renderer.createText(this._el_473, ' используя декоратор ', null);
        this._el_484 = import4.createRenderElement(this.renderer, this._el_473, 'a', new import4.InlineArray4(4, 'href', 'https://angular.io/docs/ts/latest/api/core/index/ViewChild-decorator.html', 'target', '_blank'), null);
        this._text_485 = this.renderer.createText(this._el_484, 'ViewChild', null);
        this._text_486 = this.renderer.createText(this._el_473, '			и использовать его public свойство selectionService для работы с selection.\n		', null);
        this._text_487 = this.renderer.createText(this._el_416, '\n		', null);
        this._el_488 = import4.createRenderElement(this.renderer, this._el_416, 'p', import4.EMPTY_INLINE_ARRAY, null);
        this._text_489 = this.renderer.createText(this._el_488, '\n			Пример ниже аналогичен предыдущему, но вместо кастомной нопки мы реализуем обработчик события прямо в компоненте и используем\n			', null);
        this._el_490 = import4.createRenderElement(this.renderer, this._el_488, 'code', import4.EMPTY_INLINE_ARRAY, null);
        this._text_491 = this.renderer.createText(this._el_490, 'rtSelectionArea', null);
        this._text_492 = this.renderer.createText(this._el_488, ' запрошенный при помощи декоратора ', null);
        this._el_493 = import4.createRenderElement(this.renderer, this._el_488, 'a', new import4.InlineArray4(4, 'href', 'https://angular.io/docs/ts/latest/api/core/index/ViewChild-decorator.html', 'target', '_blank'), null);
        this._text_494 = this.renderer.createText(this._el_493, 'ViewChild', null);
        this._text_495 = this.renderer.createText(this._el_488, '.\n		', null);
        this._text_496 = this.renderer.createText(this._el_416, '\n		', null);
        this._el_497 = import4.createRenderElement(this.renderer, this._el_416, 'rt-demo-tab-section', import4.EMPTY_INLINE_ARRAY, null);
        this._appEl_497 = new import3.AppElement(497, 416, this, this._el_497);
        this.compView_497 = import12.viewFactory_TabSectionComponent0(this.viewUtils, this.injector(497), this._appEl_497);
        this._TabSectionComponent_497_4 = new import12.Wrapper_TabSectionComponent();
        this._appEl_497.initComponent(this._TabSectionComponent_497_4.context, this.compView_497);
        this._text_498 = this.renderer.createText(null, '\n			', null);
        this._el_499 = import4.createRenderElement(this.renderer, null, 'rt-demo-sample-tab', import4.EMPTY_INLINE_ARRAY, null);
        this._appEl_499 = new import3.AppElement(499, 497, this, this._el_499);
        this.compView_499 = import16.viewFactory_SampleTabComponent0(this.viewUtils, this.injector(499), this._appEl_499);
        this._SampleTabComponent_499_4 = new import16.Wrapper_SampleTabComponent(this._TabSectionComponent_497_4.context);
        this._appEl_499.initComponent(this._SampleTabComponent_499_4.context, this.compView_499);
        this._text_500 = this.renderer.createText(null, '\n				', null);
        this._el_501 = import4.createRenderElement(this.renderer, null, 'rt-demo-service-view-child', import4.EMPTY_INLINE_ARRAY, null);
        this._appEl_501 = new import3.AppElement(501, 499, this, this._el_501);
        this.compView_501 = import31.viewFactory_ServiceViewChildComponent0(this.viewUtils, this.injector(501), this._appEl_501);
        this._ServiceViewChildComponent_501_4 = new import31.Wrapper_ServiceViewChildComponent(this.parentInjector.get(import40.CountriesService));
        this._appEl_501.initComponent(this._ServiceViewChildComponent_501_4.context, this.compView_501);
        this.compView_501.create(this._ServiceViewChildComponent_501_4.context, null);
        this._text_502 = this.renderer.createText(null, '\n			', null);
        this.compView_499.create(this._SampleTabComponent_499_4.context, null);
        this._text_503 = this.renderer.createText(null, '\n			', null);
        this._el_504 = import4.createRenderElement(this.renderer, null, 'rt-demo-code-tab', new import4.InlineArray2(2, 'url', '%2Bselection/service-view-child/service-view-child.component.html'), null);
        this._appEl_504 = new import3.AppElement(504, 497, this, this._el_504);
        this.compView_504 = import14.viewFactory_CodeTabComponent0(this.viewUtils, this.injector(504), this._appEl_504);
        this._CodeTabComponent_504_4 = new import14.Wrapper_CodeTabComponent(this._TabSectionComponent_497_4.context, this.parentInjector.get(import38.Http), new import39.ElementRef(this._el_504));
        this._appEl_504.initComponent(this._CodeTabComponent_504_4.context, this.compView_504);
        this._text_505 = this.renderer.createText(null, '\n			', null);
        this.compView_504.create(this._CodeTabComponent_504_4.context, null);
        this._text_506 = this.renderer.createText(null, '\n			', null);
        this._el_507 = import4.createRenderElement(this.renderer, null, 'rt-demo-code-tab', new import4.InlineArray2(2, 'url', '%2Bselection/service-view-child/service-view-child.component.ts'), null);
        this._appEl_507 = new import3.AppElement(507, 497, this, this._el_507);
        this.compView_507 = import14.viewFactory_CodeTabComponent0(this.viewUtils, this.injector(507), this._appEl_507);
        this._CodeTabComponent_507_4 = new import14.Wrapper_CodeTabComponent(this._TabSectionComponent_497_4.context, this.parentInjector.get(import38.Http), new import39.ElementRef(this._el_507));
        this._appEl_507.initComponent(this._CodeTabComponent_507_4.context, this.compView_507);
        this._text_508 = this.renderer.createText(null, '\n			', null);
        this.compView_507.create(this._CodeTabComponent_507_4.context, null);
        this._text_509 = this.renderer.createText(null, '\n		', null);
        this.compView_497.create(this._TabSectionComponent_497_4.context, null);
        this._text_510 = this.renderer.createText(this._el_416, '\n\n	', null);
        this._text_511 = this.renderer.createText(this._el_264, '\n	', null);
        this._el_512 = import4.createRenderElement(this.renderer, this._el_264, 'section', new import4.InlineArray2(2, 'id', 'additional-methods'), null);
        this._text_513 = this.renderer.createText(this._el_512, '\n		', null);
        this._el_514 = import4.createRenderElement(this.renderer, this._el_512, 'h4', import4.EMPTY_INLINE_ARRAY, null);
        this._text_515 = this.renderer.createText(this._el_514, '\n			Работа с ', null);
        this._el_516 = import4.createRenderElement(this.renderer, this._el_514, 'code', import4.EMPTY_INLINE_ARRAY, null);
        this._text_517 = this.renderer.createText(this._el_516, 'rtSelectionArea', null);
        this._text_518 = this.renderer.createText(this._el_514, ' прямо в шаблоне\n		', null);
        this._text_519 = this.renderer.createText(this._el_512, '\n		', null);
        this._el_520 = import4.createRenderElement(this.renderer, this._el_512, 'p', import4.EMPTY_INLINE_ARRAY, null);
        this._text_521 = this.renderer.createText(this._el_520, '\n			Вы можете создать в шаблоне переменную, ссылающуюся на ', null);
        this._el_522 = import4.createRenderElement(this.renderer, this._el_520, 'code', import4.EMPTY_INLINE_ARRAY, null);
        this._text_523 = this.renderer.createText(this._el_522, 'rtSelectionArea', null);
        this._text_524 = this.renderer.createText(this._el_520, ' и обращаться к нему из обработчиков\n			события.\n		', null);
        this._text_525 = this.renderer.createText(this._el_512, '\n		', null);
        this._el_526 = import4.createRenderElement(this.renderer, this._el_512, 'p', import4.EMPTY_INLINE_ARRAY, null);
        this._text_527 = this.renderer.createText(this._el_526, '\n			Ниже вы можете увидеть пример кнопок, использующих методы ', null);
        this._el_528 = import4.createRenderElement(this.renderer, this._el_526, 'code', import4.EMPTY_INLINE_ARRAY, null);
        this._text_529 = this.renderer.createText(this._el_528, 'selectionService.selectAll', null);
        this._text_530 = this.renderer.createText(this._el_526, ' и ', null);
        this._el_531 = import4.createRenderElement(this.renderer, this._el_526, 'code', import4.EMPTY_INLINE_ARRAY, null);
        this._text_532 = this.renderer.createText(this._el_531, 'selectionService.deselectAll', null);
        this._text_533 = this.renderer.createText(this._el_526, '.\n		', null);
        this._text_534 = this.renderer.createText(this._el_512, '\n		', null);
        this._el_535 = import4.createRenderElement(this.renderer, this._el_512, 'aside', import4.EMPTY_INLINE_ARRAY, null);
        this._text_536 = this.renderer.createText(this._el_535, '\n			', null);
        this._el_537 = import4.createRenderElement(this.renderer, this._el_535, 'p', import4.EMPTY_INLINE_ARRAY, null);
        this._text_538 = this.renderer.createText(this._el_537, '\n				Методы ', null);
        this._el_539 = import4.createRenderElement(this.renderer, this._el_537, 'code', import4.EMPTY_INLINE_ARRAY, null);
        this._text_540 = this.renderer.createText(this._el_539, 'selectionService.selectAll', null);
        this._text_541 = this.renderer.createText(this._el_537, ' и ', null);
        this._el_542 = import4.createRenderElement(this.renderer, this._el_537, 'code', import4.EMPTY_INLINE_ARRAY, null);
        this._text_543 = this.renderer.createText(this._el_542, 'selectionService.deselectAll', null);
        this._text_544 = this.renderer.createText(this._el_537, ' перегружены в библиотеке ', null);
        this._el_545 = import4.createRenderElement(this.renderer, this._el_537, 'code', import4.EMPTY_INLINE_ARRAY, null);
        this._text_546 = this.renderer.createText(this._el_545, 'right-angled', null);
        this._text_547 = this.renderer.createText(this._el_537, '				и позволяют выполнять рекурсивный selection. В остальном контракт совпадает с ', null);
        this._el_548 = import4.createRenderElement(this.renderer, this._el_537, 'a', new import4.InlineArray4(4, 'href', 'https://fshchudlo.github.io/e2e4/interfaces/selectionservice.html', 'target', '_blank'), null);
        this._text_549 = this.renderer.createText(this._el_548, 'SelectionService', null);
        this._text_550 = this.renderer.createText(this._el_537, '				библиотеки ', null);
        this._el_551 = import4.createRenderElement(this.renderer, this._el_537, 'a', new import4.InlineArray4(4, 'href', 'https://fshchudlo.github.io/e2e4', 'target', '_blank'), null);
        this._text_552 = this.renderer.createText(this._el_551, 'e2e4', null);
        this._text_553 = this.renderer.createText(this._el_537, '.\n			', null);
        this._text_554 = this.renderer.createText(this._el_535, '\n		', null);
        this._text_555 = this.renderer.createText(this._el_512, '\n		', null);
        this._el_556 = import4.createRenderElement(this.renderer, this._el_512, 'rt-demo-tab-section', import4.EMPTY_INLINE_ARRAY, null);
        this._appEl_556 = new import3.AppElement(556, 512, this, this._el_556);
        this.compView_556 = import12.viewFactory_TabSectionComponent0(this.viewUtils, this.injector(556), this._appEl_556);
        this._TabSectionComponent_556_4 = new import12.Wrapper_TabSectionComponent();
        this._appEl_556.initComponent(this._TabSectionComponent_556_4.context, this.compView_556);
        this._text_557 = this.renderer.createText(null, '\n			', null);
        this._el_558 = import4.createRenderElement(this.renderer, null, 'rt-demo-sample-tab', import4.EMPTY_INLINE_ARRAY, null);
        this._appEl_558 = new import3.AppElement(558, 556, this, this._el_558);
        this.compView_558 = import16.viewFactory_SampleTabComponent0(this.viewUtils, this.injector(558), this._appEl_558);
        this._SampleTabComponent_558_4 = new import16.Wrapper_SampleTabComponent(this._TabSectionComponent_556_4.context);
        this._appEl_558.initComponent(this._SampleTabComponent_558_4.context, this.compView_558);
        this._text_559 = this.renderer.createText(null, '\n				', null);
        this._el_560 = import4.createRenderElement(this.renderer, null, 'rt-demo-select-all', import4.EMPTY_INLINE_ARRAY, null);
        this._appEl_560 = new import3.AppElement(560, 558, this, this._el_560);
        this.compView_560 = import33.viewFactory_SelectAllComponent0(this.viewUtils, this.injector(560), this._appEl_560);
        this._SelectAllComponent_560_4 = new import33.Wrapper_SelectAllComponent(this.parentInjector.get(import40.CountriesService));
        this._appEl_560.initComponent(this._SelectAllComponent_560_4.context, this.compView_560);
        this.compView_560.create(this._SelectAllComponent_560_4.context, null);
        this._text_561 = this.renderer.createText(null, '\n			', null);
        this.compView_558.create(this._SampleTabComponent_558_4.context, null);
        this._text_562 = this.renderer.createText(null, '\n			', null);
        this._el_563 = import4.createRenderElement(this.renderer, null, 'rt-demo-code-tab', new import4.InlineArray2(2, 'url', '%2Bselection/select-all/select-all.component.html'), null);
        this._appEl_563 = new import3.AppElement(563, 556, this, this._el_563);
        this.compView_563 = import14.viewFactory_CodeTabComponent0(this.viewUtils, this.injector(563), this._appEl_563);
        this._CodeTabComponent_563_4 = new import14.Wrapper_CodeTabComponent(this._TabSectionComponent_556_4.context, this.parentInjector.get(import38.Http), new import39.ElementRef(this._el_563));
        this._appEl_563.initComponent(this._CodeTabComponent_563_4.context, this.compView_563);
        this._text_564 = this.renderer.createText(null, '\n			', null);
        this.compView_563.create(this._CodeTabComponent_563_4.context, null);
        this._text_565 = this.renderer.createText(null, '\n			', null);
        this._el_566 = import4.createRenderElement(this.renderer, null, 'rt-demo-code-tab', new import4.InlineArray2(2, 'url', '%2Bselection/select-all/select-all.component.ts'), null);
        this._appEl_566 = new import3.AppElement(566, 556, this, this._el_566);
        this.compView_566 = import14.viewFactory_CodeTabComponent0(this.viewUtils, this.injector(566), this._appEl_566);
        this._CodeTabComponent_566_4 = new import14.Wrapper_CodeTabComponent(this._TabSectionComponent_556_4.context, this.parentInjector.get(import38.Http), new import39.ElementRef(this._el_566));
        this._appEl_566.initComponent(this._CodeTabComponent_566_4.context, this.compView_566);
        this._text_567 = this.renderer.createText(null, '\n			', null);
        this.compView_566.create(this._CodeTabComponent_566_4.context, null);
        this._text_568 = this.renderer.createText(null, '\n\n		', null);
        this.compView_556.create(this._TabSectionComponent_556_4.context, null);
        this._text_569 = this.renderer.createText(this._el_512, '\n\n	', null);
        this._text_570 = this.renderer.createText(this._el_264, '\n', null);
        this._text_571 = this.renderer.createText(parentRenderNode, '\n\n', null);
        this._el_572 = import4.createRenderElement(this.renderer, parentRenderNode, 'section', new import4.InlineArray2(2, 'id', 'additional-directives-checkboxes'), null);
        this._text_573 = this.renderer.createText(this._el_572, '\n	', null);
        this._el_574 = import4.createRenderElement(this.renderer, this._el_572, 'h3', import4.EMPTY_INLINE_ARRAY, null);
        this._text_575 = this.renderer.createText(this._el_574, 'Директива ', null);
        this._el_576 = import4.createRenderElement(this.renderer, this._el_574, 'code', import4.EMPTY_INLINE_ARRAY, null);
        this._text_577 = this.renderer.createText(this._el_576, 'rtSelectionCheckboxFor', null);
        this._text_578 = this.renderer.createText(this._el_572, '\n	', null);
        this._el_579 = import4.createRenderElement(this.renderer, this._el_572, 'p', import4.EMPTY_INLINE_ARRAY, null);
        this._text_580 = this.renderer.createText(this._el_579, '\n		Данная директива будет полезна в том случае, если вам нужно реализовать модель выбора при помощи checkbox-ов вместо клика\n		по элементам.\n	', null);
        this._text_581 = this.renderer.createText(this._el_572, '\n	', null);
        this._el_582 = import4.createRenderElement(this.renderer, this._el_572, 'rt-demo-tab-section', import4.EMPTY_INLINE_ARRAY, null);
        this._appEl_582 = new import3.AppElement(582, 572, this, this._el_582);
        this.compView_582 = import12.viewFactory_TabSectionComponent0(this.viewUtils, this.injector(582), this._appEl_582);
        this._TabSectionComponent_582_4 = new import12.Wrapper_TabSectionComponent();
        this._appEl_582.initComponent(this._TabSectionComponent_582_4.context, this.compView_582);
        this._text_583 = this.renderer.createText(null, '\n		', null);
        this._el_584 = import4.createRenderElement(this.renderer, null, 'rt-demo-sample-tab', import4.EMPTY_INLINE_ARRAY, null);
        this._appEl_584 = new import3.AppElement(584, 582, this, this._el_584);
        this.compView_584 = import16.viewFactory_SampleTabComponent0(this.viewUtils, this.injector(584), this._appEl_584);
        this._SampleTabComponent_584_4 = new import16.Wrapper_SampleTabComponent(this._TabSectionComponent_582_4.context);
        this._appEl_584.initComponent(this._SampleTabComponent_584_4.context, this.compView_584);
        this._text_585 = this.renderer.createText(null, '\n			', null);
        this._el_586 = import4.createRenderElement(this.renderer, null, 'rt-demo-selection-checkbox', import4.EMPTY_INLINE_ARRAY, null);
        this._appEl_586 = new import3.AppElement(586, 584, this, this._el_586);
        this.compView_586 = import35.viewFactory_SelectionCheckboxComponent0(this.viewUtils, this.injector(586), this._appEl_586);
        this._SelectionCheckboxComponent_586_4 = new import35.Wrapper_SelectionCheckboxComponent(this.parentInjector.get(import40.CountriesService));
        this._appEl_586.initComponent(this._SelectionCheckboxComponent_586_4.context, this.compView_586);
        this.compView_586.create(this._SelectionCheckboxComponent_586_4.context, null);
        this._text_587 = this.renderer.createText(null, '\n		', null);
        this.compView_584.create(this._SampleTabComponent_584_4.context, null);
        this._text_588 = this.renderer.createText(null, '\n		', null);
        this._el_589 = import4.createRenderElement(this.renderer, null, 'rt-demo-code-tab', new import4.InlineArray2(2, 'url', '%2Bselection/selection-checkbox/selection-checkbox.component.html'), null);
        this._appEl_589 = new import3.AppElement(589, 582, this, this._el_589);
        this.compView_589 = import14.viewFactory_CodeTabComponent0(this.viewUtils, this.injector(589), this._appEl_589);
        this._CodeTabComponent_589_4 = new import14.Wrapper_CodeTabComponent(this._TabSectionComponent_582_4.context, this.parentInjector.get(import38.Http), new import39.ElementRef(this._el_589));
        this._appEl_589.initComponent(this._CodeTabComponent_589_4.context, this.compView_589);
        this._text_590 = this.renderer.createText(null, '\n		', null);
        this.compView_589.create(this._CodeTabComponent_589_4.context, null);
        this._text_591 = this.renderer.createText(null, '\n		', null);
        this._el_592 = import4.createRenderElement(this.renderer, null, 'rt-demo-code-tab', new import4.InlineArray2(2, 'url', '%2Bselection/selection-checkbox/selection-checkbox.component.ts'), null);
        this._appEl_592 = new import3.AppElement(592, 582, this, this._el_592);
        this.compView_592 = import14.viewFactory_CodeTabComponent0(this.viewUtils, this.injector(592), this._appEl_592);
        this._CodeTabComponent_592_4 = new import14.Wrapper_CodeTabComponent(this._TabSectionComponent_582_4.context, this.parentInjector.get(import38.Http), new import39.ElementRef(this._el_592));
        this._appEl_592.initComponent(this._CodeTabComponent_592_4.context, this.compView_592);
        this._text_593 = this.renderer.createText(null, '\n		', null);
        this.compView_592.create(this._CodeTabComponent_592_4.context, null);
        this._text_594 = this.renderer.createText(null, '\n	', null);
        this.compView_582.create(this._TabSectionComponent_582_4.context, null);
        this._text_595 = this.renderer.createText(this._el_572, '\n', null);
        this._text_596 = this.renderer.createText(parentRenderNode, '\n', null);
        this._el_597 = import4.createRenderElement(this.renderer, parentRenderNode, 'section', new import4.InlineArray2(2, 'id', 'additional-settings-trackBy'), null);
        this._text_598 = this.renderer.createText(this._el_597, '\n	', null);
        this._el_599 = import4.createRenderElement(this.renderer, this._el_597, 'h3', import4.EMPTY_INLINE_ARRAY, null);
        this._el_600 = import4.createRenderElement(this.renderer, this._el_599, 'code', import4.EMPTY_INLINE_ARRAY, null);
        this._text_601 = this.renderer.createText(this._el_600, 'trackBy', null);
        this._text_602 = this.renderer.createText(this._el_599, ' function', null);
        this._text_603 = this.renderer.createText(this._el_597, '\n	', null);
        this._el_604 = import4.createRenderElement(this.renderer, this._el_597, 'p', import4.EMPTY_INLINE_ARRAY, null);
        this._text_605 = this.renderer.createText(this._el_604, '\n		Вдохновением для данной опции послужила одноименная опция у ', null);
        this._el_606 = import4.createRenderElement(this.renderer, this._el_604, 'code', import4.EMPTY_INLINE_ARRAY, null);
        this._text_607 = this.renderer.createText(this._el_606, 'angular', null);
        this._text_608 = this.renderer.createText(this._el_604, ' директивы ', null);
        this._el_609 = import4.createRenderElement(this.renderer, this._el_604, 'a', new import4.InlineArray4(4, 'href', 'https://angular.io/docs/ts/latest/guide/template-syntax.html#!#ngFor', 'targe', '_blank'), null);
        this._text_610 = this.renderer.createText(this._el_609, 'ngFor', null);
        this._text_611 = this.renderer.createText(this._el_604, '.\n	', null);
        this._text_612 = this.renderer.createText(this._el_597, '\n	', null);
        this._el_613 = import4.createRenderElement(this.renderer, this._el_597, 'p', import4.EMPTY_INLINE_ARRAY, null);
        this._text_614 = this.renderer.createText(this._el_613, '\n		Суть заключается в том, что при обновлении данных выполняется повторная проверка selection. Например, при обновлении списка,\n		в большинстве случаев с сервера будут возвращены те же самые данные.\n\n	', null);
        this._text_615 = this.renderer.createText(this._el_597, '\n	', null);
        this._el_616 = import4.createRenderElement(this.renderer, this._el_597, 'p', import4.EMPTY_INLINE_ARRAY, null);
        this._text_617 = this.renderer.createText(this._el_616, '\n		Но, поскольку объекты будут сконструированы новые, то проверка при помощи reference equals, которая выполняется по умолчанию,\n		не сможет восстановить selection.\n	', null);
        this._text_618 = this.renderer.createText(this._el_597, '\n	', null);
        this._el_619 = import4.createRenderElement(this.renderer, this._el_597, 'p', import4.EMPTY_INLINE_ARRAY, null);
        this._text_620 = this.renderer.createText(this._el_619, '\n		Если у вас имеется способ идентифицировать ваши объекты (например, уникальное свойство id), то вы можете указать свою реализацию\n		функции ', null);
        this._el_621 = import4.createRenderElement(this.renderer, this._el_619, 'code', import4.EMPTY_INLINE_ARRAY, null);
        this._text_622 = this.renderer.createText(this._el_621, 'trackBy', null);
        this._text_623 = this.renderer.createText(this._el_619, ', которая будет использоваться для восстановления selection.\n	', null);
        this._text_624 = this.renderer.createText(this._el_597, '\n	', null);
        this._el_625 = import4.createRenderElement(this.renderer, this._el_597, 'p', import4.EMPTY_INLINE_ARRAY, null);
        this._text_626 = this.renderer.createText(this._el_625, '\n		В примере ниже мы используем реализацию ', null);
        this._el_627 = import4.createRenderElement(this.renderer, this._el_625, 'code', import4.EMPTY_INLINE_ARRAY, null);
        this._text_628 = this.renderer.createText(this._el_627, 'trackBy', null);
        this._text_629 = this.renderer.createText(this._el_625, ', которая возвращает название региона. Таким образом, пре перезагрузке\n		данных selection сохраняется.\n	', null);
        this._text_630 = this.renderer.createText(this._el_597, '\n	', null);
        this._el_631 = import4.createRenderElement(this.renderer, this._el_597, 'rt-demo-tab-section', import4.EMPTY_INLINE_ARRAY, null);
        this._appEl_631 = new import3.AppElement(631, 597, this, this._el_631);
        this.compView_631 = import12.viewFactory_TabSectionComponent0(this.viewUtils, this.injector(631), this._appEl_631);
        this._TabSectionComponent_631_4 = new import12.Wrapper_TabSectionComponent();
        this._appEl_631.initComponent(this._TabSectionComponent_631_4.context, this.compView_631);
        this._text_632 = this.renderer.createText(null, '\n		', null);
        this._el_633 = import4.createRenderElement(this.renderer, null, 'rt-demo-sample-tab', import4.EMPTY_INLINE_ARRAY, null);
        this._appEl_633 = new import3.AppElement(633, 631, this, this._el_633);
        this.compView_633 = import16.viewFactory_SampleTabComponent0(this.viewUtils, this.injector(633), this._appEl_633);
        this._SampleTabComponent_633_4 = new import16.Wrapper_SampleTabComponent(this._TabSectionComponent_631_4.context);
        this._appEl_633.initComponent(this._SampleTabComponent_633_4.context, this.compView_633);
        this._text_634 = this.renderer.createText(null, '\n			', null);
        this._el_635 = import4.createRenderElement(this.renderer, null, 'rt-demo-custom-track-by', import4.EMPTY_INLINE_ARRAY, null);
        this._appEl_635 = new import3.AppElement(635, 633, this, this._el_635);
        this.compView_635 = import37.viewFactory_CustomTrackByComponent0(this.viewUtils, this.injector(635), this._appEl_635);
        this._CustomTrackByComponent_635_4 = new import37.Wrapper_CustomTrackByComponent(this.parentInjector.get(import40.CountriesService));
        this._appEl_635.initComponent(this._CustomTrackByComponent_635_4.context, this.compView_635);
        this.compView_635.create(this._CustomTrackByComponent_635_4.context, null);
        this._text_636 = this.renderer.createText(null, '\n		', null);
        this.compView_633.create(this._SampleTabComponent_633_4.context, null);
        this._text_637 = this.renderer.createText(null, '\n		', null);
        this._el_638 = import4.createRenderElement(this.renderer, null, 'rt-demo-code-tab', new import4.InlineArray2(2, 'url', '%2Bselection/custom-track-by/custom-track-by.component.html'), null);
        this._appEl_638 = new import3.AppElement(638, 631, this, this._el_638);
        this.compView_638 = import14.viewFactory_CodeTabComponent0(this.viewUtils, this.injector(638), this._appEl_638);
        this._CodeTabComponent_638_4 = new import14.Wrapper_CodeTabComponent(this._TabSectionComponent_631_4.context, this.parentInjector.get(import38.Http), new import39.ElementRef(this._el_638));
        this._appEl_638.initComponent(this._CodeTabComponent_638_4.context, this.compView_638);
        this._text_639 = this.renderer.createText(null, '\n		', null);
        this.compView_638.create(this._CodeTabComponent_638_4.context, null);
        this._text_640 = this.renderer.createText(null, '\n		', null);
        this._el_641 = import4.createRenderElement(this.renderer, null, 'rt-demo-code-tab', new import4.InlineArray2(2, 'url', '%2Bselection/custom-track-by/custom-track-by.component.ts'), null);
        this._appEl_641 = new import3.AppElement(641, 631, this, this._el_641);
        this.compView_641 = import14.viewFactory_CodeTabComponent0(this.viewUtils, this.injector(641), this._appEl_641);
        this._CodeTabComponent_641_4 = new import14.Wrapper_CodeTabComponent(this._TabSectionComponent_631_4.context, this.parentInjector.get(import38.Http), new import39.ElementRef(this._el_641));
        this._appEl_641.initComponent(this._CodeTabComponent_641_4.context, this.compView_641);
        this._text_642 = this.renderer.createText(null, '\n		', null);
        this.compView_641.create(this._CodeTabComponent_641_4.context, null);
        this._text_643 = this.renderer.createText(null, '\n	', null);
        this.compView_631.create(this._TabSectionComponent_631_4.context, null);
        this._text_644 = this.renderer.createText(this._el_597, '\n', null);
        this._text_645 = this.renderer.createText(parentRenderNode, '\n', null);
        this._el_646 = import4.createRenderElement(this.renderer, parentRenderNode, 'section', new import4.InlineArray2(2, 'id', 'prevent-stop-events'), null);
        this._text_647 = this.renderer.createText(this._el_646, '\n	', null);
        this._el_648 = import4.createRenderElement(this.renderer, this._el_646, 'h3', import4.EMPTY_INLINE_ARRAY, null);
        this._text_649 = this.renderer.createText(this._el_648, 'preventEventsDefaults и stopEventsPropagation', null);
        this._text_650 = this.renderer.createText(this._el_646, '\n	', null);
        this._el_651 = import4.createRenderElement(this.renderer, this._el_646, 'p', import4.EMPTY_INLINE_ARRAY, null);
        this._text_652 = this.renderer.createText(this._el_651, '\n		Еще два рубильника, которые вам вряд ли понадобятся, но, если уж понадобятся, то очень.\n	', null);
        this._text_653 = this.renderer.createText(this._el_646, '\n	', null);
        this._el_654 = import4.createRenderElement(this.renderer, this._el_646, 'p', import4.EMPTY_INLINE_ARRAY, null);
        this._text_655 = this.renderer.createText(this._el_654, '\n		Смысл заключается в том, что selection при успешной обработке события мыши или клавиатуры, вызывает методы ', null);
        this._el_656 = import4.createRenderElement(this.renderer, this._el_654, 'a', new import4.InlineArray4(4, 'href', 'https://developer.mozilla.org/ru/docs/Web/API/Event/stopPropagation', 'target', '_blank'), null);
        this._text_657 = this.renderer.createText(this._el_656, 'stopPropagation', null);
        this._text_658 = this.renderer.createText(this._el_654, ' и ', null);
        this._el_659 = import4.createRenderElement(this.renderer, this._el_654, 'a', new import4.InlineArray4(4, 'href', 'https://developer.mozilla.org/ru/docs/Web/API/Event/preventDefault', 'target', '_blank'), null);
        this._text_660 = this.renderer.createText(this._el_659, 'preventDefault', null);
        this._text_661 = this.renderer.createText(this._el_654, '.\n		Это нужно, к примеру, чтобы при нажатии ', null);
        this._el_662 = import4.createRenderElement(this.renderer, this._el_654, 'code', import4.EMPTY_INLINE_ARRAY, null);
        this._text_663 = this.renderer.createText(this._el_662, 'Ctrl + A', null);
        this._text_664 = this.renderer.createText(this._el_654, ' не выбирался весь текст на странице. При нажатии на ', null);
        this._el_665 = import4.createRenderElement(this.renderer, this._el_654, 'code', import4.EMPTY_INLINE_ARRAY, null);
        this._text_666 = this.renderer.createText(this._el_665, '↑', null);
        this._text_667 = this.renderer.createText(this._el_654, '		и ', null);
        this._el_668 = import4.createRenderElement(this.renderer, this._el_654, 'code', import4.EMPTY_INLINE_ARRAY, null);
        this._text_669 = this.renderer.createText(this._el_668, '→', null);
        this._text_670 = this.renderer.createText(this._el_654, ' не прокручивалась вся страница и т.д.\n	', null);
        this._text_671 = this.renderer.createText(this._el_646, '\n	', null);
        this._el_672 = import4.createRenderElement(this.renderer, this._el_646, 'p', import4.EMPTY_INLINE_ARRAY, null);
        this._text_673 = this.renderer.createText(this._el_672, '\n		Но если такое поведение стало для вас проблемой, вы можете отключить его.\n	', null);
        this._text_674 = this.renderer.createText(this._el_646, '\n', null);
        var disposable_0 = import4.subscribeToRenderElement(this, this._el_307, new import4.InlineArray2(2, 'click', null), this.eventHandler(this.handleEvent_307));
        this.init(null, [
            this._el_0,
            this._text_1,
            this._text_2,
            this._el_3,
            this._text_4,
            this._el_5,
            this._text_6,
            this._text_7,
            this._el_8,
            this._text_9,
            this._el_10,
            this._el_11,
            this._text_12,
            this._text_13,
            this._el_14,
            this._el_15,
            this._text_16,
            this._text_17,
            this._el_18,
            this._el_19,
            this._text_20,
            this._text_21,
            this._el_22,
            this._el_23,
            this._text_24,
            this._text_25,
            this._el_26,
            this._el_27,
            this._text_28,
            this._text_29,
            this._el_30,
            this._text_31,
            this._el_32,
            this._el_33,
            this._text_34,
            this._text_35,
            this._el_36,
            this._el_37,
            this._text_38,
            this._text_39,
            this._el_40,
            this._el_41,
            this._text_42,
            this._el_43,
            this._text_44,
            this._text_45,
            this._el_46,
            this._el_47,
            this._text_48,
            this._el_49,
            this._text_50,
            this._text_51,
            this._text_52,
            this._text_53,
            this._text_54,
            this._el_55,
            this._el_56,
            this._text_57,
            this._el_58,
            this._text_59,
            this._text_60,
            this._el_61,
            this._el_62,
            this._el_63,
            this._text_64,
            this._text_65,
            this._text_66,
            this._el_67,
            this._el_68,
            this._text_69,
            this._el_70,
            this._text_71,
            this._text_72,
            this._el_73,
            this._text_74,
            this._text_75,
            this._text_76,
            this._text_77,
            this._el_78,
            this._text_79,
            this._el_80,
            this._text_81,
            this._text_82,
            this._el_83,
            this._text_84,
            this._text_85,
            this._text_86,
            this._el_87,
            this._text_88,
            this._el_89,
            this._text_90,
            this._text_91,
            this._el_92,
            this._text_93,
            this._el_94,
            this._text_95,
            this._text_96,
            this._el_97,
            this._text_98,
            this._text_99,
            this._el_100,
            this._text_101,
            this._text_102,
            this._el_103,
            this._text_104,
            this._text_105,
            this._text_106,
            this._el_107,
            this._text_108,
            this._el_109,
            this._text_110,
            this._text_111,
            this._text_112,
            this._text_113,
            this._el_114,
            this._text_115,
            this._el_116,
            this._text_117,
            this._text_118,
            this._el_119,
            this._text_120,
            this._el_121,
            this._text_122,
            this._text_123,
            this._el_124,
            this._text_125,
            this._text_126,
            this._text_127,
            this._el_128,
            this._text_129,
            this._el_130,
            this._text_131,
            this._text_132,
            this._el_133,
            this._text_134,
            this._el_135,
            this._text_136,
            this._text_137,
            this._text_138,
            this._el_139,
            this._text_140,
            this._el_141,
            this._text_142,
            this._text_143,
            this._text_144,
            this._el_145,
            this._text_146,
            this._el_147,
            this._text_148,
            this._text_149,
            this._text_150,
            this._el_151,
            this._text_152,
            this._el_153,
            this._text_154,
            this._text_155,
            this._text_156,
            this._el_157,
            this._text_158,
            this._el_159,
            this._text_160,
            this._text_161,
            this._text_162,
            this._el_163,
            this._text_164,
            this._el_165,
            this._text_166,
            this._text_167,
            this._text_168,
            this._el_169,
            this._text_170,
            this._el_171,
            this._text_172,
            this._text_173,
            this._text_174,
            this._el_175,
            this._text_176,
            this._el_177,
            this._text_178,
            this._text_179,
            this._el_180,
            this._text_181,
            this._text_182,
            this._text_183,
            this._text_184,
            this._el_185,
            this._text_186,
            this._el_187,
            this._text_188,
            this._el_189,
            this._text_190,
            this._text_191,
            this._el_192,
            this._text_193,
            this._text_194,
            this._el_195,
            this._text_196,
            this._text_197,
            this._text_198,
            this._text_199,
            this._el_200,
            this._text_201,
            this._el_202,
            this._text_203,
            this._text_204,
            this._el_205,
            this._text_206,
            this._el_207,
            this._text_208,
            this._text_209,
            this._el_210,
            this._text_211,
            this._text_212,
            this._text_213,
            this._el_214,
            this._text_215,
            this._el_216,
            this._el_217,
            this._text_218,
            this._text_219,
            this._el_220,
            this._text_221,
            this._text_222,
            this._text_223,
            this._el_224,
            this._el_225,
            this._text_226,
            this._text_227,
            this._el_228,
            this._text_229,
            this._text_230,
            this._text_231,
            this._el_232,
            this._el_233,
            this._text_234,
            this._text_235,
            this._el_236,
            this._text_237,
            this._text_238,
            this._text_239,
            this._el_240,
            this._el_241,
            this._text_242,
            this._text_243,
            this._el_244,
            this._text_245,
            this._text_246,
            this._text_247,
            this._text_248,
            this._el_249,
            this._text_250,
            this._el_251,
            this._text_252,
            this._el_253,
            this._text_254,
            this._text_255,
            this._el_256,
            this._text_257,
            this._text_258,
            this._el_259,
            this._text_260,
            this._text_261,
            this._text_262,
            this._text_263,
            this._el_264,
            this._text_265,
            this._el_266,
            this._text_267,
            this._text_268,
            this._el_269,
            this._text_270,
            this._text_271,
            this._el_272,
            this._text_273,
            this._el_274,
            this._text_275,
            this._text_276,
            this._el_277,
            this._text_278,
            this._el_279,
            this._text_280,
            this._text_281,
            this._el_282,
            this._text_283,
            this._text_284,
            this._el_285,
            this._text_286,
            this._text_287,
            this._text_288,
            this._el_289,
            this._text_290,
            this._el_291,
            this._text_292,
            this._el_293,
            this._text_294,
            this._text_295,
            this._el_296,
            this._text_297,
            this._text_298,
            this._el_299,
            this._text_300,
            this._text_301,
            this._text_302,
            this._el_303,
            this._text_304,
            this._el_305,
            this._text_306,
            this._el_307,
            this._text_308,
            this._text_309,
            this._el_310,
            this._text_311,
            this._text_312,
            this._el_313,
            this._text_314,
            this._text_315,
            this._el_316,
            this._text_317,
            this._text_318,
            this._el_319,
            this._text_320,
            this._text_321,
            this._text_322,
            this._text_323,
            this._el_324,
            this._text_325,
            this._el_326,
            this._text_327,
            this._text_328,
            this._text_329,
            this._el_330,
            this._text_331,
            this._el_332,
            this._text_333,
            this._el_334,
            this._text_335,
            this._text_336,
            this._el_337,
            this._text_338,
            this._text_339,
            this._el_340,
            this._text_341,
            this._text_342,
            this._text_343,
            this._text_344,
            this._el_345,
            this._text_346,
            this._el_347,
            this._text_348,
            this._text_349,
            this._el_350,
            this._text_351,
            this._text_352,
            this._el_353,
            this._text_354,
            this._el_355,
            this._text_356,
            this._text_357,
            this._el_358,
            this._text_359,
            this._text_360,
            this._el_361,
            this._text_362,
            this._text_363,
            this._el_364,
            this._text_365,
            this._text_366,
            this._el_367,
            this._text_368,
            this._text_369,
            this._text_370,
            this._el_371,
            this._text_372,
            this._el_373,
            this._text_374,
            this._text_375,
            this._el_376,
            this._text_377,
            this._text_378,
            this._el_379,
            this._text_380,
            this._text_381,
            this._text_382,
            this._el_383,
            this._text_384,
            this._el_385,
            this._text_386,
            this._text_387,
            this._el_388,
            this._text_389,
            this._text_390,
            this._el_391,
            this._text_392,
            this._text_393,
            this._el_394,
            this._text_395,
            this._text_396,
            this._text_397,
            this._el_398,
            this._text_399,
            this._el_400,
            this._text_401,
            this._el_402,
            this._text_403,
            this._text_404,
            this._el_405,
            this._text_406,
            this._text_407,
            this._el_408,
            this._text_409,
            this._text_410,
            this._el_411,
            this._text_412,
            this._text_413,
            this._text_414,
            this._text_415,
            this._el_416,
            this._text_417,
            this._el_418,
            this._text_419,
            this._el_420,
            this._text_421,
            this._text_422,
            this._el_423,
            this._text_424,
            this._el_425,
            this._text_426,
            this._text_427,
            this._text_428,
            this._el_429,
            this._text_430,
            this._el_431,
            this._text_432,
            this._text_433,
            this._el_434,
            this._text_435,
            this._text_436,
            this._el_437,
            this._text_438,
            this._text_439,
            this._el_440,
            this._text_441,
            this._text_442,
            this._el_443,
            this._text_444,
            this._text_445,
            this._text_446,
            this._el_447,
            this._text_448,
            this._el_449,
            this._text_450,
            this._text_451,
            this._el_452,
            this._text_453,
            this._text_454,
            this._text_455,
            this._el_456,
            this._text_457,
            this._el_458,
            this._text_459,
            this._el_460,
            this._text_461,
            this._text_462,
            this._el_463,
            this._text_464,
            this._text_465,
            this._el_466,
            this._text_467,
            this._text_468,
            this._el_469,
            this._text_470,
            this._text_471,
            this._text_472,
            this._el_473,
            this._text_474,
            this._el_475,
            this._text_476,
            this._text_477,
            this._el_478,
            this._text_479,
            this._text_480,
            this._el_481,
            this._text_482,
            this._text_483,
            this._el_484,
            this._text_485,
            this._text_486,
            this._text_487,
            this._el_488,
            this._text_489,
            this._el_490,
            this._text_491,
            this._text_492,
            this._el_493,
            this._text_494,
            this._text_495,
            this._text_496,
            this._el_497,
            this._text_498,
            this._el_499,
            this._text_500,
            this._el_501,
            this._text_502,
            this._text_503,
            this._el_504,
            this._text_505,
            this._text_506,
            this._el_507,
            this._text_508,
            this._text_509,
            this._text_510,
            this._text_511,
            this._el_512,
            this._text_513,
            this._el_514,
            this._text_515,
            this._el_516,
            this._text_517,
            this._text_518,
            this._text_519,
            this._el_520,
            this._text_521,
            this._el_522,
            this._text_523,
            this._text_524,
            this._text_525,
            this._el_526,
            this._text_527,
            this._el_528,
            this._text_529,
            this._text_530,
            this._el_531,
            this._text_532,
            this._text_533,
            this._text_534,
            this._el_535,
            this._text_536,
            this._el_537,
            this._text_538,
            this._el_539,
            this._text_540,
            this._text_541,
            this._el_542,
            this._text_543,
            this._text_544,
            this._el_545,
            this._text_546,
            this._text_547,
            this._el_548,
            this._text_549,
            this._text_550,
            this._el_551,
            this._text_552,
            this._text_553,
            this._text_554,
            this._text_555,
            this._el_556,
            this._text_557,
            this._el_558,
            this._text_559,
            this._el_560,
            this._text_561,
            this._text_562,
            this._el_563,
            this._text_564,
            this._text_565,
            this._el_566,
            this._text_567,
            this._text_568,
            this._text_569,
            this._text_570,
            this._text_571,
            this._el_572,
            this._text_573,
            this._el_574,
            this._text_575,
            this._el_576,
            this._text_577,
            this._text_578,
            this._el_579,
            this._text_580,
            this._text_581,
            this._el_582,
            this._text_583,
            this._el_584,
            this._text_585,
            this._el_586,
            this._text_587,
            this._text_588,
            this._el_589,
            this._text_590,
            this._text_591,
            this._el_592,
            this._text_593,
            this._text_594,
            this._text_595,
            this._text_596,
            this._el_597,
            this._text_598,
            this._el_599,
            this._el_600,
            this._text_601,
            this._text_602,
            this._text_603,
            this._el_604,
            this._text_605,
            this._el_606,
            this._text_607,
            this._text_608,
            this._el_609,
            this._text_610,
            this._text_611,
            this._text_612,
            this._el_613,
            this._text_614,
            this._text_615,
            this._el_616,
            this._text_617,
            this._text_618,
            this._el_619,
            this._text_620,
            this._el_621,
            this._text_622,
            this._text_623,
            this._text_624,
            this._el_625,
            this._text_626,
            this._el_627,
            this._text_628,
            this._text_629,
            this._text_630,
            this._el_631,
            this._text_632,
            this._el_633,
            this._text_634,
            this._el_635,
            this._text_636,
            this._text_637,
            this._el_638,
            this._text_639,
            this._text_640,
            this._el_641,
            this._text_642,
            this._text_643,
            this._text_644,
            this._text_645,
            this._el_646,
            this._text_647,
            this._el_648,
            this._text_649,
            this._text_650,
            this._el_651,
            this._text_652,
            this._text_653,
            this._el_654,
            this._text_655,
            this._el_656,
            this._text_657,
            this._text_658,
            this._el_659,
            this._text_660,
            this._text_661,
            this._el_662,
            this._text_663,
            this._text_664,
            this._el_665,
            this._text_666,
            this._text_667,
            this._el_668,
            this._text_669,
            this._text_670,
            this._text_671,
            this._el_672,
            this._text_673,
            this._text_674
        ], [disposable_0]);
        return null;
    };
    _View_SelectionComponent0.prototype.injectorGetInternal = function (token, requestNodeIndex, notFoundResult) {
        if (((token === import13.CodeTabComponent) && ((109 <= requestNodeIndex) && (requestNodeIndex <= 110)))) {
            return this._CodeTabComponent_109_4.context;
        }
        if (((token === import11.TabSectionComponent) && ((107 <= requestNodeIndex) && (requestNodeIndex <= 111)))) {
            return this._TabSectionComponent_107_4.context;
        }
        if (((token === import17.BasicUsageComponent) && (189 === requestNodeIndex))) {
            return this._BasicUsageComponent_189_4.context;
        }
        if (((token === import15.SampleTabComponent) && ((187 <= requestNodeIndex) && (requestNodeIndex <= 190)))) {
            return this._SampleTabComponent_187_4.context;
        }
        if (((token === import13.CodeTabComponent) && ((192 <= requestNodeIndex) && (requestNodeIndex <= 193)))) {
            return this._CodeTabComponent_192_4.context;
        }
        if (((token === import13.CodeTabComponent) && ((195 <= requestNodeIndex) && (requestNodeIndex <= 196)))) {
            return this._CodeTabComponent_195_4.context;
        }
        if (((token === import11.TabSectionComponent) && ((185 <= requestNodeIndex) && (requestNodeIndex <= 197)))) {
            return this._TabSectionComponent_185_4.context;
        }
        if (((token === import19.OptionsComponent) && (253 === requestNodeIndex))) {
            return this._OptionsComponent_253_4.context;
        }
        if (((token === import15.SampleTabComponent) && ((251 <= requestNodeIndex) && (requestNodeIndex <= 254)))) {
            return this._SampleTabComponent_251_4.context;
        }
        if (((token === import13.CodeTabComponent) && ((256 <= requestNodeIndex) && (requestNodeIndex <= 257)))) {
            return this._CodeTabComponent_256_4.context;
        }
        if (((token === import13.CodeTabComponent) && ((259 <= requestNodeIndex) && (requestNodeIndex <= 260)))) {
            return this._CodeTabComponent_259_4.context;
        }
        if (((token === import11.TabSectionComponent) && ((249 <= requestNodeIndex) && (requestNodeIndex <= 261)))) {
            return this._TabSectionComponent_249_4.context;
        }
        if (((token === import21.SelectedFlagComponent) && (293 === requestNodeIndex))) {
            return this._SelectedFlagComponent_293_4.context;
        }
        if (((token === import15.SampleTabComponent) && ((291 <= requestNodeIndex) && (requestNodeIndex <= 294)))) {
            return this._SampleTabComponent_291_4.context;
        }
        if (((token === import13.CodeTabComponent) && ((296 <= requestNodeIndex) && (requestNodeIndex <= 297)))) {
            return this._CodeTabComponent_296_4.context;
        }
        if (((token === import13.CodeTabComponent) && ((299 <= requestNodeIndex) && (requestNodeIndex <= 300)))) {
            return this._CodeTabComponent_299_4.context;
        }
        if (((token === import11.TabSectionComponent) && ((289 <= requestNodeIndex) && (requestNodeIndex <= 301)))) {
            return this._TabSectionComponent_289_4.context;
        }
        if (((token === import44.RouterLinkWithHref) && ((307 <= requestNodeIndex) && (requestNodeIndex <= 308)))) {
            return this._RouterLinkWithHref_307_3.context;
        }
        if (((token === import24.SelectedFlagDataComponent) && (334 === requestNodeIndex))) {
            return this._SelectedFlagDataComponent_334_4.context;
        }
        if (((token === import15.SampleTabComponent) && ((332 <= requestNodeIndex) && (requestNodeIndex <= 335)))) {
            return this._SampleTabComponent_332_4.context;
        }
        if (((token === import13.CodeTabComponent) && ((337 <= requestNodeIndex) && (requestNodeIndex <= 338)))) {
            return this._CodeTabComponent_337_4.context;
        }
        if (((token === import13.CodeTabComponent) && ((340 <= requestNodeIndex) && (requestNodeIndex <= 341)))) {
            return this._CodeTabComponent_340_4.context;
        }
        if (((token === import11.TabSectionComponent) && ((330 <= requestNodeIndex) && (requestNodeIndex <= 342)))) {
            return this._TabSectionComponent_330_4.context;
        }
        if (((token === import26.SelectionEventsComponent) && (402 === requestNodeIndex))) {
            return this._SelectionEventsComponent_402_4.context;
        }
        if (((token === import15.SampleTabComponent) && ((400 <= requestNodeIndex) && (requestNodeIndex <= 403)))) {
            return this._SampleTabComponent_400_4.context;
        }
        if (((token === import13.CodeTabComponent) && ((405 <= requestNodeIndex) && (requestNodeIndex <= 406)))) {
            return this._CodeTabComponent_405_4.context;
        }
        if (((token === import13.CodeTabComponent) && ((408 <= requestNodeIndex) && (requestNodeIndex <= 409)))) {
            return this._CodeTabComponent_408_4.context;
        }
        if (((token === import13.CodeTabComponent) && ((411 <= requestNodeIndex) && (requestNodeIndex <= 412)))) {
            return this._CodeTabComponent_411_4.context;
        }
        if (((token === import11.TabSectionComponent) && ((398 <= requestNodeIndex) && (requestNodeIndex <= 413)))) {
            return this._TabSectionComponent_398_4.context;
        }
        if (((token === import28.ServiceInjectionComponent) && (460 === requestNodeIndex))) {
            return this._ServiceInjectionComponent_460_4.context;
        }
        if (((token === import15.SampleTabComponent) && ((458 <= requestNodeIndex) && (requestNodeIndex <= 461)))) {
            return this._SampleTabComponent_458_4.context;
        }
        if (((token === import13.CodeTabComponent) && ((463 <= requestNodeIndex) && (requestNodeIndex <= 464)))) {
            return this._CodeTabComponent_463_4.context;
        }
        if (((token === import13.CodeTabComponent) && ((466 <= requestNodeIndex) && (requestNodeIndex <= 467)))) {
            return this._CodeTabComponent_466_4.context;
        }
        if (((token === import13.CodeTabComponent) && ((469 <= requestNodeIndex) && (requestNodeIndex <= 470)))) {
            return this._CodeTabComponent_469_4.context;
        }
        if (((token === import11.TabSectionComponent) && ((456 <= requestNodeIndex) && (requestNodeIndex <= 471)))) {
            return this._TabSectionComponent_456_4.context;
        }
        if (((token === import30.ServiceViewChildComponent) && (501 === requestNodeIndex))) {
            return this._ServiceViewChildComponent_501_4.context;
        }
        if (((token === import15.SampleTabComponent) && ((499 <= requestNodeIndex) && (requestNodeIndex <= 502)))) {
            return this._SampleTabComponent_499_4.context;
        }
        if (((token === import13.CodeTabComponent) && ((504 <= requestNodeIndex) && (requestNodeIndex <= 505)))) {
            return this._CodeTabComponent_504_4.context;
        }
        if (((token === import13.CodeTabComponent) && ((507 <= requestNodeIndex) && (requestNodeIndex <= 508)))) {
            return this._CodeTabComponent_507_4.context;
        }
        if (((token === import11.TabSectionComponent) && ((497 <= requestNodeIndex) && (requestNodeIndex <= 509)))) {
            return this._TabSectionComponent_497_4.context;
        }
        if (((token === import32.SelectAllComponent) && (560 === requestNodeIndex))) {
            return this._SelectAllComponent_560_4.context;
        }
        if (((token === import15.SampleTabComponent) && ((558 <= requestNodeIndex) && (requestNodeIndex <= 561)))) {
            return this._SampleTabComponent_558_4.context;
        }
        if (((token === import13.CodeTabComponent) && ((563 <= requestNodeIndex) && (requestNodeIndex <= 564)))) {
            return this._CodeTabComponent_563_4.context;
        }
        if (((token === import13.CodeTabComponent) && ((566 <= requestNodeIndex) && (requestNodeIndex <= 567)))) {
            return this._CodeTabComponent_566_4.context;
        }
        if (((token === import11.TabSectionComponent) && ((556 <= requestNodeIndex) && (requestNodeIndex <= 568)))) {
            return this._TabSectionComponent_556_4.context;
        }
        if (((token === import34.SelectionCheckboxComponent) && (586 === requestNodeIndex))) {
            return this._SelectionCheckboxComponent_586_4.context;
        }
        if (((token === import15.SampleTabComponent) && ((584 <= requestNodeIndex) && (requestNodeIndex <= 587)))) {
            return this._SampleTabComponent_584_4.context;
        }
        if (((token === import13.CodeTabComponent) && ((589 <= requestNodeIndex) && (requestNodeIndex <= 590)))) {
            return this._CodeTabComponent_589_4.context;
        }
        if (((token === import13.CodeTabComponent) && ((592 <= requestNodeIndex) && (requestNodeIndex <= 593)))) {
            return this._CodeTabComponent_592_4.context;
        }
        if (((token === import11.TabSectionComponent) && ((582 <= requestNodeIndex) && (requestNodeIndex <= 594)))) {
            return this._TabSectionComponent_582_4.context;
        }
        if (((token === import36.CustomTrackByComponent) && (635 === requestNodeIndex))) {
            return this._CustomTrackByComponent_635_4.context;
        }
        if (((token === import15.SampleTabComponent) && ((633 <= requestNodeIndex) && (requestNodeIndex <= 636)))) {
            return this._SampleTabComponent_633_4.context;
        }
        if (((token === import13.CodeTabComponent) && ((638 <= requestNodeIndex) && (requestNodeIndex <= 639)))) {
            return this._CodeTabComponent_638_4.context;
        }
        if (((token === import13.CodeTabComponent) && ((641 <= requestNodeIndex) && (requestNodeIndex <= 642)))) {
            return this._CodeTabComponent_641_4.context;
        }
        if (((token === import11.TabSectionComponent) && ((631 <= requestNodeIndex) && (requestNodeIndex <= 643)))) {
            return this._TabSectionComponent_631_4.context;
        }
        return notFoundResult;
    };
    _View_SelectionComponent0.prototype.detectChangesInternal = function (throwOnChange) {
        this._TabSectionComponent_107_4.ngDoCheck(this, this._el_107, throwOnChange);
        var currVal_109_0_0 = '%2Bselection/bootstrap/app.module.tsfake';
        this._CodeTabComponent_109_4.check_url(currVal_109_0_0, throwOnChange, false);
        this._CodeTabComponent_109_4.ngDoCheck(this, this._el_109, throwOnChange);
        this._TabSectionComponent_185_4.ngDoCheck(this, this._el_185, throwOnChange);
        this._SampleTabComponent_187_4.ngDoCheck(this, this._el_187, throwOnChange);
        this._BasicUsageComponent_189_4.ngDoCheck(this, this._el_189, throwOnChange);
        var currVal_192_0_0 = '%2Bselection/basic-usage/basic-usage.component.html';
        this._CodeTabComponent_192_4.check_url(currVal_192_0_0, throwOnChange, false);
        this._CodeTabComponent_192_4.ngDoCheck(this, this._el_192, throwOnChange);
        var currVal_195_0_0 = '%2Bselection/basic-usage/basic-usage.component.ts';
        this._CodeTabComponent_195_4.check_url(currVal_195_0_0, throwOnChange, false);
        this._CodeTabComponent_195_4.ngDoCheck(this, this._el_195, throwOnChange);
        this._TabSectionComponent_249_4.ngDoCheck(this, this._el_249, throwOnChange);
        this._SampleTabComponent_251_4.ngDoCheck(this, this._el_251, throwOnChange);
        this._OptionsComponent_253_4.ngDoCheck(this, this._el_253, throwOnChange);
        var currVal_256_0_0 = '%2Bselection/options/options.component.html';
        this._CodeTabComponent_256_4.check_url(currVal_256_0_0, throwOnChange, false);
        this._CodeTabComponent_256_4.ngDoCheck(this, this._el_256, throwOnChange);
        var currVal_259_0_0 = '%2Bselection/options/options.component.ts';
        this._CodeTabComponent_259_4.check_url(currVal_259_0_0, throwOnChange, false);
        this._CodeTabComponent_259_4.ngDoCheck(this, this._el_259, throwOnChange);
        this._TabSectionComponent_289_4.ngDoCheck(this, this._el_289, throwOnChange);
        this._SampleTabComponent_291_4.ngDoCheck(this, this._el_291, throwOnChange);
        this._SelectedFlagComponent_293_4.ngDoCheck(this, this._el_293, throwOnChange);
        var currVal_296_0_0 = '%2Bselection/selected-flag/selected-flag.component.html';
        this._CodeTabComponent_296_4.check_url(currVal_296_0_0, throwOnChange, false);
        this._CodeTabComponent_296_4.ngDoCheck(this, this._el_296, throwOnChange);
        var currVal_299_0_0 = '%2Bselection/selected-flag/selected-flag.component.ts';
        this._CodeTabComponent_299_4.check_url(currVal_299_0_0, throwOnChange, false);
        this._CodeTabComponent_299_4.ngDoCheck(this, this._el_299, throwOnChange);
        var currVal_307_0_0 = this._arr_838('/misc-directives');
        this._RouterLinkWithHref_307_3.check_routerLink(currVal_307_0_0, throwOnChange, false);
        this._RouterLinkWithHref_307_3.ngDoCheck(this, this._el_307, throwOnChange);
        this._TabSectionComponent_330_4.ngDoCheck(this, this._el_330, throwOnChange);
        this._SampleTabComponent_332_4.ngDoCheck(this, this._el_332, throwOnChange);
        this._SelectedFlagDataComponent_334_4.ngDoCheck(this, this._el_334, throwOnChange);
        var currVal_337_0_0 = '%2Bselection/selected-flag-data/selected-flag-data.component.html';
        this._CodeTabComponent_337_4.check_url(currVal_337_0_0, throwOnChange, false);
        this._CodeTabComponent_337_4.ngDoCheck(this, this._el_337, throwOnChange);
        var currVal_340_0_0 = '%2Bselection/selected-flag-data/selected-flag-data.component.ts';
        this._CodeTabComponent_340_4.check_url(currVal_340_0_0, throwOnChange, false);
        this._CodeTabComponent_340_4.ngDoCheck(this, this._el_340, throwOnChange);
        this._TabSectionComponent_398_4.ngDoCheck(this, this._el_398, throwOnChange);
        this._SampleTabComponent_400_4.ngDoCheck(this, this._el_400, throwOnChange);
        this._SelectionEventsComponent_402_4.ngDoCheck(this, this._el_402, throwOnChange);
        var currVal_405_0_0 = '%2Bselection/selection-events/selection-events.component.html';
        this._CodeTabComponent_405_4.check_url(currVal_405_0_0, throwOnChange, false);
        this._CodeTabComponent_405_4.ngDoCheck(this, this._el_405, throwOnChange);
        var currVal_408_0_0 = '%2Bselection/selection-events/selection-events.component.ts';
        this._CodeTabComponent_408_4.check_url(currVal_408_0_0, throwOnChange, false);
        this._CodeTabComponent_408_4.ngDoCheck(this, this._el_408, throwOnChange);
        var currVal_411_0_0 = 'core/selection/selection-event.ts';
        this._CodeTabComponent_411_4.check_url(currVal_411_0_0, throwOnChange, false);
        var currVal_411_0_1 = true;
        this._CodeTabComponent_411_4.check_fromLib(currVal_411_0_1, throwOnChange, false);
        this._CodeTabComponent_411_4.ngDoCheck(this, this._el_411, throwOnChange);
        this._TabSectionComponent_456_4.ngDoCheck(this, this._el_456, throwOnChange);
        this._SampleTabComponent_458_4.ngDoCheck(this, this._el_458, throwOnChange);
        this._ServiceInjectionComponent_460_4.ngDoCheck(this, this._el_460, throwOnChange);
        var currVal_463_0_0 = '%2Bselection/service-injection/service-injection.component.html';
        this._CodeTabComponent_463_4.check_url(currVal_463_0_0, throwOnChange, false);
        this._CodeTabComponent_463_4.ngDoCheck(this, this._el_463, throwOnChange);
        var currVal_466_0_0 = '%2Bselection/service-injection/service-injection.component.ts';
        this._CodeTabComponent_466_4.check_url(currVal_466_0_0, throwOnChange, false);
        this._CodeTabComponent_466_4.ngDoCheck(this, this._el_466, throwOnChange);
        var currVal_469_0_0 = '%2Bselection/service-injection/nested-button.component.ts';
        this._CodeTabComponent_469_4.check_url(currVal_469_0_0, throwOnChange, false);
        this._CodeTabComponent_469_4.ngDoCheck(this, this._el_469, throwOnChange);
        this._TabSectionComponent_497_4.ngDoCheck(this, this._el_497, throwOnChange);
        this._SampleTabComponent_499_4.ngDoCheck(this, this._el_499, throwOnChange);
        this._ServiceViewChildComponent_501_4.ngDoCheck(this, this._el_501, throwOnChange);
        var currVal_504_0_0 = '%2Bselection/service-view-child/service-view-child.component.html';
        this._CodeTabComponent_504_4.check_url(currVal_504_0_0, throwOnChange, false);
        this._CodeTabComponent_504_4.ngDoCheck(this, this._el_504, throwOnChange);
        var currVal_507_0_0 = '%2Bselection/service-view-child/service-view-child.component.ts';
        this._CodeTabComponent_507_4.check_url(currVal_507_0_0, throwOnChange, false);
        this._CodeTabComponent_507_4.ngDoCheck(this, this._el_507, throwOnChange);
        this._TabSectionComponent_556_4.ngDoCheck(this, this._el_556, throwOnChange);
        this._SampleTabComponent_558_4.ngDoCheck(this, this._el_558, throwOnChange);
        this._SelectAllComponent_560_4.ngDoCheck(this, this._el_560, throwOnChange);
        var currVal_563_0_0 = '%2Bselection/select-all/select-all.component.html';
        this._CodeTabComponent_563_4.check_url(currVal_563_0_0, throwOnChange, false);
        this._CodeTabComponent_563_4.ngDoCheck(this, this._el_563, throwOnChange);
        var currVal_566_0_0 = '%2Bselection/select-all/select-all.component.ts';
        this._CodeTabComponent_566_4.check_url(currVal_566_0_0, throwOnChange, false);
        this._CodeTabComponent_566_4.ngDoCheck(this, this._el_566, throwOnChange);
        this._TabSectionComponent_582_4.ngDoCheck(this, this._el_582, throwOnChange);
        this._SampleTabComponent_584_4.ngDoCheck(this, this._el_584, throwOnChange);
        this._SelectionCheckboxComponent_586_4.ngDoCheck(this, this._el_586, throwOnChange);
        var currVal_589_0_0 = '%2Bselection/selection-checkbox/selection-checkbox.component.html';
        this._CodeTabComponent_589_4.check_url(currVal_589_0_0, throwOnChange, false);
        this._CodeTabComponent_589_4.ngDoCheck(this, this._el_589, throwOnChange);
        var currVal_592_0_0 = '%2Bselection/selection-checkbox/selection-checkbox.component.ts';
        this._CodeTabComponent_592_4.check_url(currVal_592_0_0, throwOnChange, false);
        this._CodeTabComponent_592_4.ngDoCheck(this, this._el_592, throwOnChange);
        this._TabSectionComponent_631_4.ngDoCheck(this, this._el_631, throwOnChange);
        this._SampleTabComponent_633_4.ngDoCheck(this, this._el_633, throwOnChange);
        this._CustomTrackByComponent_635_4.ngDoCheck(this, this._el_635, throwOnChange);
        var currVal_638_0_0 = '%2Bselection/custom-track-by/custom-track-by.component.html';
        this._CodeTabComponent_638_4.check_url(currVal_638_0_0, throwOnChange, false);
        this._CodeTabComponent_638_4.ngDoCheck(this, this._el_638, throwOnChange);
        var currVal_641_0_0 = '%2Bselection/custom-track-by/custom-track-by.component.ts';
        this._CodeTabComponent_641_4.check_url(currVal_641_0_0, throwOnChange, false);
        this._CodeTabComponent_641_4.ngDoCheck(this, this._el_641, throwOnChange);
        this._RouterLinkWithHref_307_3.checkHost(this, this, this._el_307, throwOnChange);
        this.compView_107.detectChanges(throwOnChange);
        this.compView_109.detectChanges(throwOnChange);
        this.compView_185.detectChanges(throwOnChange);
        this.compView_187.detectChanges(throwOnChange);
        this.compView_189.detectChanges(throwOnChange);
        this.compView_192.detectChanges(throwOnChange);
        this.compView_195.detectChanges(throwOnChange);
        this.compView_249.detectChanges(throwOnChange);
        this.compView_251.detectChanges(throwOnChange);
        this.compView_253.detectChanges(throwOnChange);
        this.compView_256.detectChanges(throwOnChange);
        this.compView_259.detectChanges(throwOnChange);
        this.compView_289.detectChanges(throwOnChange);
        this.compView_291.detectChanges(throwOnChange);
        this.compView_293.detectChanges(throwOnChange);
        this.compView_296.detectChanges(throwOnChange);
        this.compView_299.detectChanges(throwOnChange);
        this.compView_330.detectChanges(throwOnChange);
        this.compView_332.detectChanges(throwOnChange);
        this.compView_334.detectChanges(throwOnChange);
        this.compView_337.detectChanges(throwOnChange);
        this.compView_340.detectChanges(throwOnChange);
        this.compView_398.detectChanges(throwOnChange);
        this.compView_400.detectChanges(throwOnChange);
        this.compView_402.detectChanges(throwOnChange);
        this.compView_405.detectChanges(throwOnChange);
        this.compView_408.detectChanges(throwOnChange);
        this.compView_411.detectChanges(throwOnChange);
        this.compView_456.detectChanges(throwOnChange);
        this.compView_458.detectChanges(throwOnChange);
        this.compView_460.detectChanges(throwOnChange);
        this.compView_463.detectChanges(throwOnChange);
        this.compView_466.detectChanges(throwOnChange);
        this.compView_469.detectChanges(throwOnChange);
        this.compView_497.detectChanges(throwOnChange);
        this.compView_499.detectChanges(throwOnChange);
        this.compView_501.detectChanges(throwOnChange);
        this.compView_504.detectChanges(throwOnChange);
        this.compView_507.detectChanges(throwOnChange);
        this.compView_556.detectChanges(throwOnChange);
        this.compView_558.detectChanges(throwOnChange);
        this.compView_560.detectChanges(throwOnChange);
        this.compView_563.detectChanges(throwOnChange);
        this.compView_566.detectChanges(throwOnChange);
        this.compView_582.detectChanges(throwOnChange);
        this.compView_584.detectChanges(throwOnChange);
        this.compView_586.detectChanges(throwOnChange);
        this.compView_589.detectChanges(throwOnChange);
        this.compView_592.detectChanges(throwOnChange);
        this.compView_631.detectChanges(throwOnChange);
        this.compView_633.detectChanges(throwOnChange);
        this.compView_635.detectChanges(throwOnChange);
        this.compView_638.detectChanges(throwOnChange);
        this.compView_641.detectChanges(throwOnChange);
    };
    _View_SelectionComponent0.prototype.destroyInternal = function () {
        this.compView_107.destroy();
        this.compView_109.destroy();
        this.compView_185.destroy();
        this.compView_187.destroy();
        this.compView_189.destroy();
        this.compView_192.destroy();
        this.compView_195.destroy();
        this.compView_249.destroy();
        this.compView_251.destroy();
        this.compView_253.destroy();
        this.compView_256.destroy();
        this.compView_259.destroy();
        this.compView_289.destroy();
        this.compView_291.destroy();
        this.compView_293.destroy();
        this.compView_296.destroy();
        this.compView_299.destroy();
        this.compView_330.destroy();
        this.compView_332.destroy();
        this.compView_334.destroy();
        this.compView_337.destroy();
        this.compView_340.destroy();
        this.compView_398.destroy();
        this.compView_400.destroy();
        this.compView_402.destroy();
        this.compView_405.destroy();
        this.compView_408.destroy();
        this.compView_411.destroy();
        this.compView_456.destroy();
        this.compView_458.destroy();
        this.compView_460.destroy();
        this.compView_463.destroy();
        this.compView_466.destroy();
        this.compView_469.destroy();
        this.compView_497.destroy();
        this.compView_499.destroy();
        this.compView_501.destroy();
        this.compView_504.destroy();
        this.compView_507.destroy();
        this.compView_556.destroy();
        this.compView_558.destroy();
        this.compView_560.destroy();
        this.compView_563.destroy();
        this.compView_566.destroy();
        this.compView_582.destroy();
        this.compView_584.destroy();
        this.compView_586.destroy();
        this.compView_589.destroy();
        this.compView_592.destroy();
        this.compView_631.destroy();
        this.compView_633.destroy();
        this.compView_635.destroy();
        this.compView_638.destroy();
        this.compView_641.destroy();
        this._RouterLinkWithHref_307_3.ngOnDestroy();
    };
    _View_SelectionComponent0.prototype.visitProjectableNodesInternal = function (nodeIndex, ngContentIndex, cb, ctx) {
        if (((nodeIndex == 107) && (ngContentIndex == 0))) {
            cb(this._text_108, ctx);
            cb(this._el_109, ctx);
            cb(this._text_111, ctx);
        }
        if (((nodeIndex == 185) && (ngContentIndex == 0))) {
            cb(this._text_186, ctx);
            cb(this._el_187, ctx);
            cb(this._text_191, ctx);
            cb(this._el_192, ctx);
            cb(this._text_194, ctx);
            cb(this._el_195, ctx);
            cb(this._text_197, ctx);
        }
        if (((nodeIndex == 187) && (ngContentIndex == 0))) {
            cb(this._text_188, ctx);
            cb(this._el_189, ctx);
            cb(this._text_190, ctx);
        }
        if (((nodeIndex == 249) && (ngContentIndex == 0))) {
            cb(this._text_250, ctx);
            cb(this._el_251, ctx);
            cb(this._text_255, ctx);
            cb(this._el_256, ctx);
            cb(this._text_258, ctx);
            cb(this._el_259, ctx);
            cb(this._text_261, ctx);
        }
        if (((nodeIndex == 251) && (ngContentIndex == 0))) {
            cb(this._text_252, ctx);
            cb(this._el_253, ctx);
            cb(this._text_254, ctx);
        }
        if (((nodeIndex == 289) && (ngContentIndex == 0))) {
            cb(this._text_290, ctx);
            cb(this._el_291, ctx);
            cb(this._text_295, ctx);
            cb(this._el_296, ctx);
            cb(this._text_298, ctx);
            cb(this._el_299, ctx);
            cb(this._text_301, ctx);
        }
        if (((nodeIndex == 291) && (ngContentIndex == 0))) {
            cb(this._text_292, ctx);
            cb(this._el_293, ctx);
            cb(this._text_294, ctx);
        }
        if (((nodeIndex == 330) && (ngContentIndex == 0))) {
            cb(this._text_331, ctx);
            cb(this._el_332, ctx);
            cb(this._text_336, ctx);
            cb(this._el_337, ctx);
            cb(this._text_339, ctx);
            cb(this._el_340, ctx);
            cb(this._text_342, ctx);
        }
        if (((nodeIndex == 332) && (ngContentIndex == 0))) {
            cb(this._text_333, ctx);
            cb(this._el_334, ctx);
            cb(this._text_335, ctx);
        }
        if (((nodeIndex == 398) && (ngContentIndex == 0))) {
            cb(this._text_399, ctx);
            cb(this._el_400, ctx);
            cb(this._text_404, ctx);
            cb(this._el_405, ctx);
            cb(this._text_407, ctx);
            cb(this._el_408, ctx);
            cb(this._text_410, ctx);
            cb(this._el_411, ctx);
            cb(this._text_413, ctx);
        }
        if (((nodeIndex == 400) && (ngContentIndex == 0))) {
            cb(this._text_401, ctx);
            cb(this._el_402, ctx);
            cb(this._text_403, ctx);
        }
        if (((nodeIndex == 456) && (ngContentIndex == 0))) {
            cb(this._text_457, ctx);
            cb(this._el_458, ctx);
            cb(this._text_462, ctx);
            cb(this._el_463, ctx);
            cb(this._text_465, ctx);
            cb(this._el_466, ctx);
            cb(this._text_468, ctx);
            cb(this._el_469, ctx);
            cb(this._text_471, ctx);
        }
        if (((nodeIndex == 458) && (ngContentIndex == 0))) {
            cb(this._text_459, ctx);
            cb(this._el_460, ctx);
            cb(this._text_461, ctx);
        }
        if (((nodeIndex == 497) && (ngContentIndex == 0))) {
            cb(this._text_498, ctx);
            cb(this._el_499, ctx);
            cb(this._text_503, ctx);
            cb(this._el_504, ctx);
            cb(this._text_506, ctx);
            cb(this._el_507, ctx);
            cb(this._text_509, ctx);
        }
        if (((nodeIndex == 499) && (ngContentIndex == 0))) {
            cb(this._text_500, ctx);
            cb(this._el_501, ctx);
            cb(this._text_502, ctx);
        }
        if (((nodeIndex == 556) && (ngContentIndex == 0))) {
            cb(this._text_557, ctx);
            cb(this._el_558, ctx);
            cb(this._text_562, ctx);
            cb(this._el_563, ctx);
            cb(this._text_565, ctx);
            cb(this._el_566, ctx);
            cb(this._text_568, ctx);
        }
        if (((nodeIndex == 558) && (ngContentIndex == 0))) {
            cb(this._text_559, ctx);
            cb(this._el_560, ctx);
            cb(this._text_561, ctx);
        }
        if (((nodeIndex == 582) && (ngContentIndex == 0))) {
            cb(this._text_583, ctx);
            cb(this._el_584, ctx);
            cb(this._text_588, ctx);
            cb(this._el_589, ctx);
            cb(this._text_591, ctx);
            cb(this._el_592, ctx);
            cb(this._text_594, ctx);
        }
        if (((nodeIndex == 584) && (ngContentIndex == 0))) {
            cb(this._text_585, ctx);
            cb(this._el_586, ctx);
            cb(this._text_587, ctx);
        }
        if (((nodeIndex == 631) && (ngContentIndex == 0))) {
            cb(this._text_632, ctx);
            cb(this._el_633, ctx);
            cb(this._text_637, ctx);
            cb(this._el_638, ctx);
            cb(this._text_640, ctx);
            cb(this._el_641, ctx);
            cb(this._text_643, ctx);
        }
        if (((nodeIndex == 633) && (ngContentIndex == 0))) {
            cb(this._text_634, ctx);
            cb(this._el_635, ctx);
            cb(this._text_636, ctx);
        }
    };
    _View_SelectionComponent0.prototype.handleEvent_307 = function (eventName, $event) {
        this.markPathToRootAsCheckOnce();
        var result = true;
        result = (this._RouterLinkWithHref_307_3.handleEvent(eventName, $event) && result);
        return result;
    };
    return _View_SelectionComponent0;
}(import1.AppView));
function viewFactory_SelectionComponent0(viewUtils, parentInjector, declarationEl) {
    if ((renderType_SelectionComponent === null)) {
        (renderType_SelectionComponent = viewUtils.createRenderComponentType('', 0, import8.ViewEncapsulation.Emulated, styles_SelectionComponent, {}));
    }
    return new _View_SelectionComponent0(viewUtils, parentInjector, declarationEl);
}
exports.viewFactory_SelectionComponent0 = viewFactory_SelectionComponent0;


/***/ },

/***/ "./src/compiled/src/app/+selection/selection.module.ngfactory.ts":
/***/ function(module, exports, __webpack_require__) {

"use strict";
/**
 * This file is generated by the Angular 2 template compiler.
 * Do not edit.
 */
/* tslint:disable */
"use strict";
var import0 = __webpack_require__("./node_modules/@angular/core/src/linker/ng_module_factory.js");
var import1 = __webpack_require__("./src/app/+selection/selection.module.ts");
var import2 = __webpack_require__("./node_modules/@angular/common/src/common_module.js");
var import3 = __webpack_require__("./node_modules/@angular/router/src/router_module.js");
var import4 = __webpack_require__("./node_modules/@angular/forms/src/directives.js");
var import5 = __webpack_require__("./node_modules/@angular/forms/src/form_providers.js");
var import6 = __webpack_require__("./node_modules/right-angled/index.js");
var import7 = __webpack_require__("./src/app/shared/shared.module.ts");
var import8 = __webpack_require__("./node_modules/@angular/common/src/localization.js");
var import9 = __webpack_require__("./node_modules/@angular/forms/src/directives/radio_control_value_accessor.js");
var import10 = __webpack_require__("./src/app/+selection/countries.service.ts");
var import12 = __webpack_require__("./src/compiled/src/app/+selection/selection.component.ngfactory.ts");
var import13 = __webpack_require__("./node_modules/@angular/core/src/i18n/tokens.js");
var import14 = __webpack_require__("./src/app/+selection/selection.component.ts");
var import15 = __webpack_require__("./node_modules/@angular/http/src/http.js");
var import16 = __webpack_require__("./node_modules/@angular/router/src/router_config_loader.js");
var SelectionModuleInjector = (function (_super) {
    __extends(SelectionModuleInjector, _super);
    function SelectionModuleInjector(parent) {
        _super.call(this, parent, [import12.SelectionComponentNgFactory], []);
    }
    Object.defineProperty(SelectionModuleInjector.prototype, "_NgLocalization_11", {
        get: function () {
            if ((this.__NgLocalization_11 == null)) {
                (this.__NgLocalization_11 = new import8.NgLocaleLocalization(this.parent.get(import13.LOCALE_ID)));
            }
            return this.__NgLocalization_11;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SelectionModuleInjector.prototype, "_RadioControlRegistry_12", {
        get: function () {
            if ((this.__RadioControlRegistry_12 == null)) {
                (this.__RadioControlRegistry_12 = new import9.RadioControlRegistry());
            }
            return this.__RadioControlRegistry_12;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SelectionModuleInjector.prototype, "_ROUTES_13", {
        get: function () {
            if ((this.__ROUTES_13 == null)) {
                (this.__ROUTES_13 = [[{
                            component: import14.SelectionComponent,
                            path: ''
                        }
                    ]]);
            }
            return this.__ROUTES_13;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SelectionModuleInjector.prototype, "_CountriesService_14", {
        get: function () {
            if ((this.__CountriesService_14 == null)) {
                (this.__CountriesService_14 = new import10.CountriesService(this.parent.get(import15.Http)));
            }
            return this.__CountriesService_14;
        },
        enumerable: true,
        configurable: true
    });
    SelectionModuleInjector.prototype.createInternal = function () {
        this._CommonModule_0 = new import2.CommonModule();
        this._RouterModule_1 = new import3.RouterModule(this.parent.get(import3.ROUTER_FORROOT_GUARD, null));
        this._InternalFormsSharedModule_2 = new import4.InternalFormsSharedModule();
        this._FormsModule_3 = new import5.FormsModule();
        this._RTListsModule_4 = new import6.RTListsModule();
        this._RTSelectionModule_5 = new import6.RTSelectionModule();
        this._RTMiscModule_6 = new import6.RTMiscModule();
        this._RTFiltersModule_7 = new import6.RTFiltersModule();
        this._RTModule_8 = new import6.RTModule();
        this._SharedModule_9 = new import7.SharedModule();
        this._SelectionModule_10 = new import1.SelectionModule();
        return this._SelectionModule_10;
    };
    SelectionModuleInjector.prototype.getInternal = function (token, notFoundResult) {
        if ((token === import2.CommonModule)) {
            return this._CommonModule_0;
        }
        if ((token === import3.RouterModule)) {
            return this._RouterModule_1;
        }
        if ((token === import4.InternalFormsSharedModule)) {
            return this._InternalFormsSharedModule_2;
        }
        if ((token === import5.FormsModule)) {
            return this._FormsModule_3;
        }
        if ((token === import6.RTListsModule)) {
            return this._RTListsModule_4;
        }
        if ((token === import6.RTSelectionModule)) {
            return this._RTSelectionModule_5;
        }
        if ((token === import6.RTMiscModule)) {
            return this._RTMiscModule_6;
        }
        if ((token === import6.RTFiltersModule)) {
            return this._RTFiltersModule_7;
        }
        if ((token === import6.RTModule)) {
            return this._RTModule_8;
        }
        if ((token === import7.SharedModule)) {
            return this._SharedModule_9;
        }
        if ((token === import1.SelectionModule)) {
            return this._SelectionModule_10;
        }
        if ((token === import8.NgLocalization)) {
            return this._NgLocalization_11;
        }
        if ((token === import9.RadioControlRegistry)) {
            return this._RadioControlRegistry_12;
        }
        if ((token === import16.ROUTES)) {
            return this._ROUTES_13;
        }
        if ((token === import10.CountriesService)) {
            return this._CountriesService_14;
        }
        return notFoundResult;
    };
    SelectionModuleInjector.prototype.destroyInternal = function () {
    };
    return SelectionModuleInjector;
}(import0.NgModuleInjector));
exports.SelectionModuleNgFactory = new import0.NgModuleFactory(SelectionModuleInjector, import1.SelectionModule);


/***/ },

/***/ "./src/compiled/src/app/+selection/service-injection/nested-button.component.ngfactory.ts":
/***/ function(module, exports, __webpack_require__) {

"use strict";
/**
 * This file is generated by the Angular 2 template compiler.
 * Do not edit.
 */
/* tslint:disable */
"use strict";
var import0 = __webpack_require__("./src/app/+selection/service-injection/nested-button.component.ts");
var import1 = __webpack_require__("./node_modules/@angular/core/src/linker/view.js");
var import3 = __webpack_require__("./node_modules/@angular/core/src/linker/element.js");
var import4 = __webpack_require__("./node_modules/@angular/core/src/linker/view_utils.js");
var import6 = __webpack_require__("./node_modules/@angular/core/src/linker/view_type.js");
var import7 = __webpack_require__("./node_modules/@angular/core/src/change_detection/change_detection.js");
var import8 = __webpack_require__("./node_modules/right-angled/src/core/selection/selection-service.js");
var import9 = __webpack_require__("./node_modules/@angular/core/src/metadata/view.js");
var import10 = __webpack_require__("./node_modules/@angular/core/src/linker/component_factory.js");
var Wrapper_NestedButtonComponent = (function () {
    function Wrapper_NestedButtonComponent(p0) {
        this._changed = false;
        this.context = new import0.NestedButtonComponent(p0);
    }
    Wrapper_NestedButtonComponent.prototype.ngOnDetach = function (view, componentView, el) {
    };
    Wrapper_NestedButtonComponent.prototype.ngOnDestroy = function () {
    };
    Wrapper_NestedButtonComponent.prototype.ngDoCheck = function (view, el, throwOnChange) {
        var changed = this._changed;
        this._changed = false;
        return changed;
    };
    Wrapper_NestedButtonComponent.prototype.checkHost = function (view, componentView, el, throwOnChange) {
    };
    Wrapper_NestedButtonComponent.prototype.handleEvent = function (eventName, $event) {
        var result = true;
        return result;
    };
    Wrapper_NestedButtonComponent.prototype.subscribe = function (view, _eventHandler) {
        this._eventHandler = _eventHandler;
    };
    return Wrapper_NestedButtonComponent;
}());
exports.Wrapper_NestedButtonComponent = Wrapper_NestedButtonComponent;
var renderType_NestedButtonComponent_Host = null;
var _View_NestedButtonComponent_Host0 = (function (_super) {
    __extends(_View_NestedButtonComponent_Host0, _super);
    function _View_NestedButtonComponent_Host0(viewUtils, parentInjector, declarationEl) {
        _super.call(this, _View_NestedButtonComponent_Host0, renderType_NestedButtonComponent_Host, import6.ViewType.HOST, viewUtils, parentInjector, declarationEl, import7.ChangeDetectorStatus.CheckAlways);
    }
    _View_NestedButtonComponent_Host0.prototype.createInternal = function (rootSelector) {
        this._el_0 = import4.selectOrCreateRenderHostElement(this.renderer, 'rt-demo-nested-button', import4.EMPTY_INLINE_ARRAY, rootSelector, null);
        this._appEl_0 = new import3.AppElement(0, null, this, this._el_0);
        this.compView_0 = viewFactory_NestedButtonComponent0(this.viewUtils, this.injector(0), this._appEl_0);
        this._NestedButtonComponent_0_4 = new Wrapper_NestedButtonComponent(this.parentInjector.get(import8.RtSelectionService));
        this._appEl_0.initComponent(this._NestedButtonComponent_0_4.context, this.compView_0);
        this.compView_0.create(this._NestedButtonComponent_0_4.context, null);
        this.init(this._el_0, [this._el_0], null);
        return this._appEl_0;
    };
    _View_NestedButtonComponent_Host0.prototype.injectorGetInternal = function (token, requestNodeIndex, notFoundResult) {
        if (((token === import0.NestedButtonComponent) && (0 === requestNodeIndex))) {
            return this._NestedButtonComponent_0_4.context;
        }
        return notFoundResult;
    };
    _View_NestedButtonComponent_Host0.prototype.detectChangesInternal = function (throwOnChange) {
        this._NestedButtonComponent_0_4.ngDoCheck(this, this._el_0, throwOnChange);
        this.compView_0.detectChanges(throwOnChange);
    };
    _View_NestedButtonComponent_Host0.prototype.destroyInternal = function () {
        this.compView_0.destroy();
    };
    _View_NestedButtonComponent_Host0.prototype.visitRootNodesInternal = function (cb, ctx) {
        cb(this._el_0, ctx);
    };
    return _View_NestedButtonComponent_Host0;
}(import1.AppView));
function viewFactory_NestedButtonComponent_Host0(viewUtils, parentInjector, declarationEl) {
    if ((renderType_NestedButtonComponent_Host === null)) {
        (renderType_NestedButtonComponent_Host = viewUtils.createRenderComponentType('', 0, import9.ViewEncapsulation.None, [], {}));
    }
    return new _View_NestedButtonComponent_Host0(viewUtils, parentInjector, declarationEl);
}
exports.NestedButtonComponentNgFactory = new import10.ComponentFactory('rt-demo-nested-button', viewFactory_NestedButtonComponent_Host0, import0.NestedButtonComponent);
var styles_NestedButtonComponent = [];
var renderType_NestedButtonComponent = null;
var _View_NestedButtonComponent0 = (function (_super) {
    __extends(_View_NestedButtonComponent0, _super);
    function _View_NestedButtonComponent0(viewUtils, parentInjector, declarationEl) {
        _super.call(this, _View_NestedButtonComponent0, renderType_NestedButtonComponent, import6.ViewType.COMPONENT, viewUtils, parentInjector, declarationEl, import7.ChangeDetectorStatus.CheckAlways);
    }
    _View_NestedButtonComponent0.prototype.createInternal = function (rootSelector) {
        var parentRenderNode = this.renderer.createViewRoot(this.declarationAppElement.nativeElement);
        this._el_0 = import4.createRenderElement(this.renderer, parentRenderNode, 'button', new import4.InlineArray4(4, 'class', 'btn btn-primary', 'title', 'Get selected items'), null);
        this._text_1 = this.renderer.createText(this._el_0, 'Get selected items', null);
        var disposable_0 = import4.subscribeToRenderElement(this, this._el_0, new import4.InlineArray2(2, 'click', null), this.eventHandler(this.handleEvent_0));
        this.init(null, [
            this._el_0,
            this._text_1
        ], [disposable_0]);
        return null;
    };
    _View_NestedButtonComponent0.prototype.handleEvent_0 = function (eventName, $event) {
        this.markPathToRootAsCheckOnce();
        var result = true;
        if ((eventName == 'click')) {
            var pd_sub_0 = (this.context.displaySelectedItems() !== false);
            result = (pd_sub_0 && result);
        }
        return result;
    };
    return _View_NestedButtonComponent0;
}(import1.AppView));
function viewFactory_NestedButtonComponent0(viewUtils, parentInjector, declarationEl) {
    if ((renderType_NestedButtonComponent === null)) {
        (renderType_NestedButtonComponent = viewUtils.createRenderComponentType('', 0, import9.ViewEncapsulation.None, styles_NestedButtonComponent, {}));
    }
    return new _View_NestedButtonComponent0(viewUtils, parentInjector, declarationEl);
}
exports.viewFactory_NestedButtonComponent0 = viewFactory_NestedButtonComponent0;


/***/ },

/***/ "./src/compiled/src/app/+selection/service-injection/service-injection.component.ngfactory.ts":
/***/ function(module, exports, __webpack_require__) {

"use strict";
/**
 * This file is generated by the Angular 2 template compiler.
 * Do not edit.
 */
/* tslint:disable */
"use strict";
var import0 = __webpack_require__("./src/app/+selection/service-injection/service-injection.component.ts");
var import1 = __webpack_require__("./node_modules/@angular/core/src/linker/view.js");
var import3 = __webpack_require__("./node_modules/@angular/core/src/linker/element.js");
var import4 = __webpack_require__("./node_modules/@angular/core/src/linker/view_utils.js");
var import6 = __webpack_require__("./node_modules/@angular/core/src/linker/view_type.js");
var import7 = __webpack_require__("./node_modules/@angular/core/src/change_detection/change_detection.js");
var import8 = __webpack_require__("./src/app/+selection/countries.service.ts");
var import9 = __webpack_require__("./node_modules/@angular/core/src/metadata/view.js");
var import10 = __webpack_require__("./node_modules/@angular/core/src/linker/component_factory.js");
var import11 = __webpack_require__("./node_modules/right-angled/src/core/selection/selection-service.js");
var import12 = __webpack_require__("./node_modules/right-angled/src/core/providers.js");
var import13 = __webpack_require__("./src/compiled/node_modules/right-angled/src/selection-directives/selection-area.directive.ngfactory.ts");
var import14 = __webpack_require__("./node_modules/@angular/core/src/linker/query_list.js");
var import15 = __webpack_require__("./src/app/+selection/service-injection/nested-button.component.ts");
var import16 = __webpack_require__("./src/compiled/src/app/+selection/service-injection/nested-button.component.ngfactory.ts");
var import17 = __webpack_require__("./src/compiled/node_modules/@angular/common/src/directives/ng_for.ngfactory.ts");
var import18 = __webpack_require__("./node_modules/@angular/core/src/linker/template_ref.js");
var import19 = __webpack_require__("./node_modules/@angular/core/src/change_detection/differs/iterable_differs.js");
var import20 = __webpack_require__("./node_modules/@angular/common/src/directives/ng_for.js");
var import21 = __webpack_require__("./node_modules/right-angled/src/selection-directives/selection-area.directive.js");
var import22 = __webpack_require__("./src/compiled/node_modules/right-angled/src/selection-directives/selectable.directive.ngfactory.ts");
var import23 = __webpack_require__("./node_modules/right-angled/src/selection-directives/selectable.directive.js");
var Wrapper_ServiceInjectionComponent = (function () {
    function Wrapper_ServiceInjectionComponent(p0) {
        this._changed = false;
        this.context = new import0.ServiceInjectionComponent(p0);
    }
    Wrapper_ServiceInjectionComponent.prototype.ngOnDetach = function (view, componentView, el) {
    };
    Wrapper_ServiceInjectionComponent.prototype.ngOnDestroy = function () {
    };
    Wrapper_ServiceInjectionComponent.prototype.ngDoCheck = function (view, el, throwOnChange) {
        var changed = this._changed;
        this._changed = false;
        return changed;
    };
    Wrapper_ServiceInjectionComponent.prototype.checkHost = function (view, componentView, el, throwOnChange) {
    };
    Wrapper_ServiceInjectionComponent.prototype.handleEvent = function (eventName, $event) {
        var result = true;
        return result;
    };
    Wrapper_ServiceInjectionComponent.prototype.subscribe = function (view, _eventHandler) {
        this._eventHandler = _eventHandler;
    };
    return Wrapper_ServiceInjectionComponent;
}());
exports.Wrapper_ServiceInjectionComponent = Wrapper_ServiceInjectionComponent;
var renderType_ServiceInjectionComponent_Host = null;
var _View_ServiceInjectionComponent_Host0 = (function (_super) {
    __extends(_View_ServiceInjectionComponent_Host0, _super);
    function _View_ServiceInjectionComponent_Host0(viewUtils, parentInjector, declarationEl) {
        _super.call(this, _View_ServiceInjectionComponent_Host0, renderType_ServiceInjectionComponent_Host, import6.ViewType.HOST, viewUtils, parentInjector, declarationEl, import7.ChangeDetectorStatus.CheckAlways);
    }
    _View_ServiceInjectionComponent_Host0.prototype.createInternal = function (rootSelector) {
        this._el_0 = import4.selectOrCreateRenderHostElement(this.renderer, 'rt-demo-service-injection', import4.EMPTY_INLINE_ARRAY, rootSelector, null);
        this._appEl_0 = new import3.AppElement(0, null, this, this._el_0);
        this.compView_0 = viewFactory_ServiceInjectionComponent0(this.viewUtils, this.injector(0), this._appEl_0);
        this._ServiceInjectionComponent_0_4 = new Wrapper_ServiceInjectionComponent(this.parentInjector.get(import8.CountriesService));
        this._appEl_0.initComponent(this._ServiceInjectionComponent_0_4.context, this.compView_0);
        this.compView_0.create(this._ServiceInjectionComponent_0_4.context, null);
        this.init(this._el_0, [this._el_0], null);
        return this._appEl_0;
    };
    _View_ServiceInjectionComponent_Host0.prototype.injectorGetInternal = function (token, requestNodeIndex, notFoundResult) {
        if (((token === import0.ServiceInjectionComponent) && (0 === requestNodeIndex))) {
            return this._ServiceInjectionComponent_0_4.context;
        }
        return notFoundResult;
    };
    _View_ServiceInjectionComponent_Host0.prototype.detectChangesInternal = function (throwOnChange) {
        this._ServiceInjectionComponent_0_4.ngDoCheck(this, this._el_0, throwOnChange);
        this.compView_0.detectChanges(throwOnChange);
    };
    _View_ServiceInjectionComponent_Host0.prototype.destroyInternal = function () {
        this.compView_0.destroy();
    };
    _View_ServiceInjectionComponent_Host0.prototype.visitRootNodesInternal = function (cb, ctx) {
        cb(this._el_0, ctx);
    };
    return _View_ServiceInjectionComponent_Host0;
}(import1.AppView));
function viewFactory_ServiceInjectionComponent_Host0(viewUtils, parentInjector, declarationEl) {
    if ((renderType_ServiceInjectionComponent_Host === null)) {
        (renderType_ServiceInjectionComponent_Host = viewUtils.createRenderComponentType('', 0, import9.ViewEncapsulation.None, [], {}));
    }
    return new _View_ServiceInjectionComponent_Host0(viewUtils, parentInjector, declarationEl);
}
exports.ServiceInjectionComponentNgFactory = new import10.ComponentFactory('rt-demo-service-injection', viewFactory_ServiceInjectionComponent_Host0, import0.ServiceInjectionComponent);
var styles_ServiceInjectionComponent = [];
var renderType_ServiceInjectionComponent = null;
var _View_ServiceInjectionComponent0 = (function (_super) {
    __extends(_View_ServiceInjectionComponent0, _super);
    function _View_ServiceInjectionComponent0(viewUtils, parentInjector, declarationEl) {
        _super.call(this, _View_ServiceInjectionComponent0, renderType_ServiceInjectionComponent, import6.ViewType.COMPONENT, viewUtils, parentInjector, declarationEl, import7.ChangeDetectorStatus.CheckAlways);
    }
    _View_ServiceInjectionComponent0.prototype.createInternal = function (rootSelector) {
        var parentRenderNode = this.renderer.createViewRoot(this.declarationAppElement.nativeElement);
        this._el_0 = import4.createRenderElement(this.renderer, parentRenderNode, 'div', new import4.InlineArray4(4, 'class', 'row', 'rtSelectionArea', ''), null);
        this._RtSelectionService_0_3 = new import11.RtSelectionService();
        this._RtSelectionEventsHelper_0_4 = new import12.RtSelectionEventsHelper(this._RtSelectionService_0_3);
        this._SelectionAreaDirective_0_5 = new import13.Wrapper_SelectionAreaDirective(this._RtSelectionService_0_3, this._RtSelectionEventsHelper_0_4);
        this._query_SelectableDirective_0_0 = new import14.QueryList();
        this._query_SelectionCheckboxForDirective_0_1 = new import14.QueryList();
        this._query_SelectionAreaDirective_0_2 = new import14.QueryList();
        this._text_1 = this.renderer.createText(this._el_0, '\n  ', null);
        this._el_2 = import4.createRenderElement(this.renderer, this._el_0, 'div', new import4.InlineArray2(2, 'class', 'col-md-12 toolbar'), null);
        this._text_3 = this.renderer.createText(this._el_2, '\n    ', null);
        this._el_4 = import4.createRenderElement(this.renderer, this._el_2, 'rt-demo-nested-button', import4.EMPTY_INLINE_ARRAY, null);
        this._appEl_4 = new import3.AppElement(4, 2, this, this._el_4);
        this.compView_4 = import16.viewFactory_NestedButtonComponent0(this.viewUtils, this.injector(4), this._appEl_4);
        this._NestedButtonComponent_4_4 = new import16.Wrapper_NestedButtonComponent(this._RtSelectionService_0_3);
        this._appEl_4.initComponent(this._NestedButtonComponent_4_4.context, this.compView_4);
        this.compView_4.create(this._NestedButtonComponent_4_4.context, null);
        this._text_5 = this.renderer.createText(this._el_2, '\n  ', null);
        this._text_6 = this.renderer.createText(this._el_0, '\n  ', null);
        this._anchor_7 = this.renderer.createTemplateAnchor(this._el_0, null);
        this._appEl_7 = new import3.AppElement(7, 0, this, this._anchor_7);
        this._TemplateRef_7_5 = new import18.TemplateRef_(this._appEl_7, viewFactory_ServiceInjectionComponent1);
        this._NgFor_7_6 = new import17.Wrapper_NgFor(this._appEl_7.vcRef, this._TemplateRef_7_5, this.parentInjector.get(import19.IterableDiffers), this.ref);
        this._text_8 = this.renderer.createText(this._el_0, '\n', null);
        var disposable_0 = import4.subscribeToRenderElement(this, this._el_0, new import4.InlineArray2(2, 'keydown', null), this.eventHandler(this.handleEvent_0));
        this.init(null, [
            this._el_0,
            this._text_1,
            this._el_2,
            this._text_3,
            this._el_4,
            this._text_5,
            this._text_6,
            this._anchor_7,
            this._text_8
        ], [disposable_0]);
        return null;
    };
    _View_ServiceInjectionComponent0.prototype.injectorGetInternal = function (token, requestNodeIndex, notFoundResult) {
        if (((token === import15.NestedButtonComponent) && (4 === requestNodeIndex))) {
            return this._NestedButtonComponent_4_4.context;
        }
        if (((token === import18.TemplateRef) && (7 === requestNodeIndex))) {
            return this._TemplateRef_7_5;
        }
        if (((token === import20.NgFor) && (7 === requestNodeIndex))) {
            return this._NgFor_7_6.context;
        }
        if (((token === import11.RtSelectionService) && ((0 <= requestNodeIndex) && (requestNodeIndex <= 8)))) {
            return this._RtSelectionService_0_3;
        }
        if (((token === import12.RtSelectionEventsHelper) && ((0 <= requestNodeIndex) && (requestNodeIndex <= 8)))) {
            return this._RtSelectionEventsHelper_0_4;
        }
        if (((token === import21.SelectionAreaDirective) && ((0 <= requestNodeIndex) && (requestNodeIndex <= 8)))) {
            return this._SelectionAreaDirective_0_5.context;
        }
        return notFoundResult;
    };
    _View_ServiceInjectionComponent0.prototype.detectChangesInternal = function (throwOnChange) {
        this._SelectionAreaDirective_0_5.ngDoCheck(this, this._el_0, throwOnChange);
        this._NestedButtonComponent_4_4.ngDoCheck(this, this._el_4, throwOnChange);
        var currVal_7_0_0 = this.context.countries;
        this._NgFor_7_6.check_ngForOf(currVal_7_0_0, throwOnChange, false);
        this._NgFor_7_6.ngDoCheck(this, this._anchor_7, throwOnChange);
        this._appEl_7.detectChangesInNestedViews(throwOnChange);
        if (!throwOnChange) {
            if (this._query_SelectableDirective_0_0.dirty) {
                this._query_SelectableDirective_0_0.reset([this._appEl_7.mapNestedViews(_View_ServiceInjectionComponent1, function (nestedView) {
                        return [nestedView._SelectableDirective_0_3.context];
                    })]);
                this._SelectionAreaDirective_0_5.context.selectableItems = this._query_SelectableDirective_0_0;
                this._query_SelectableDirective_0_0.notifyOnChanges();
            }
            if (this._query_SelectionCheckboxForDirective_0_1.dirty) {
                this._query_SelectionCheckboxForDirective_0_1.reset([]);
                this._SelectionAreaDirective_0_5.context.childSelectionCheckboxes = this._query_SelectionCheckboxForDirective_0_1;
                this._query_SelectionCheckboxForDirective_0_1.notifyOnChanges();
            }
            if (this._query_SelectionAreaDirective_0_2.dirty) {
                this._query_SelectionAreaDirective_0_2.reset([this._SelectionAreaDirective_0_5.context]);
                this._SelectionAreaDirective_0_5.context.childSelectionAreas = this._query_SelectionAreaDirective_0_2;
                this._query_SelectionAreaDirective_0_2.notifyOnChanges();
            }
            if ((this.numberOfChecks === 0)) {
                this._SelectionAreaDirective_0_5.context.ngAfterContentInit();
            }
        }
        this._SelectionAreaDirective_0_5.checkHost(this, this, this._el_0, throwOnChange);
        this.compView_4.detectChanges(throwOnChange);
    };
    _View_ServiceInjectionComponent0.prototype.destroyInternal = function () {
        this._appEl_7.destroyNestedViews();
        this.compView_4.destroy();
        this._SelectionAreaDirective_0_5.ngOnDestroy();
    };
    _View_ServiceInjectionComponent0.prototype.handleEvent_0 = function (eventName, $event) {
        this.markPathToRootAsCheckOnce();
        var result = true;
        result = (this._SelectionAreaDirective_0_5.handleEvent(eventName, $event) && result);
        return result;
    };
    return _View_ServiceInjectionComponent0;
}(import1.AppView));
function viewFactory_ServiceInjectionComponent0(viewUtils, parentInjector, declarationEl) {
    if ((renderType_ServiceInjectionComponent === null)) {
        (renderType_ServiceInjectionComponent = viewUtils.createRenderComponentType('', 0, import9.ViewEncapsulation.None, styles_ServiceInjectionComponent, {}));
    }
    return new _View_ServiceInjectionComponent0(viewUtils, parentInjector, declarationEl);
}
exports.viewFactory_ServiceInjectionComponent0 = viewFactory_ServiceInjectionComponent0;
var _View_ServiceInjectionComponent1 = (function (_super) {
    __extends(_View_ServiceInjectionComponent1, _super);
    function _View_ServiceInjectionComponent1(viewUtils, parentInjector, declarationEl) {
        _super.call(this, _View_ServiceInjectionComponent1, renderType_ServiceInjectionComponent, import6.ViewType.EMBEDDED, viewUtils, parentInjector, declarationEl, import7.ChangeDetectorStatus.CheckAlways);
        this._expr_6 = import7.UNINITIALIZED;
        this._expr_7 = import7.UNINITIALIZED;
    }
    _View_ServiceInjectionComponent1.prototype.createInternal = function (rootSelector) {
        this._el_0 = import4.createRenderElement(this.renderer, null, 'div', new import4.InlineArray2(2, 'class', 'col-md-12'), null);
        this._SelectableDirective_0_3 = new import22.Wrapper_SelectableDirective(this.parent._RtSelectionEventsHelper_0_4);
        this._text_1 = this.renderer.createText(this._el_0, '\n    ', null);
        this._el_2 = import4.createRenderElement(this.renderer, this._el_0, 'div', new import4.InlineArray2(2, 'class', 'item'), null);
        this._text_3 = this.renderer.createText(this._el_2, '', null);
        this._text_4 = this.renderer.createText(this._el_0, '\n  ', null);
        var disposable_0 = import4.subscribeToRenderElement(this, this._el_0, new import4.InlineArray2(2, 'mouseup', null), this.eventHandler(this.handleEvent_0));
        this.init(this._el_0, [
            this._el_0,
            this._text_1,
            this._el_2,
            this._text_3,
            this._text_4
        ], [disposable_0]);
        return null;
    };
    _View_ServiceInjectionComponent1.prototype.injectorGetInternal = function (token, requestNodeIndex, notFoundResult) {
        if (((token === import23.SelectableDirective) && ((0 <= requestNodeIndex) && (requestNodeIndex <= 4)))) {
            return this._SelectableDirective_0_3.context;
        }
        return notFoundResult;
    };
    _View_ServiceInjectionComponent1.prototype.detectChangesInternal = function (throwOnChange) {
        var currVal_0_0_0 = this.context.$implicit;
        this._SelectableDirective_0_3.check_item(currVal_0_0_0, throwOnChange, false);
        this._SelectableDirective_0_3.ngDoCheck(this, this._el_0, throwOnChange);
        var currVal_6 = this._SelectableDirective_0_3.context.selected;
        if (import4.checkBinding(throwOnChange, this._expr_6, currVal_6)) {
            this.renderer.setElementClass(this._el_2, 'selected', currVal_6);
            this._expr_6 = currVal_6;
        }
        var currVal_7 = import4.interpolate(1, '\n      ', this.context.$implicit.name, '\n    ');
        if (import4.checkBinding(throwOnChange, this._expr_7, currVal_7)) {
            this.renderer.setText(this._text_3, currVal_7);
            this._expr_7 = currVal_7;
        }
    };
    _View_ServiceInjectionComponent1.prototype.dirtyParentQueriesInternal = function () {
        this.parent._query_SelectableDirective_0_0.setDirty();
    };
    _View_ServiceInjectionComponent1.prototype.destroyInternal = function () {
        this._SelectableDirective_0_3.ngOnDestroy();
    };
    _View_ServiceInjectionComponent1.prototype.visitRootNodesInternal = function (cb, ctx) {
        cb(this._el_0, ctx);
    };
    _View_ServiceInjectionComponent1.prototype.handleEvent_0 = function (eventName, $event) {
        this.markPathToRootAsCheckOnce();
        var result = true;
        result = (this._SelectableDirective_0_3.handleEvent(eventName, $event) && result);
        return result;
    };
    return _View_ServiceInjectionComponent1;
}(import1.AppView));
function viewFactory_ServiceInjectionComponent1(viewUtils, parentInjector, declarationEl) {
    return new _View_ServiceInjectionComponent1(viewUtils, parentInjector, declarationEl);
}


/***/ },

/***/ "./src/compiled/src/app/+selection/service-view-child/service-view-child.component.ngfactory.ts":
/***/ function(module, exports, __webpack_require__) {

"use strict";
/**
 * This file is generated by the Angular 2 template compiler.
 * Do not edit.
 */
/* tslint:disable */
"use strict";
var import0 = __webpack_require__("./src/app/+selection/service-view-child/service-view-child.component.ts");
var import1 = __webpack_require__("./node_modules/@angular/core/src/linker/view.js");
var import3 = __webpack_require__("./node_modules/@angular/core/src/linker/element.js");
var import4 = __webpack_require__("./node_modules/@angular/core/src/linker/view_utils.js");
var import6 = __webpack_require__("./node_modules/@angular/core/src/linker/view_type.js");
var import7 = __webpack_require__("./node_modules/@angular/core/src/change_detection/change_detection.js");
var import8 = __webpack_require__("./src/app/+selection/countries.service.ts");
var import9 = __webpack_require__("./node_modules/@angular/core/src/metadata/view.js");
var import10 = __webpack_require__("./node_modules/@angular/core/src/linker/component_factory.js");
var import11 = __webpack_require__("./node_modules/@angular/core/src/linker/query_list.js");
var import12 = __webpack_require__("./node_modules/right-angled/src/core/selection/selection-service.js");
var import13 = __webpack_require__("./node_modules/right-angled/src/core/providers.js");
var import14 = __webpack_require__("./src/compiled/node_modules/right-angled/src/selection-directives/selection-area.directive.ngfactory.ts");
var import15 = __webpack_require__("./src/compiled/node_modules/@angular/common/src/directives/ng_for.ngfactory.ts");
var import16 = __webpack_require__("./node_modules/@angular/core/src/linker/template_ref.js");
var import17 = __webpack_require__("./node_modules/@angular/core/src/change_detection/differs/iterable_differs.js");
var import18 = __webpack_require__("./node_modules/@angular/common/src/directives/ng_for.js");
var import19 = __webpack_require__("./node_modules/right-angled/src/selection-directives/selection-area.directive.js");
var import20 = __webpack_require__("./src/compiled/node_modules/right-angled/src/selection-directives/selectable.directive.ngfactory.ts");
var import21 = __webpack_require__("./node_modules/right-angled/src/selection-directives/selectable.directive.js");
var Wrapper_ServiceViewChildComponent = (function () {
    function Wrapper_ServiceViewChildComponent(p0) {
        this._changed = false;
        this.context = new import0.ServiceViewChildComponent(p0);
    }
    Wrapper_ServiceViewChildComponent.prototype.ngOnDetach = function (view, componentView, el) {
    };
    Wrapper_ServiceViewChildComponent.prototype.ngOnDestroy = function () {
    };
    Wrapper_ServiceViewChildComponent.prototype.ngDoCheck = function (view, el, throwOnChange) {
        var changed = this._changed;
        this._changed = false;
        return changed;
    };
    Wrapper_ServiceViewChildComponent.prototype.checkHost = function (view, componentView, el, throwOnChange) {
    };
    Wrapper_ServiceViewChildComponent.prototype.handleEvent = function (eventName, $event) {
        var result = true;
        return result;
    };
    Wrapper_ServiceViewChildComponent.prototype.subscribe = function (view, _eventHandler) {
        this._eventHandler = _eventHandler;
    };
    return Wrapper_ServiceViewChildComponent;
}());
exports.Wrapper_ServiceViewChildComponent = Wrapper_ServiceViewChildComponent;
var renderType_ServiceViewChildComponent_Host = null;
var _View_ServiceViewChildComponent_Host0 = (function (_super) {
    __extends(_View_ServiceViewChildComponent_Host0, _super);
    function _View_ServiceViewChildComponent_Host0(viewUtils, parentInjector, declarationEl) {
        _super.call(this, _View_ServiceViewChildComponent_Host0, renderType_ServiceViewChildComponent_Host, import6.ViewType.HOST, viewUtils, parentInjector, declarationEl, import7.ChangeDetectorStatus.CheckAlways);
    }
    _View_ServiceViewChildComponent_Host0.prototype.createInternal = function (rootSelector) {
        this._el_0 = import4.selectOrCreateRenderHostElement(this.renderer, 'rt-demo-service-view-child', import4.EMPTY_INLINE_ARRAY, rootSelector, null);
        this._appEl_0 = new import3.AppElement(0, null, this, this._el_0);
        this.compView_0 = viewFactory_ServiceViewChildComponent0(this.viewUtils, this.injector(0), this._appEl_0);
        this._ServiceViewChildComponent_0_4 = new Wrapper_ServiceViewChildComponent(this.parentInjector.get(import8.CountriesService));
        this._appEl_0.initComponent(this._ServiceViewChildComponent_0_4.context, this.compView_0);
        this.compView_0.create(this._ServiceViewChildComponent_0_4.context, null);
        this.init(this._el_0, [this._el_0], null);
        return this._appEl_0;
    };
    _View_ServiceViewChildComponent_Host0.prototype.injectorGetInternal = function (token, requestNodeIndex, notFoundResult) {
        if (((token === import0.ServiceViewChildComponent) && (0 === requestNodeIndex))) {
            return this._ServiceViewChildComponent_0_4.context;
        }
        return notFoundResult;
    };
    _View_ServiceViewChildComponent_Host0.prototype.detectChangesInternal = function (throwOnChange) {
        this._ServiceViewChildComponent_0_4.ngDoCheck(this, this._el_0, throwOnChange);
        this.compView_0.detectChanges(throwOnChange);
    };
    _View_ServiceViewChildComponent_Host0.prototype.destroyInternal = function () {
        this.compView_0.destroy();
    };
    _View_ServiceViewChildComponent_Host0.prototype.visitRootNodesInternal = function (cb, ctx) {
        cb(this._el_0, ctx);
    };
    return _View_ServiceViewChildComponent_Host0;
}(import1.AppView));
function viewFactory_ServiceViewChildComponent_Host0(viewUtils, parentInjector, declarationEl) {
    if ((renderType_ServiceViewChildComponent_Host === null)) {
        (renderType_ServiceViewChildComponent_Host = viewUtils.createRenderComponentType('', 0, import9.ViewEncapsulation.None, [], {}));
    }
    return new _View_ServiceViewChildComponent_Host0(viewUtils, parentInjector, declarationEl);
}
exports.ServiceViewChildComponentNgFactory = new import10.ComponentFactory('rt-demo-service-view-child', viewFactory_ServiceViewChildComponent_Host0, import0.ServiceViewChildComponent);
var styles_ServiceViewChildComponent = [];
var renderType_ServiceViewChildComponent = null;
var _View_ServiceViewChildComponent0 = (function (_super) {
    __extends(_View_ServiceViewChildComponent0, _super);
    function _View_ServiceViewChildComponent0(viewUtils, parentInjector, declarationEl) {
        _super.call(this, _View_ServiceViewChildComponent0, renderType_ServiceViewChildComponent, import6.ViewType.COMPONENT, viewUtils, parentInjector, declarationEl, import7.ChangeDetectorStatus.CheckAlways);
    }
    _View_ServiceViewChildComponent0.prototype.createInternal = function (rootSelector) {
        var parentRenderNode = this.renderer.createViewRoot(this.declarationAppElement.nativeElement);
        this._viewQuery_SelectionAreaDirective_0 = new import11.QueryList();
        this._el_0 = import4.createRenderElement(this.renderer, parentRenderNode, 'div', new import4.InlineArray4(4, 'class', 'row', 'rtSelectionArea', ''), null);
        this._RtSelectionService_0_3 = new import12.RtSelectionService();
        this._RtSelectionEventsHelper_0_4 = new import13.RtSelectionEventsHelper(this._RtSelectionService_0_3);
        this._SelectionAreaDirective_0_5 = new import14.Wrapper_SelectionAreaDirective(this._RtSelectionService_0_3, this._RtSelectionEventsHelper_0_4);
        this._query_SelectableDirective_0_0 = new import11.QueryList();
        this._query_SelectionCheckboxForDirective_0_1 = new import11.QueryList();
        this._query_SelectionAreaDirective_0_2 = new import11.QueryList();
        this._text_1 = this.renderer.createText(this._el_0, '\n  ', null);
        this._el_2 = import4.createRenderElement(this.renderer, this._el_0, 'div', new import4.InlineArray2(2, 'class', 'col-md-12 toolbar'), null);
        this._text_3 = this.renderer.createText(this._el_2, '\n    ', null);
        this._el_4 = import4.createRenderElement(this.renderer, this._el_2, 'button', new import4.InlineArray4(4, 'class', 'btn btn-primary', 'title', 'Get selected items'), null);
        this._text_5 = this.renderer.createText(this._el_4, 'Get selected items', null);
        this._text_6 = this.renderer.createText(this._el_2, '\n  ', null);
        this._text_7 = this.renderer.createText(this._el_0, '\n  ', null);
        this._anchor_8 = this.renderer.createTemplateAnchor(this._el_0, null);
        this._appEl_8 = new import3.AppElement(8, 0, this, this._anchor_8);
        this._TemplateRef_8_5 = new import16.TemplateRef_(this._appEl_8, viewFactory_ServiceViewChildComponent1);
        this._NgFor_8_6 = new import15.Wrapper_NgFor(this._appEl_8.vcRef, this._TemplateRef_8_5, this.parentInjector.get(import17.IterableDiffers), this.ref);
        this._text_9 = this.renderer.createText(this._el_0, '\n', null);
        var disposable_0 = import4.subscribeToRenderElement(this, this._el_0, new import4.InlineArray2(2, 'keydown', null), this.eventHandler(this.handleEvent_0));
        var disposable_1 = import4.subscribeToRenderElement(this, this._el_4, new import4.InlineArray2(2, 'click', null), this.eventHandler(this.handleEvent_4));
        this._viewQuery_SelectionAreaDirective_0.reset([this._SelectionAreaDirective_0_5.context]);
        this.context.selectionArea = this._viewQuery_SelectionAreaDirective_0.first;
        this.init(null, [
            this._el_0,
            this._text_1,
            this._el_2,
            this._text_3,
            this._el_4,
            this._text_5,
            this._text_6,
            this._text_7,
            this._anchor_8,
            this._text_9
        ], [
            disposable_0,
            disposable_1
        ]);
        return null;
    };
    _View_ServiceViewChildComponent0.prototype.injectorGetInternal = function (token, requestNodeIndex, notFoundResult) {
        if (((token === import16.TemplateRef) && (8 === requestNodeIndex))) {
            return this._TemplateRef_8_5;
        }
        if (((token === import18.NgFor) && (8 === requestNodeIndex))) {
            return this._NgFor_8_6.context;
        }
        if (((token === import12.RtSelectionService) && ((0 <= requestNodeIndex) && (requestNodeIndex <= 9)))) {
            return this._RtSelectionService_0_3;
        }
        if (((token === import13.RtSelectionEventsHelper) && ((0 <= requestNodeIndex) && (requestNodeIndex <= 9)))) {
            return this._RtSelectionEventsHelper_0_4;
        }
        if (((token === import19.SelectionAreaDirective) && ((0 <= requestNodeIndex) && (requestNodeIndex <= 9)))) {
            return this._SelectionAreaDirective_0_5.context;
        }
        return notFoundResult;
    };
    _View_ServiceViewChildComponent0.prototype.detectChangesInternal = function (throwOnChange) {
        this._SelectionAreaDirective_0_5.ngDoCheck(this, this._el_0, throwOnChange);
        var currVal_8_0_0 = this.context.countries;
        this._NgFor_8_6.check_ngForOf(currVal_8_0_0, throwOnChange, false);
        this._NgFor_8_6.ngDoCheck(this, this._anchor_8, throwOnChange);
        this._appEl_8.detectChangesInNestedViews(throwOnChange);
        if (!throwOnChange) {
            if (this._query_SelectableDirective_0_0.dirty) {
                this._query_SelectableDirective_0_0.reset([this._appEl_8.mapNestedViews(_View_ServiceViewChildComponent1, function (nestedView) {
                        return [nestedView._SelectableDirective_0_3.context];
                    })]);
                this._SelectionAreaDirective_0_5.context.selectableItems = this._query_SelectableDirective_0_0;
                this._query_SelectableDirective_0_0.notifyOnChanges();
            }
            if (this._query_SelectionCheckboxForDirective_0_1.dirty) {
                this._query_SelectionCheckboxForDirective_0_1.reset([]);
                this._SelectionAreaDirective_0_5.context.childSelectionCheckboxes = this._query_SelectionCheckboxForDirective_0_1;
                this._query_SelectionCheckboxForDirective_0_1.notifyOnChanges();
            }
            if (this._query_SelectionAreaDirective_0_2.dirty) {
                this._query_SelectionAreaDirective_0_2.reset([this._SelectionAreaDirective_0_5.context]);
                this._SelectionAreaDirective_0_5.context.childSelectionAreas = this._query_SelectionAreaDirective_0_2;
                this._query_SelectionAreaDirective_0_2.notifyOnChanges();
            }
            if ((this.numberOfChecks === 0)) {
                this._SelectionAreaDirective_0_5.context.ngAfterContentInit();
            }
        }
        this._SelectionAreaDirective_0_5.checkHost(this, this, this._el_0, throwOnChange);
    };
    _View_ServiceViewChildComponent0.prototype.destroyInternal = function () {
        this._appEl_8.destroyNestedViews();
        this._SelectionAreaDirective_0_5.ngOnDestroy();
    };
    _View_ServiceViewChildComponent0.prototype.handleEvent_0 = function (eventName, $event) {
        this.markPathToRootAsCheckOnce();
        var result = true;
        result = (this._SelectionAreaDirective_0_5.handleEvent(eventName, $event) && result);
        return result;
    };
    _View_ServiceViewChildComponent0.prototype.handleEvent_4 = function (eventName, $event) {
        this.markPathToRootAsCheckOnce();
        var result = true;
        if ((eventName == 'click')) {
            var pd_sub_0 = (this.context.displaySelectedItems() !== false);
            result = (pd_sub_0 && result);
        }
        return result;
    };
    return _View_ServiceViewChildComponent0;
}(import1.AppView));
function viewFactory_ServiceViewChildComponent0(viewUtils, parentInjector, declarationEl) {
    if ((renderType_ServiceViewChildComponent === null)) {
        (renderType_ServiceViewChildComponent = viewUtils.createRenderComponentType('', 0, import9.ViewEncapsulation.None, styles_ServiceViewChildComponent, {}));
    }
    return new _View_ServiceViewChildComponent0(viewUtils, parentInjector, declarationEl);
}
exports.viewFactory_ServiceViewChildComponent0 = viewFactory_ServiceViewChildComponent0;
var _View_ServiceViewChildComponent1 = (function (_super) {
    __extends(_View_ServiceViewChildComponent1, _super);
    function _View_ServiceViewChildComponent1(viewUtils, parentInjector, declarationEl) {
        _super.call(this, _View_ServiceViewChildComponent1, renderType_ServiceViewChildComponent, import6.ViewType.EMBEDDED, viewUtils, parentInjector, declarationEl, import7.ChangeDetectorStatus.CheckAlways);
        this._expr_6 = import7.UNINITIALIZED;
        this._expr_7 = import7.UNINITIALIZED;
    }
    _View_ServiceViewChildComponent1.prototype.createInternal = function (rootSelector) {
        this._el_0 = import4.createRenderElement(this.renderer, null, 'div', new import4.InlineArray2(2, 'class', 'col-md-12'), null);
        this._SelectableDirective_0_3 = new import20.Wrapper_SelectableDirective(this.parent._RtSelectionEventsHelper_0_4);
        this._text_1 = this.renderer.createText(this._el_0, '\n    ', null);
        this._el_2 = import4.createRenderElement(this.renderer, this._el_0, 'div', new import4.InlineArray2(2, 'class', 'item'), null);
        this._text_3 = this.renderer.createText(this._el_2, '', null);
        this._text_4 = this.renderer.createText(this._el_0, '\n  ', null);
        var disposable_0 = import4.subscribeToRenderElement(this, this._el_0, new import4.InlineArray2(2, 'mouseup', null), this.eventHandler(this.handleEvent_0));
        this.init(this._el_0, [
            this._el_0,
            this._text_1,
            this._el_2,
            this._text_3,
            this._text_4
        ], [disposable_0]);
        return null;
    };
    _View_ServiceViewChildComponent1.prototype.injectorGetInternal = function (token, requestNodeIndex, notFoundResult) {
        if (((token === import21.SelectableDirective) && ((0 <= requestNodeIndex) && (requestNodeIndex <= 4)))) {
            return this._SelectableDirective_0_3.context;
        }
        return notFoundResult;
    };
    _View_ServiceViewChildComponent1.prototype.detectChangesInternal = function (throwOnChange) {
        var currVal_0_0_0 = this.context.$implicit;
        this._SelectableDirective_0_3.check_item(currVal_0_0_0, throwOnChange, false);
        this._SelectableDirective_0_3.ngDoCheck(this, this._el_0, throwOnChange);
        var currVal_6 = this._SelectableDirective_0_3.context.selected;
        if (import4.checkBinding(throwOnChange, this._expr_6, currVal_6)) {
            this.renderer.setElementClass(this._el_2, 'selected', currVal_6);
            this._expr_6 = currVal_6;
        }
        var currVal_7 = import4.interpolate(1, '\n      ', this.context.$implicit.name, '\n    ');
        if (import4.checkBinding(throwOnChange, this._expr_7, currVal_7)) {
            this.renderer.setText(this._text_3, currVal_7);
            this._expr_7 = currVal_7;
        }
    };
    _View_ServiceViewChildComponent1.prototype.dirtyParentQueriesInternal = function () {
        this.parent._query_SelectableDirective_0_0.setDirty();
    };
    _View_ServiceViewChildComponent1.prototype.destroyInternal = function () {
        this._SelectableDirective_0_3.ngOnDestroy();
    };
    _View_ServiceViewChildComponent1.prototype.visitRootNodesInternal = function (cb, ctx) {
        cb(this._el_0, ctx);
    };
    _View_ServiceViewChildComponent1.prototype.handleEvent_0 = function (eventName, $event) {
        this.markPathToRootAsCheckOnce();
        var result = true;
        result = (this._SelectableDirective_0_3.handleEvent(eventName, $event) && result);
        return result;
    };
    return _View_ServiceViewChildComponent1;
}(import1.AppView));
function viewFactory_ServiceViewChildComponent1(viewUtils, parentInjector, declarationEl) {
    return new _View_ServiceViewChildComponent1(viewUtils, parentInjector, declarationEl);
}


/***/ }

});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,